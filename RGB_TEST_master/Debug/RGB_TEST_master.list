
RGB_TEST_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a04c  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee14  0800ee14  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee14  0800ee14  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee14  0800ee14  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee14  0800ee14  0001ee14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee18  0800ee18  0001ee18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800ee1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dbc  20000028  0800ee44  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000de4  0800ee44  00020de4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011296  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c9e  00000000  00000000  000312e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a8  00000000  00000000  00033f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  00035030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017605  00000000  00000000  00035f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dddc  00000000  00000000  0004d575  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081ad0  00000000  00000000  0005b351  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dce21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004418  00000000  00000000  000dce9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000028 	.word	0x20000028
 8000200:	00000000 	.word	0x00000000
 8000204:	08004db0 	.word	0x08004db0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000002c 	.word	0x2000002c
 8000220:	08004db0 	.word	0x08004db0

08000224 <crc_check>:
uint32	rxd_ok=0;
uint32	rxd_err=0;


void crc_check(uchar *ptr,uchar len)	//	CRC16  多项式： X^16+X^15+X^2+1
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	70fb      	strb	r3, [r7, #3]
	uint crc=0xffff;
 8000230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000234:	60fb      	str	r3, [r7, #12]
	uchar i_crc,j_crc;
	for(i_crc=0;i_crc<len;i_crc++)
 8000236:	2300      	movs	r3, #0
 8000238:	72fb      	strb	r3, [r7, #11]
 800023a:	e023      	b.n	8000284 <crc_check+0x60>
	{
		crc^=ptr[i_crc];
 800023c:	7afb      	ldrb	r3, [r7, #11]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	4053      	eors	r3, r2
 800024a:	60fb      	str	r3, [r7, #12]
		for(j_crc=0;j_crc<8;j_crc++)
 800024c:	2300      	movs	r3, #0
 800024e:	72bb      	strb	r3, [r7, #10]
 8000250:	e012      	b.n	8000278 <crc_check+0x54>
		{
			if(crc&0x0001)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d007      	beq.n	800026c <crc_check+0x48>
				crc=(crc>>1)^0xA001;	//0xA001
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8000264:	f083 0301 	eor.w	r3, r3, #1
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	e002      	b.n	8000272 <crc_check+0x4e>
			else
				crc=crc>>1;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	085b      	lsrs	r3, r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
		for(j_crc=0;j_crc<8;j_crc++)
 8000272:	7abb      	ldrb	r3, [r7, #10]
 8000274:	3301      	adds	r3, #1
 8000276:	72bb      	strb	r3, [r7, #10]
 8000278:	7abb      	ldrb	r3, [r7, #10]
 800027a:	2b07      	cmp	r3, #7
 800027c:	d9e9      	bls.n	8000252 <crc_check+0x2e>
	for(i_crc=0;i_crc<len;i_crc++)
 800027e:	7afb      	ldrb	r3, [r7, #11]
 8000280:	3301      	adds	r3, #1
 8000282:	72fb      	strb	r3, [r7, #11]
 8000284:	7afa      	ldrb	r2, [r7, #11]
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	429a      	cmp	r2, r3
 800028a:	d3d7      	bcc.n	800023c <crc_check+0x18>
		}
	}
	CRC_LOW=crc&0x00ff;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <crc_check+0x84>)
 8000292:	701a      	strb	r2, [r3, #0]
	CRC_HIG=crc>>8;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	0a1b      	lsrs	r3, r3, #8
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <crc_check+0x88>)
 800029c:	701a      	strb	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	20000558 	.word	0x20000558
 80002ac:	2000027e 	.word	0x2000027e

080002b0 <CC2520_GPIO_Config>:
///////////////////////////////////////////////////////////
void CC2520_GPIO_Config(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0



	/* 停止信号 FLASH: CS引脚高电平*/
	CSN_ON();
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <CC2520_GPIO_Config+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a03      	ldr	r2, [pc, #12]	; (80002c8 <CC2520_GPIO_Config+0x18>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002be:	60d3      	str	r3, [r2, #12]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40011000 	.word	0x40011000

080002cc <CC2520_IntoActMode_Init>:
{

}

void CC2520_IntoActMode_Init(void)	//在进入act模式时要做初始化
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/*CC2520_WriteReg(0x30,0x32);
	//CC2520_WriteReg(TXPOWER,0xF7);
	CC2520_WriteReg(0x36,0xF8);
	CC2520_WriteRAM(0x00, 0x46, 0x85);
	CC2520_WriteRAM(0x00, 0x47, 0x14);*/
	CC2520_WriteReg(0x30,0xF7);	//TXPOWER
 80002d0:	21f7      	movs	r1, #247	; 0xf7
 80002d2:	2030      	movs	r0, #48	; 0x30
 80002d4:	f000 f908 	bl	80004e8 <CC2520_WriteReg>
	CC2520_WriteReg(0x31,0x94);	//TXCTRL
 80002d8:	2194      	movs	r1, #148	; 0x94
 80002da:	2031      	movs	r0, #49	; 0x31
 80002dc:	f000 f904 	bl	80004e8 <CC2520_WriteReg>
	CC2520_WriteReg(0x36,0xF8);
 80002e0:	21f8      	movs	r1, #248	; 0xf8
 80002e2:	2036      	movs	r0, #54	; 0x36
 80002e4:	f000 f900 	bl	80004e8 <CC2520_WriteReg>
	CC2520_WriteRAM(0x00, 0x46, 0x85);
 80002e8:	2285      	movs	r2, #133	; 0x85
 80002ea:	2146      	movs	r1, #70	; 0x46
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f94b 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x47, 0x14);
 80002f2:	2214      	movs	r2, #20
 80002f4:	2147      	movs	r1, #71	; 0x47
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 f946 	bl	8000588 <CC2520_WriteRAM>

	CC2520_WriteRAM(0x00, 0x4A, 0x3F);//调整接收灵敏度
 80002fc:	223f      	movs	r2, #63	; 0x3f
 80002fe:	214a      	movs	r1, #74	; 0x4a
 8000300:	2000      	movs	r0, #0
 8000302:	f000 f941 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4C, 0x7B);//FSCTRL	调整合成器电流
 8000306:	227b      	movs	r2, #123	; 0x7b
 8000308:	214c      	movs	r1, #76	; 0x4c
 800030a:	2000      	movs	r0, #0
 800030c:	f000 f93c 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4F, 0x2B);
 8000310:	222b      	movs	r2, #43	; 0x2b
 8000312:	214f      	movs	r1, #79	; 0x4f
 8000314:	2000      	movs	r0, #0
 8000316:	f000 f937 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x53, 0x11);
 800031a:	2211      	movs	r2, #17
 800031c:	2153      	movs	r1, #83	; 0x53
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f932 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x56, 0x10);
 8000324:	2210      	movs	r2, #16
 8000326:	2156      	movs	r1, #86	; 0x56
 8000328:	2000      	movs	r0, #0
 800032a:	f000 f92d 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x57, 0x0E);
 800032e:	220e      	movs	r2, #14
 8000330:	2157      	movs	r1, #87	; 0x57
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f928 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x58, 0x03);
 8000338:	2203      	movs	r2, #3
 800033a:	2158      	movs	r1, #88	; 0x58
 800033c:	2000      	movs	r0, #0
 800033e:	f000 f923 	bl	8000588 <CC2520_WriteRAM>

	CC2520_WriteRAM(0x00, 0x4A, 0x3F);
 8000342:	223f      	movs	r2, #63	; 0x3f
 8000344:	214a      	movs	r1, #74	; 0x4a
 8000346:	2000      	movs	r0, #0
 8000348:	f000 f91e 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4C, 0x5A);
 800034c:	225a      	movs	r2, #90	; 0x5a
 800034e:	214c      	movs	r1, #76	; 0x4c
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f919 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4F, 0x2B);
 8000356:	222b      	movs	r2, #43	; 0x2b
 8000358:	214f      	movs	r1, #79	; 0x4f
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f914 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x53, 0x11);
 8000360:	2211      	movs	r2, #17
 8000362:	2153      	movs	r1, #83	; 0x53
 8000364:	2000      	movs	r0, #0
 8000366:	f000 f90f 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x56, 0x10);
 800036a:	2210      	movs	r2, #16
 800036c:	2156      	movs	r1, #86	; 0x56
 800036e:	2000      	movs	r0, #0
 8000370:	f000 f90a 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x57, 0x0E);
 8000374:	220e      	movs	r2, #14
 8000376:	2157      	movs	r1, #87	; 0x57
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f905 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x58, 0x03);
 800037e:	2203      	movs	r2, #3
 8000380:	2158      	movs	r1, #88	; 0x58
 8000382:	2000      	movs	r0, #0
 8000384:	f000 f900 	bl	8000588 <CC2520_WriteRAM>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <CC2520_Init>:
//---------------------------CC2520射频芯片初始化函数--------------------------------------
void CC2520_Init(uchar freq)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]

	POWER_ON_CC2520();		//zigbee电源控制
 8000396:	4b4f      	ldr	r3, [pc, #316]	; (80004d4 <CC2520_Init+0x148>)
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	4a4e      	ldr	r2, [pc, #312]	; (80004d4 <CC2520_Init+0x148>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	60d3      	str	r3, [r2, #12]
	HAL_Delay(30);
 80003a2:	201e      	movs	r0, #30
 80003a4:	f002 fb4e 	bl	8002a44 <HAL_Delay>
	POWER_OFF_CC2520();	//zigbee电源开启
 80003a8:	4b4a      	ldr	r3, [pc, #296]	; (80004d4 <CC2520_Init+0x148>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a49      	ldr	r2, [pc, #292]	; (80004d4 <CC2520_Init+0x148>)
 80003ae:	f023 0310 	bic.w	r3, r3, #16
 80003b2:	60d3      	str	r3, [r2, #12]

	RESET_OFF();
 80003b4:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <CC2520_Init+0x14c>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a47      	ldr	r2, [pc, #284]	; (80004d8 <CC2520_Init+0x14c>)
 80003ba:	f023 0310 	bic.w	r3, r3, #16
 80003be:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);
 80003c0:	200a      	movs	r0, #10
 80003c2:	f002 fb3f 	bl	8002a44 <HAL_Delay>
	RESET_ON();		//zigbee复位
 80003c6:	4b44      	ldr	r3, [pc, #272]	; (80004d8 <CC2520_Init+0x14c>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	4a43      	ldr	r2, [pc, #268]	; (80004d8 <CC2520_Init+0x14c>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f002 fb36 	bl	8002a44 <HAL_Delay>

	CC2520_Command(CMD_SXOSCON);	//zigbee晶振开启
 80003d8:	2040      	movs	r0, #64	; 0x40
 80003da:	f000 f94f 	bl	800067c <CC2520_Command>
	//HAL_Delay(10);

	CC2520_WriteRAM(0x03,RAM_PANID,  CC2520_Source_PANID[0]);
 80003de:	4b3f      	ldr	r3, [pc, #252]	; (80004dc <CC2520_Init+0x150>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	461a      	mov	r2, r3
 80003e4:	21f2      	movs	r1, #242	; 0xf2
 80003e6:	2003      	movs	r0, #3
 80003e8:	f000 f8ce 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03,RAM_PANID+1, CC2520_Source_PANID[1]);	//设置PANID
 80003ec:	4b3b      	ldr	r3, [pc, #236]	; (80004dc <CC2520_Init+0x150>)
 80003ee:	785b      	ldrb	r3, [r3, #1]
 80003f0:	461a      	mov	r2, r3
 80003f2:	21f3      	movs	r1, #243	; 0xf3
 80003f4:	2003      	movs	r0, #3
 80003f6:	f000 f8c7 	bl	8000588 <CC2520_WriteRAM>
	CC2520_ReadRAM(3,RAM_PANID);
 80003fa:	21f2      	movs	r1, #242	; 0xf2
 80003fc:	2003      	movs	r0, #3
 80003fe:	f000 f899 	bl	8000534 <CC2520_ReadRAM>

	CC2520_WriteRAM(0x03, RAM_IEEEADR,CC2520_Source_IEEEAddr[0]);
 8000402:	4b37      	ldr	r3, [pc, #220]	; (80004e0 <CC2520_Init+0x154>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	21ea      	movs	r1, #234	; 0xea
 800040a:	2003      	movs	r0, #3
 800040c:	f000 f8bc 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+1,CC2520_Source_IEEEAddr[1]);
 8000410:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <CC2520_Init+0x154>)
 8000412:	785b      	ldrb	r3, [r3, #1]
 8000414:	461a      	mov	r2, r3
 8000416:	21eb      	movs	r1, #235	; 0xeb
 8000418:	2003      	movs	r0, #3
 800041a:	f000 f8b5 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+2, CC2520_Source_IEEEAddr[2]);
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <CC2520_Init+0x154>)
 8000420:	789b      	ldrb	r3, [r3, #2]
 8000422:	461a      	mov	r2, r3
 8000424:	21ec      	movs	r1, #236	; 0xec
 8000426:	2003      	movs	r0, #3
 8000428:	f000 f8ae 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+3, CC2520_Source_IEEEAddr[3]);
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <CC2520_Init+0x154>)
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	461a      	mov	r2, r3
 8000432:	21ed      	movs	r1, #237	; 0xed
 8000434:	2003      	movs	r0, #3
 8000436:	f000 f8a7 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+4, CC2520_Source_IEEEAddr[4]);
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <CC2520_Init+0x154>)
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	461a      	mov	r2, r3
 8000440:	21ee      	movs	r1, #238	; 0xee
 8000442:	2003      	movs	r0, #3
 8000444:	f000 f8a0 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+5, CC2520_Source_IEEEAddr[5]);
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <CC2520_Init+0x154>)
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	461a      	mov	r2, r3
 800044e:	21ef      	movs	r1, #239	; 0xef
 8000450:	2003      	movs	r0, #3
 8000452:	f000 f899 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+6, CC2520_Source_IEEEAddr[6]);
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <CC2520_Init+0x154>)
 8000458:	799b      	ldrb	r3, [r3, #6]
 800045a:	461a      	mov	r2, r3
 800045c:	21f0      	movs	r1, #240	; 0xf0
 800045e:	2003      	movs	r0, #3
 8000460:	f000 f892 	bl	8000588 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+7, CC2520_Source_IEEEAddr[7]);	//设置IEEEADR
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <CC2520_Init+0x154>)
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	461a      	mov	r2, r3
 800046a:	21f1      	movs	r1, #241	; 0xf1
 800046c:	2003      	movs	r0, #3
 800046e:	f000 f88b 	bl	8000588 <CC2520_WriteRAM>
	CC2520_ReadRAM(3,RAM_IEEEADR);
 8000472:	21ea      	movs	r1, #234	; 0xea
 8000474:	2003      	movs	r0, #3
 8000476:	f000 f85d 	bl	8000534 <CC2520_ReadRAM>


	CC2520_WriteReg(FRMFILT0,0x0D);
 800047a:	210d      	movs	r1, #13
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f833 	bl	80004e8 <CC2520_WriteReg>
	CC2520_WriteReg(GPIOCTRL0,0x2A);
 8000482:	212a      	movs	r1, #42	; 0x2a
 8000484:	2020      	movs	r0, #32
 8000486:	f000 f82f 	bl	80004e8 <CC2520_WriteReg>
	CC2520_WriteReg(GPIOCTRL1,0x27);
 800048a:	2127      	movs	r1, #39	; 0x27
 800048c:	2021      	movs	r0, #33	; 0x21
 800048e:	f000 f82b 	bl	80004e8 <CC2520_WriteReg>
	CC2520_WriteReg(GPIOCTRL,0x3F);	//使能上拉20K
 8000492:	213f      	movs	r1, #63	; 0x3f
 8000494:	2028      	movs	r0, #40	; 0x28
 8000496:	f000 f827 	bl	80004e8 <CC2520_WriteReg>
	//CC2520_WriteReg(FREQCTRL,0x0B);	//设置频段，2407M，
	//if (freq>63)	freq=0;

	//CC2520_WriteReg(FREQCTRL, FreqTable[freq]);

	CC2520_WriteReg(FREQCTRL, freq);		//设置频率
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4619      	mov	r1, r3
 800049e:	202e      	movs	r0, #46	; 0x2e
 80004a0:	f000 f822 	bl	80004e8 <CC2520_WriteReg>

	CC2520_WorkFreqIndex = freq;
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <CC2520_Init+0x158>)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	7013      	strb	r3, [r2, #0]

	CC2520_WriteReg(FSMCTRL,0);	//no timeout  有限元状态机
 80004aa:	2100      	movs	r1, #0
 80004ac:	2035      	movs	r0, #53	; 0x35
 80004ae:	f000 f81b 	bl	80004e8 <CC2520_WriteReg>

	CC2520_Command(CMD_SFLUSHRX);	//清除RX缓存
 80004b2:	2047      	movs	r0, #71	; 0x47
 80004b4:	f000 f8e2 	bl	800067c <CC2520_Command>
	CC2520_Command(CMD_SFLUSHTX);	//清除TX缓存
 80004b8:	2048      	movs	r0, #72	; 0x48
 80004ba:	f000 f8df 	bl	800067c <CC2520_Command>

	CC2520_IntoActMode_Init();
 80004be:	f7ff ff05 	bl	80002cc <CC2520_IntoActMode_Init>

	HAL_Delay(10);
 80004c2:	200a      	movs	r0, #10
 80004c4:	f002 fabe 	bl	8002a44 <HAL_Delay>
	CC2520_SetRxMode();
 80004c8:	f000 f8f4 	bl	80006b4 <CC2520_SetRxMode>


}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000004 	.word	0x20000004
 80004e4:	20000559 	.word	0x20000559

080004e8 <CC2520_WriteReg>:
	CSN_ON();
	return value;
}
//---------------------------CC2520寄存器写入函数--------------------------------------
void  CC2520_WriteReg(uint8  addr, uint8 value)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	CSN_OFF();
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <CC2520_WriteReg+0x48>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <CC2520_WriteReg+0x48>)
 80004fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000502:	60d3      	str	r3, [r2, #12]
	SPI_Write(addr|REG_WRITE);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f9f7 	bl	8000900 <SPI_Write>
	SPI_Write(value);
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f9f3 	bl	8000900 <SPI_Write>
	CSN_ON();
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <CC2520_WriteReg+0x48>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	4a04      	ldr	r2, [pc, #16]	; (8000530 <CC2520_WriteReg+0x48>)
 8000520:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000524:	60d3      	str	r3, [r2, #12]
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40011000 	.word	0x40011000

08000534 <CC2520_ReadRAM>:
//---------------------------CC2520 RAM 读取函数--------------------------------------
uint8 CC2520_ReadRAM(uint8 addrH,uint8 addrL)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	uint8 value;
	CSN_OFF();
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <CC2520_ReadRAM+0x50>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <CC2520_ReadRAM+0x50>)
 800054a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800054e:	60d3      	str	r3, [r2, #12]
	SPI_Write(addrH|MEM_READ);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f9d1 	bl	8000900 <SPI_Write>
	SPI_Write(addrL);
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f9cd 	bl	8000900 <SPI_Write>
	value = SPI_Read();
 8000566:	f000 f963 	bl	8000830 <SPI_Read>
 800056a:	4603      	mov	r3, r0
 800056c:	73fb      	strb	r3, [r7, #15]
	CSN_ON();
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <CC2520_ReadRAM+0x50>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4a04      	ldr	r2, [pc, #16]	; (8000584 <CC2520_ReadRAM+0x50>)
 8000574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000578:	60d3      	str	r3, [r2, #12]
	return value;
 800057a:	7bfb      	ldrb	r3, [r7, #15]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40011000 	.word	0x40011000

08000588 <CC2520_WriteRAM>:
//---------------------------CC2520 RAM 写入函数--------------------------------------
void CC2520_WriteRAM(uint8 addrH,uint8 addrL, uint8 value)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
 8000592:	460b      	mov	r3, r1
 8000594:	71bb      	strb	r3, [r7, #6]
 8000596:	4613      	mov	r3, r2
 8000598:	717b      	strb	r3, [r7, #5]
	CSN_OFF();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <CC2520_WriteRAM+0x50>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <CC2520_WriteRAM+0x50>)
 80005a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005a4:	60d3      	str	r3, [r2, #12]
	SPI_Write(addrH|MEM_WRITE);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9a6 	bl	8000900 <SPI_Write>
	SPI_Write(addrL);
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f9a2 	bl	8000900 <SPI_Write>
	SPI_Write(value);
 80005bc:	797b      	ldrb	r3, [r7, #5]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f99e 	bl	8000900 <SPI_Write>
	CSN_ON();
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <CC2520_WriteRAM+0x50>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <CC2520_WriteRAM+0x50>)
 80005ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40011000 	.word	0x40011000

080005dc <CC2520_WriteTXFIFO>:


//---------------------------CC2520 TXFIFIO 写入函数--------------------------------------
void  CC2520_WriteTXFIFO(uchar txd_len)//3.5ms@len=16
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	uint8 i;

	CC2520_Command(CMD_SFLUSHTX);//80us
 80005e6:	2048      	movs	r0, #72	; 0x48
 80005e8:	f000 f848 	bl	800067c <CC2520_Command>

	CSN_OFF();
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <CC2520_WriteTXFIFO+0x94>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <CC2520_WriteTXFIFO+0x94>)
 80005f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005f6:	60d3      	str	r3, [r2, #12]

	SPI_Write(TXFIFO_WRITE); //80us
 80005f8:	203a      	movs	r0, #58	; 0x3a
 80005fa:	f000 f981 	bl	8000900 <SPI_Write>


	SPI_Write(23+txd_len+2);//80us
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	3319      	adds	r3, #25
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f97b 	bl	8000900 <SPI_Write>


	for(i=1;i<24;i++)
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e008      	b.n	8000622 <CC2520_WriteTXFIFO+0x46>
	{
		SPI_Write(CC2520_PackHead[i]);//1.9ms@len=16
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <CC2520_WriteTXFIFO+0x98>)
 8000614:	5cd3      	ldrb	r3, [r2, r3]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f972 	bl	8000900 <SPI_Write>
	for(i=1;i<24;i++)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	3301      	adds	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	2b17      	cmp	r3, #23
 8000626:	d9f3      	bls.n	8000610 <CC2520_WriteTXFIFO+0x34>
	}

	for(i=0;i<txd_len;i++)
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e008      	b.n	8000640 <CC2520_WriteTXFIFO+0x64>
	{
		SPI_Write(CC2520_PSDU[i]);//1.3ms@len=16
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	4a11      	ldr	r2, [pc, #68]	; (8000678 <CC2520_WriteTXFIFO+0x9c>)
 8000632:	5cd3      	ldrb	r3, [r2, r3]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f963 	bl	8000900 <SPI_Write>
	for(i=0;i<txd_len;i++)
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	3301      	adds	r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	7bfa      	ldrb	r2, [r7, #15]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3f2      	bcc.n	800062e <CC2520_WriteTXFIFO+0x52>
	}

	SPI_Write(0x55);//80us
 8000648:	2055      	movs	r0, #85	; 0x55
 800064a:	f000 f959 	bl	8000900 <SPI_Write>
	SPI_Write(0xaa);//80us
 800064e:	20aa      	movs	r0, #170	; 0xaa
 8000650:	f000 f956 	bl	8000900 <SPI_Write>
	CSN_ON();
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <CC2520_WriteTXFIFO+0x94>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <CC2520_WriteTXFIFO+0x94>)
 800065a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065e:	60d3      	str	r3, [r2, #12]

	delay_us1(40);;//32us
 8000660:	2028      	movs	r0, #40	; 0x28
 8000662:	f000 fdab 	bl	80011bc <delay_us1>

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40011000 	.word	0x40011000
 8000674:	08004ddc 	.word	0x08004ddc
 8000678:	20000560 	.word	0x20000560

0800067c <CC2520_Command>:

//---------------------------CC2520命令函数--------------------------------------
void  CC2520_Command(uint8 cmd)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	CSN_OFF();   //NRF_CS=0	片选有效
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <CC2520_Command+0x34>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <CC2520_Command+0x34>)
 800068c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000690:	60d3      	str	r3, [r2, #12]
	SPI_Write(cmd);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f933 	bl	8000900 <SPI_Write>
	CSN_ON();    //NRF_CS=1
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <CC2520_Command+0x34>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <CC2520_Command+0x34>)
 80006a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006a4:	60d3      	str	r3, [r2, #12]
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40011000 	.word	0x40011000

080006b4 <CC2520_SetRxMode>:

//---------------------------CC2520 设置接收函数--------------------------------------
void CC2520_SetRxMode(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	//CC2520_Command(CMD_SRFOFF);
	CC2520_Command(CMD_SRXON);
 80006b8:	2042      	movs	r0, #66	; 0x42
 80006ba:	f7ff ffdf 	bl	800067c <CC2520_Command>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <CC2520_RxPacket>:
//---------------------------CC2520 判断接收函数--------------------------------------
uint8 CC2520_RxPacket(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	uchar	ok=0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]

    if((HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin)==0)&&(HAL_GPIO_ReadPin(CC2520_GP1_GPIO_GPIO_Port,CC2520_GP1_GPIO_Pin)!=0))
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	4822      	ldr	r0, [pc, #136]	; (800075c <CC2520_RxPacket+0x98>)
 80006d4:	f002 fd74 	bl	80031c0 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d109      	bne.n	80006f2 <CC2520_RxPacket+0x2e>
 80006de:	2101      	movs	r1, #1
 80006e0:	481f      	ldr	r0, [pc, #124]	; (8000760 <CC2520_RxPacket+0x9c>)
 80006e2:	f002 fd6d 	bl	80031c0 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <CC2520_RxPacket+0x2e>
		ok++;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3301      	adds	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
    if((HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin)==0)&&(HAL_GPIO_ReadPin(CC2520_GP1_GPIO_GPIO_Port,CC2520_GP1_GPIO_Pin)!=0))
 80006f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f6:	4819      	ldr	r0, [pc, #100]	; (800075c <CC2520_RxPacket+0x98>)
 80006f8:	f002 fd62 	bl	80031c0 <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d109      	bne.n	8000716 <CC2520_RxPacket+0x52>
 8000702:	2101      	movs	r1, #1
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <CC2520_RxPacket+0x9c>)
 8000706:	f002 fd5b 	bl	80031c0 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <CC2520_RxPacket+0x52>
		ok++;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3301      	adds	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
    if((HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin)==0)&&(HAL_GPIO_ReadPin(CC2520_GP1_GPIO_GPIO_Port,CC2520_GP1_GPIO_Pin)!=0))
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <CC2520_RxPacket+0x98>)
 800071c:	f002 fd50 	bl	80031c0 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d109      	bne.n	800073a <CC2520_RxPacket+0x76>
 8000726:	2101      	movs	r1, #1
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <CC2520_RxPacket+0x9c>)
 800072a:	f002 fd49 	bl	80031c0 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <CC2520_RxPacket+0x76>
   	 	ok++;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	3301      	adds	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
    if (ok>1)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d907      	bls.n	8000750 <CC2520_RxPacket+0x8c>
	{
		//HAL_Delay(1);
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <CC2520_RxPacket+0xa0>)
 8000748:	f002 fd51 	bl	80031ee <HAL_GPIO_WritePin>

		return TRUE;
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <CC2520_RxPacket+0x8e>
	}
    else
    {
    	//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
    	return FALSE;
 8000750:	2300      	movs	r3, #0

    }

}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40011000 	.word	0x40011000
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40010800 	.word	0x40010800

08000768 <CC2520_TxPacket>:


//---------------------------CC2520 发送函数--------------------------------------
void CC2520_TxPacket(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
	uint32	i=0;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
	uchar	hig_cnt;
	//CC2520_Command(CMD_SRFOFF);
	CC2520_Command(CMD_STXON);
 8000772:	2043      	movs	r0, #67	; 0x43
 8000774:	f7ff ff82 	bl	800067c <CC2520_Command>
	HAL_Delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f002 f963 	bl	8002a44 <HAL_Delay>
	//for (i=0; i<2500;i++);
	for (i=0; i<200;i++)
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	e028      	b.n	80007d6 <CC2520_TxPacket+0x6e>
	{
		hig_cnt = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	70fb      	strb	r3, [r7, #3]
		if (HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin))
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	481b      	ldr	r0, [pc, #108]	; (80007fc <CC2520_TxPacket+0x94>)
 800078e:	f002 fd17 	bl	80031c0 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <CC2520_TxPacket+0x36>
			hig_cnt++;
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	3301      	adds	r3, #1
 800079c:	70fb      	strb	r3, [r7, #3]
		if (HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin))
 800079e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <CC2520_TxPacket+0x94>)
 80007a4:	f002 fd0c 	bl	80031c0 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <CC2520_TxPacket+0x4c>
			hig_cnt++;
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	3301      	adds	r3, #1
 80007b2:	70fb      	strb	r3, [r7, #3]
		if (HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin))
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <CC2520_TxPacket+0x94>)
 80007ba:	f002 fd01 	bl	80031c0 <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <CC2520_TxPacket+0x62>
			hig_cnt++;
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	3301      	adds	r3, #1
 80007c8:	70fb      	strb	r3, [r7, #3]
		if (hig_cnt>1)	break;
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d806      	bhi.n	80007de <CC2520_TxPacket+0x76>
	for (i=0; i<200;i++)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2bc7      	cmp	r3, #199	; 0xc7
 80007da:	d9d3      	bls.n	8000784 <CC2520_TxPacket+0x1c>
 80007dc:	e000      	b.n	80007e0 <CC2520_TxPacket+0x78>
		if (hig_cnt>1)	break;
 80007de:	bf00      	nop
	}
	if (i==200)	RF_BadCycCnt++;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2bc8      	cmp	r3, #200	; 0xc8
 80007e4:	d105      	bne.n	80007f2 <CC2520_TxPacket+0x8a>
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <CC2520_TxPacket+0x98>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <CC2520_TxPacket+0x98>)
 80007f0:	701a      	strb	r2, [r3, #0]
	//else
		//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40011000 	.word	0x40011000
 8000800:	2000005d 	.word	0x2000005d

08000804 <CC2520_SPI_Init>:

//--------------------------SPI初始化函数---------------------------
void CC2520_SPI_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	SCLK_OFF();
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <CC2520_SPI_Init+0x24>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <CC2520_SPI_Init+0x24>)
 800080e:	f023 0320 	bic.w	r3, r3, #32
 8000812:	60d3      	str	r3, [r2, #12]
	CSN_ON();
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <CC2520_SPI_Init+0x28>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <CC2520_SPI_Init+0x28>)
 800081a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40010800 	.word	0x40010800
 800082c:	40011000 	.word	0x40011000

08000830 <SPI_Read>:
//--------------------------SPI单字节读取函数---------------------------
uint8 SPI_Read(void)//30us
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	uint8 i,rxdata, hig_cnt;
	rxdata = 0x00;
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]

	//SET_CC2520_GP0_Input();
	//SET_CC2520_GP1_Input();

	for (i = 0;i < 8;i++)
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e055      	b.n	80008ec <SPI_Read+0xbc>
	{
		rxdata = rxdata<<1;
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	71bb      	strb	r3, [r7, #6]
		SCLK_ON();
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <SPI_Read+0xcc>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <SPI_Read+0xcc>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	60d3      	str	r3, [r2, #12]
		delay_init(72);
 8000852:	2048      	movs	r0, #72	; 0x48
 8000854:	f000 fca0 	bl	8001198 <delay_init>
		delay_init(72);
 8000858:	2048      	movs	r0, #72	; 0x48
 800085a:	f000 fc9d 	bl	8001198 <delay_init>
		delay_init(72);
 800085e:	2048      	movs	r0, #72	; 0x48
 8000860:	f000 fc9a 	bl	8001198 <delay_init>
		delay_init(72);
 8000864:	2048      	movs	r0, #72	; 0x48
 8000866:	f000 fc97 	bl	8001198 <delay_init>
		hig_cnt = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	717b      	strb	r3, [r7, #5]

		if (MISO_IN())	hig_cnt++;
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <SPI_Read+0xcc>)
 8000872:	f002 fca5 	bl	80031c0 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <SPI_Read+0x52>
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	3301      	adds	r3, #1
 8000880:	717b      	strb	r3, [r7, #5]
		if (MISO_IN())	hig_cnt++;
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	481d      	ldr	r0, [pc, #116]	; (80008fc <SPI_Read+0xcc>)
 8000886:	f002 fc9b 	bl	80031c0 <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <SPI_Read+0x66>
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	3301      	adds	r3, #1
 8000894:	717b      	strb	r3, [r7, #5]
		if (MISO_IN())	hig_cnt++;
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <SPI_Read+0xcc>)
 800089a:	f002 fc91 	bl	80031c0 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <SPI_Read+0x7a>
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	3301      	adds	r3, #1
 80008a8:	717b      	strb	r3, [r7, #5]
		if (hig_cnt>1)
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d904      	bls.n	80008ba <SPI_Read+0x8a>
        {
			rxdata |= 0x01;
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	71bb      	strb	r3, [r7, #6]
 80008b8:	e003      	b.n	80008c2 <SPI_Read+0x92>
		}
		else
		{
			rxdata &= ~0x01;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	71bb      	strb	r3, [r7, #6]
		}
		SCLK_OFF();
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <SPI_Read+0xcc>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <SPI_Read+0xcc>)
 80008c8:	f023 0320 	bic.w	r3, r3, #32
 80008cc:	60d3      	str	r3, [r2, #12]
		delay_init(72);
 80008ce:	2048      	movs	r0, #72	; 0x48
 80008d0:	f000 fc62 	bl	8001198 <delay_init>
		delay_init(72);
 80008d4:	2048      	movs	r0, #72	; 0x48
 80008d6:	f000 fc5f 	bl	8001198 <delay_init>
		delay_init(72);
 80008da:	2048      	movs	r0, #72	; 0x48
 80008dc:	f000 fc5c 	bl	8001198 <delay_init>
		delay_init(72);
 80008e0:	2048      	movs	r0, #72	; 0x48
 80008e2:	f000 fc59 	bl	8001198 <delay_init>
	for (i = 0;i < 8;i++)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	3301      	adds	r3, #1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d9a6      	bls.n	8000840 <SPI_Read+0x10>
	 }

	 return rxdata;
 80008f2:	79bb      	ldrb	r3, [r7, #6]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010800 	.word	0x40010800

08000900 <SPI_Write>:
//----------------------------SPI单字节写入函数---------------------------
void SPI_Write(uint8 txdata)  //SPI=100kHz
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	uint8 i;

	for (i = 0;i < 8;i++)
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e03a      	b.n	8000986 <SPI_Write+0x86>
	{
		if (txdata&0x80)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	da06      	bge.n	8000926 <SPI_Write+0x26>
		{
			MOSI_ON();
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <SPI_Write+0x94>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <SPI_Write+0x94>)
 800091e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000922:	60d3      	str	r3, [r2, #12]
 8000924:	e005      	b.n	8000932 <SPI_Write+0x32>
		}
		else
		{
			MOSI_OFF();
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <SPI_Write+0x94>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <SPI_Write+0x94>)
 800092c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000930:	60d3      	str	r3, [r2, #12]
		}
		SCLK_ON();
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <SPI_Write+0x94>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <SPI_Write+0x94>)
 8000938:	f043 0320 	orr.w	r3, r3, #32
 800093c:	60d3      	str	r3, [r2, #12]
		delay_init(72);
 800093e:	2048      	movs	r0, #72	; 0x48
 8000940:	f000 fc2a 	bl	8001198 <delay_init>
		delay_init(72);
 8000944:	2048      	movs	r0, #72	; 0x48
 8000946:	f000 fc27 	bl	8001198 <delay_init>
		delay_init(72);
 800094a:	2048      	movs	r0, #72	; 0x48
 800094c:	f000 fc24 	bl	8001198 <delay_init>
		delay_init(72);
 8000950:	2048      	movs	r0, #72	; 0x48
 8000952:	f000 fc21 	bl	8001198 <delay_init>
		//delay_init(10);
		//delay_us1(1);//延时4.7us
		txdata = txdata<<1;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
		SCLK_OFF();
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <SPI_Write+0x94>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <SPI_Write+0x94>)
 8000962:	f023 0320 	bic.w	r3, r3, #32
 8000966:	60d3      	str	r3, [r2, #12]
		delay_init(72);
 8000968:	2048      	movs	r0, #72	; 0x48
 800096a:	f000 fc15 	bl	8001198 <delay_init>
		delay_init(72);
 800096e:	2048      	movs	r0, #72	; 0x48
 8000970:	f000 fc12 	bl	8001198 <delay_init>
		delay_init(72);
 8000974:	2048      	movs	r0, #72	; 0x48
 8000976:	f000 fc0f 	bl	8001198 <delay_init>
		delay_init(72);
 800097a:	2048      	movs	r0, #72	; 0x48
 800097c:	f000 fc0c 	bl	8001198 <delay_init>
	for (i = 0;i < 8;i++)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d9c1      	bls.n	8000910 <SPI_Write+0x10>
		//delay_us1(1);//延时4.7us
	}
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010800 	.word	0x40010800

08000998 <CC2520_Search>:
	 return rxdata;
}


void CC2520_Search(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	uchar time_search_set;
	uchar i,j;
	for(i=0;i<12;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e013      	b.n	80009cc <CC2520_Search+0x34>
	{
		for(j=0;j<16;j++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	71bb      	strb	r3, [r7, #6]
 80009a8:	e00a      	b.n	80009c0 <CC2520_Search+0x28>
			cc2520_rx[i][j]=0;
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	4918      	ldr	r1, [pc, #96]	; (8000a10 <CC2520_Search+0x78>)
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	440a      	add	r2, r1
 80009b4:	4413      	add	r3, r2
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		for(j=0;j<16;j++)
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	3301      	adds	r3, #1
 80009be:	71bb      	strb	r3, [r7, #6]
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d9f1      	bls.n	80009aa <CC2520_Search+0x12>
	for(i=0;i<12;i++)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3301      	adds	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b0b      	cmp	r3, #11
 80009d0:	d9e8      	bls.n	80009a4 <CC2520_Search+0xc>
	}


	time_search_set=60;
 80009d2:	233c      	movs	r3, #60	; 0x3c
 80009d4:	717b      	strb	r3, [r7, #5]
	while(time_display<time_search_set)
 80009d6:	e006      	b.n	80009e6 <CC2520_Search+0x4e>
			{
				fre_set_change=0;
			}
		}
		*/
		CC2520_Init(fre_set_change);
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <CC2520_Search+0x7c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fcd5 	bl	800038c <CC2520_Init>
		CC2520_IntoActMode_Init();
 80009e2:	f7ff fc73 	bl	80002cc <CC2520_IntoActMode_Init>
	while(time_display<time_search_set)
 80009e6:	797a      	ldrb	r2, [r7, #5]
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <CC2520_Search+0x80>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f3      	bhi.n	80009d8 <CC2520_Search+0x40>

	}



	CC2520_Init(fre_set);
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <CC2520_Search+0x84>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fcc9 	bl	800038c <CC2520_Init>
	CC2520_IntoActMode_Init();
 80009fa:	f7ff fc67 	bl	80002cc <CC2520_IntoActMode_Init>
	CC2520_SetRxMode();		//设置为接收模式
 80009fe:	f7ff fe59 	bl	80006b4 <CC2520_SetRxMode>
	time_display=0;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <CC2520_Search+0x80>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]


}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000490 	.word	0x20000490
 8000a14:	20000274 	.word	0x20000274
 8000a18:	2000055c 	.word	0x2000055c
 8000a1c:	2000048d 	.word	0x2000048d

08000a20 <CC2520_ReadRXFIFO>:
//---------------------------CC2520 RXFIFIO 读取函数--------------------------------------

void CC2520_ReadRXFIFO(void)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
	uint8 i;
	CSN_OFF();
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <CC2520_ReadRXFIFO+0x74>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <CC2520_ReadRXFIFO+0x74>)
 8000a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a30:	60d3      	str	r3, [r2, #12]
	SPI_Write(RXFIFO_READ);
 8000a32:	2030      	movs	r0, #48	; 0x30
 8000a34:	f7ff ff64 	bl	8000900 <SPI_Write>
	CC2520_PSDU[0] = SPI_Read(); //CC2520_PSDU[0]表示收到的数据包长度，实测值为41
 8000a38:	f7ff fefa 	bl	8000830 <SPI_Read>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <CC2520_ReadRXFIFO+0x78>)
 8000a42:	701a      	strb	r2, [r3, #0]
	if (CC2520_PSDU[0]>127)
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <CC2520_ReadRXFIFO+0x78>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da02      	bge.n	8000a54 <CC2520_ReadRXFIFO+0x34>
		CC2520_PSDU[0]=127;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <CC2520_ReadRXFIFO+0x78>)
 8000a50:	227f      	movs	r2, #127	; 0x7f
 8000a52:	701a      	strb	r2, [r3, #0]
	for(i=0;i<CC2520_PSDU[0];i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e00a      	b.n	8000a70 <CC2520_ReadRXFIFO+0x50>
	{
		CC2520_PSDU[1+i] = SPI_Read();
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	1c5c      	adds	r4, r3, #1
 8000a5e:	f7ff fee7 	bl	8000830 <SPI_Read>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <CC2520_ReadRXFIFO+0x78>)
 8000a68:	551a      	strb	r2, [r3, r4]
	for(i=0;i<CC2520_PSDU[0];i++)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <CC2520_ReadRXFIFO+0x78>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3ef      	bcc.n	8000a5a <CC2520_ReadRXFIFO+0x3a>
	}
	CSN_ON();
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <CC2520_ReadRXFIFO+0x74>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <CC2520_ReadRXFIFO+0x74>)
 8000a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a84:	60d3      	str	r3, [r2, #12]
	CC2520_Command(CMD_SFLUSHRX);
 8000a86:	2047      	movs	r0, #71	; 0x47
 8000a88:	f7ff fdf8 	bl	800067c <CC2520_Command>
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	40011000 	.word	0x40011000
 8000a98:	20000560 	.word	0x20000560

08000a9c <cc2520_data_load>:

void cc2520_data_load()		//数据判断装载  是本机配对senser接收   非本机的丢弃
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	uchar i;
	if((CC2520_PSDU[24]==0x14)||(CC2520_PSDU[24]==0x15))  //收到确认
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <cc2520_data_load+0xa0>)
 8000aa4:	7e1b      	ldrb	r3, [r3, #24]
 8000aa6:	2b14      	cmp	r3, #20
 8000aa8:	d003      	beq.n	8000ab2 <cc2520_data_load+0x16>
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <cc2520_data_load+0xa0>)
 8000aac:	7e1b      	ldrb	r3, [r3, #24]
 8000aae:	2b15      	cmp	r3, #21
 8000ab0:	d12d      	bne.n	8000b0e <cc2520_data_load+0x72>
	//if((CC2520_PSDU[01]==0x01)||(CC2520_PSDU[28]==ID_ARM_UP_A[0])||(CC2520_PSDU[27]==ID_ARM_UP_A[0])||(CC2520_PSDU[29]==0x03)||(CC2520_PSDU[29]==ID_ARM_UP_A[0]))
	{
		delay_us1(4);
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f000 fb82 	bl	80011bc <delay_us1>
		if((CC2520_PSDU[24]==0x15))
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <cc2520_data_load+0xa0>)
 8000aba:	7e1b      	ldrb	r3, [r3, #24]
 8000abc:	2b15      	cmp	r3, #21
 8000abe:	d102      	bne.n	8000ac6 <cc2520_data_load+0x2a>
		{
			time_hand_ctrl=0;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <cc2520_data_load+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000acc:	481d      	ldr	r0, [pc, #116]	; (8000b44 <cc2520_data_load+0xa8>)
 8000ace:	f002 fb8e 	bl	80031ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad8:	481a      	ldr	r0, [pc, #104]	; (8000b44 <cc2520_data_load+0xa8>)
 8000ada:	f002 fb88 	bl	80031ee <HAL_GPIO_WritePin>
		for(i=24;i<CC2520_PSDU[0]-1 ;i++)
 8000ade:	2318      	movs	r3, #24
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	e009      	b.n	8000af8 <cc2520_data_load+0x5c>
		{
			cc2520_rx[0][i-24]=CC2520_PSDU[i];
 8000ae4:	79fa      	ldrb	r2, [r7, #7]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	3b18      	subs	r3, #24
 8000aea:	4914      	ldr	r1, [pc, #80]	; (8000b3c <cc2520_data_load+0xa0>)
 8000aec:	5c89      	ldrb	r1, [r1, r2]
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <cc2520_data_load+0xac>)
 8000af0:	54d1      	strb	r1, [r2, r3]
		for(i=24;i<CC2520_PSDU[0]-1 ;i++)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	3301      	adds	r3, #1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <cc2520_data_load+0xa0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbef      	blt.n	8000ae4 <cc2520_data_load+0x48>
		}
		host_ack(ID_ARM_UP_A, 12100);
 8000b04:	f642 7144 	movw	r1, #12100	; 0x2f44
 8000b08:	4810      	ldr	r0, [pc, #64]	; (8000b4c <cc2520_data_load+0xb0>)
 8000b0a:	f000 f821 	bl	8000b50 <host_ack>
		PIE1=0X30;
		TXEN1=1;
		*/
	}

	CC2520_PSDU[29]=0; CC2520_PSDU[28]=0; CC2520_PSDU[27]=0;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <cc2520_data_load+0xa0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	775a      	strb	r2, [r3, #29]
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <cc2520_data_load+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	771a      	strb	r2, [r3, #28]
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <cc2520_data_load+0xa0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	76da      	strb	r2, [r3, #27]
	CC2520_PSDU[26]=0; CC2520_PSDU[25]=0; CC2520_PSDU[24]=0;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <cc2520_data_load+0xa0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	769a      	strb	r2, [r3, #26]
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <cc2520_data_load+0xa0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	765a      	strb	r2, [r3, #25]
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <cc2520_data_load+0xa0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000560 	.word	0x20000560
 8000b40:	20000044 	.word	0x20000044
 8000b44:	40010800 	.word	0x40010800
 8000b48:	20000490 	.word	0x20000490
 8000b4c:	2000000c 	.word	0x2000000c

08000b50 <host_ack>:
	;
}


void host_ack(uchar *dp, uint time_set)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	CC2520_PSDU[0]=*(dp+5);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	795a      	ldrb	r2, [r3, #5]
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <host_ack+0x9c>)
 8000b60:	701a      	strb	r2, [r3, #0]
	CC2520_PSDU[1]=*(dp+4);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791a      	ldrb	r2, [r3, #4]
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <host_ack+0x9c>)
 8000b68:	705a      	strb	r2, [r3, #1]
	CC2520_PSDU[2]=*(dp+3);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	78da      	ldrb	r2, [r3, #3]
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <host_ack+0x9c>)
 8000b70:	709a      	strb	r2, [r3, #2]
	CC2520_PSDU[3]=*(dp+2);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	789a      	ldrb	r2, [r3, #2]
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <host_ack+0x9c>)
 8000b78:	70da      	strb	r2, [r3, #3]
	CC2520_PSDU[4]=*(dp+1);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	785a      	ldrb	r2, [r3, #1]
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <host_ack+0x9c>)
 8000b80:	711a      	strb	r2, [r3, #4]
	CC2520_PSDU[5]=*(dp+0);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <host_ack+0x9c>)
 8000b88:	715a      	strb	r2, [r3, #5]

	CC2520_PSDU[6]=0x01;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <host_ack+0x9c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	719a      	strb	r2, [r3, #6]
	CC2520_PSDU[7]=0X04;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <host_ack+0x9c>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	71da      	strb	r2, [r3, #7]
	CC2520_PSDU[8]=time_set>>8;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <host_ack+0x9c>)
 8000b9e:	721a      	strb	r2, [r3, #8]
	CC2520_PSDU[9]=time_set;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <host_ack+0x9c>)
 8000ba6:	725a      	strb	r2, [r3, #9]
	CC2520_PSDU[10]=0xff;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <host_ack+0x9c>)
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	729a      	strb	r2, [r3, #10]
	CC2520_PSDU[11]=0xff;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <host_ack+0x9c>)
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	72da      	strb	r2, [r3, #11]

	ptr=CC2520_PSDU;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <host_ack+0xa0>)
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <host_ack+0x9c>)
 8000bb8:	601a      	str	r2, [r3, #0]
	crc_check(ptr,12);
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <host_ack+0xa0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb2f 	bl	8000224 <crc_check>
	CC2520_PSDU[12]=CRC_LOW;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <host_ack+0xa4>)
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <host_ack+0x9c>)
 8000bcc:	731a      	strb	r2, [r3, #12]
	CC2520_PSDU[13]=CRC_HIG;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <host_ack+0xa8>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <host_ack+0x9c>)
 8000bd4:	735a      	strb	r2, [r3, #13]
	CC2520_WriteTXFIFO(14);
 8000bd6:	200e      	movs	r0, #14
 8000bd8:	f7ff fd00 	bl	80005dc <CC2520_WriteTXFIFO>
	CC2520_TxPacket();
 8000bdc:	f7ff fdc4 	bl	8000768 <CC2520_TxPacket>
	CC2520_SetRxMode();		//设置为接收模式
 8000be0:	f7ff fd68 	bl	80006b4 <CC2520_SetRxMode>

}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000560 	.word	0x20000560
 8000bf0:	2000016c 	.word	0x2000016c
 8000bf4:	20000558 	.word	0x20000558
 8000bf8:	2000027e 	.word	0x2000027e

08000bfc <LCD_DA>:
#define purple 0xa1d6	 	//定义紫色
#define brown  0x8200	 //定义棕色
#define gray   0x8410	 	//定义灰色

void LCD_DA(u8 da)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	if((da & (1<<0))==(1<<0))
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <LCD_DA+0x22>
		 SET_D0;
 8000c10:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <LCD_DA+0x134>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <LCD_DA+0x134>)
 8000c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c1a:	60d3      	str	r3, [r2, #12]
 8000c1c:	e005      	b.n	8000c2a <LCD_DA+0x2e>
	else
		 CLR_D0;
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <LCD_DA+0x134>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	4a43      	ldr	r2, [pc, #268]	; (8000d30 <LCD_DA+0x134>)
 8000c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c28:	60d3      	str	r3, [r2, #12]
	if((da & (1<<1))==(1<<1))
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <LCD_DA+0x46>
		 SET_D1;
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <LCD_DA+0x134>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a3d      	ldr	r2, [pc, #244]	; (8000d30 <LCD_DA+0x134>)
 8000c3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c3e:	60d3      	str	r3, [r2, #12]
 8000c40:	e005      	b.n	8000c4e <LCD_DA+0x52>
	else
		 CLR_D1;
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <LCD_DA+0x134>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	4a3a      	ldr	r2, [pc, #232]	; (8000d30 <LCD_DA+0x134>)
 8000c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c4c:	60d3      	str	r3, [r2, #12]
	if((da & (1<<2))==(1<<2))
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <LCD_DA+0x6a>
		 SET_D2;
 8000c58:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <LCD_DA+0x134>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <LCD_DA+0x134>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	60d3      	str	r3, [r2, #12]
 8000c64:	e005      	b.n	8000c72 <LCD_DA+0x76>
	else
		 CLR_D2;
 8000c66:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <LCD_DA+0x134>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <LCD_DA+0x134>)
 8000c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c70:	60d3      	str	r3, [r2, #12]
	if((da & (1<<3))==(1<<3))
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_DA+0x8e>
		 SET_D3;
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <LCD_DA+0x134>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4a2b      	ldr	r2, [pc, #172]	; (8000d30 <LCD_DA+0x134>)
 8000c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c86:	60d3      	str	r3, [r2, #12]
 8000c88:	e005      	b.n	8000c96 <LCD_DA+0x9a>
	else
		 CLR_D3;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <LCD_DA+0x134>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <LCD_DA+0x134>)
 8000c90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c94:	60d3      	str	r3, [r2, #12]
	if((da & (1<<4))==(1<<4))
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <LCD_DA+0xb2>
		 SET_D4;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <LCD_DA+0x138>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <LCD_DA+0x138>)
 8000ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000caa:	60d3      	str	r3, [r2, #12]
 8000cac:	e005      	b.n	8000cba <LCD_DA+0xbe>
	else
		 CLR_D4;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <LCD_DA+0x138>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <LCD_DA+0x138>)
 8000cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cb8:	60d3      	str	r3, [r2, #12]
	if((da & (1<<5))==(1<<5))
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <LCD_DA+0xd6>
		 SET_D5;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <LCD_DA+0x138>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <LCD_DA+0x138>)
 8000cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cce:	60d3      	str	r3, [r2, #12]
 8000cd0:	e005      	b.n	8000cde <LCD_DA+0xe2>
	else
		 CLR_D5;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <LCD_DA+0x138>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <LCD_DA+0x138>)
 8000cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cdc:	60d3      	str	r3, [r2, #12]
	if((da & (1<<6))==(1<<6))
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <LCD_DA+0xfa>
		 SET_D6;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <LCD_DA+0x138>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <LCD_DA+0x138>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	60d3      	str	r3, [r2, #12]
 8000cf4:	e005      	b.n	8000d02 <LCD_DA+0x106>
	else
		 CLR_D6;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <LCD_DA+0x138>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LCD_DA+0x138>)
 8000cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d00:	60d3      	str	r3, [r2, #12]
	if((da & (1<<7))==(1<<7))
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da06      	bge.n	8000d18 <LCD_DA+0x11c>
		 SET_D7;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <LCD_DA+0x138>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <LCD_DA+0x138>)
 8000d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d14:	60d3      	str	r3, [r2, #12]
	else
		 CLR_D7;
}
 8000d16:	e005      	b.n	8000d24 <LCD_DA+0x128>
		 CLR_D7;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LCD_DA+0x138>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <LCD_DA+0x138>)
 8000d1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	40011000 	.word	0x40011000

08000d38 <delay1>:

void delay1(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	asm("nop");
 8000d3c:	bf00      	nop

}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
	...

08000d48 <vSdCmd>:

//////////////////////////////////////////////////
void vSdCmd(uint8_t Command)       //send command
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]

	  CLR_DC;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <vSdCmd+0x5c>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <vSdCmd+0x5c>)
 8000d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5c:	60d3      	str	r3, [r2, #12]

	  LCD_DA(Command);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff4b 	bl	8000bfc <LCD_DA>

	  CLR_CS;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <vSdCmd+0x60>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <vSdCmd+0x60>)
 8000d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d70:	60d3      	str	r3, [r2, #12]

	  CLR_WR;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <vSdCmd+0x5c>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <vSdCmd+0x5c>)
 8000d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d7c:	60d3      	str	r3, [r2, #12]

	   delay1();
 8000d7e:	f7ff ffdb 	bl	8000d38 <delay1>

	    SET_WR;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <vSdCmd+0x5c>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <vSdCmd+0x5c>)
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	60d3      	str	r3, [r2, #12]

		  SET_CS;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <vSdCmd+0x60>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <vSdCmd+0x60>)
 8000d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d98:	60d3      	str	r3, [r2, #12]
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00

08000dac <vSdData>:
//////////////////////////////////////////////////
void vSdData(uint8_t Ddata)       //send command
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]


	  SET_DC;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <vSdData+0x5c>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <vSdData+0x5c>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	60d3      	str	r3, [r2, #12]

	  LCD_DA(Ddata);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff19 	bl	8000bfc <LCD_DA>

	  CLR_CS;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <vSdData+0x60>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <vSdData+0x60>)
 8000dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dd4:	60d3      	str	r3, [r2, #12]

	  CLR_WR;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <vSdData+0x5c>)
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <vSdData+0x5c>)
 8000ddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000de0:	60d3      	str	r3, [r2, #12]

		delay1();
 8000de2:	f7ff ffa9 	bl	8000d38 <delay1>

		SET_WR;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <vSdData+0x5c>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <vSdData+0x5c>)
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df0:	60d3      	str	r3, [r2, #12]

	  SET_CS;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <vSdData+0x60>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <vSdData+0x60>)
 8000df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfc:	60d3      	str	r3, [r2, #12]
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00

08000e10 <data_out_16>:
//////////////////////////////////////////////////////

//传16位数据，16位数据一起赋值
void data_out_16(uint data_16bit)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	uchar hdata,ldata;
	hdata=(data_16bit>>8)&0X00FF;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	73fb      	strb	r3, [r7, #15]
	ldata=data_16bit&0X00FF;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	73bb      	strb	r3, [r7, #14]
	vSdData(hdata);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ffc1 	bl	8000dac <vSdData>
	vSdData(ldata);
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ffbd 	bl	8000dac <vSdData>
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <lcd_init>:
      vSdData(Fg_Color);
}


void lcd_init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

	//PORT_LCD_RST=0;
	//lcd_gpio_config();

	CLR_RS;			//低电平：复位
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <lcd_init+0x8c>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <lcd_init+0x8c>)
 8000e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e4a:	60d3      	str	r3, [r2, #12]
	HAL_Delay(20);
 8000e4c:	2014      	movs	r0, #20
 8000e4e:	f001 fdf9 	bl	8002a44 <HAL_Delay>
	//PORT_LCD_RST=1;
	SET_RS;			//高电平：复位结束
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <lcd_init+0x8c>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <lcd_init+0x8c>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5c:	60d3      	str	r3, [r2, #12]
	HAL_Delay(80);
 8000e5e:	2050      	movs	r0, #80	; 0x50
 8000e60:	f001 fdf0 	bl	8002a44 <HAL_Delay>

	vSdCmd(0x11);	//开始初始化：
 8000e64:	2011      	movs	r0, #17
 8000e66:	f7ff ff6f 	bl	8000d48 <vSdCmd>
	vSdCmd(0x26);vSdData(0x04);	//设置GAMMA参数
 8000e6a:	2026      	movs	r0, #38	; 0x26
 8000e6c:	f7ff ff6c 	bl	8000d48 <vSdCmd>
 8000e70:	2004      	movs	r0, #4
 8000e72:	f7ff ff9b 	bl	8000dac <vSdData>
	vSdCmd(0x36);vSdData(0xa8);	//行扫描顺序，列扫描顺序，横放/竖放    //设置：RAM写入方向从左向右、从上到下、数据顺序BGR
 8000e76:	2036      	movs	r0, #54	; 0x36
 8000e78:	f7ff ff66 	bl	8000d48 <vSdCmd>
 8000e7c:	20a8      	movs	r0, #168	; 0xa8
 8000e7e:	f7ff ff95 	bl	8000dac <vSdData>
	vSdCmd(0xb1);vSdData(0x0e);vSdData(0x14);		//设置fr=61.7hz
 8000e82:	20b1      	movs	r0, #177	; 0xb1
 8000e84:	f7ff ff60 	bl	8000d48 <vSdCmd>
 8000e88:	200e      	movs	r0, #14
 8000e8a:	f7ff ff8f 	bl	8000dac <vSdData>
 8000e8e:	2014      	movs	r0, #20
 8000e90:	f7ff ff8c 	bl	8000dac <vSdData>
	vSdCmd(0x3a);vSdData(0x05);		//数据格式16bit
 8000e94:	203a      	movs	r0, #58	; 0x3a
 8000e96:	f7ff ff57 	bl	8000d48 <vSdCmd>
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f7ff ff86 	bl	8000dac <vSdData>
	vSdCmd(0x29);	//开显示
 8000ea0:	2029      	movs	r0, #41	; 0x29
 8000ea2:	f7ff ff51 	bl	8000d48 <vSdCmd>

	SET_BK;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <lcd_init+0x90>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <lcd_init+0x90>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	60d3      	str	r3, [r2, #12]
	display_color(green);
 8000eb2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000eb6:	f000 f865 	bl	8000f84 <display_color>
	HAL_Delay(1000);
 8000eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebe:	f001 fdc1 	bl	8002a44 <HAL_Delay>
	//TFT_Disp128160(gImage_Peaks_logo);
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <lcd_address>:
//定义窗口坐标：开始坐标（XS,YS)以及窗口大小（x_total,y_total)
void lcd_address(uint XS,uint YS,uint x_total,uint y_total)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
	int XE,YE;
	XE=XS+x_total-1;
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
	YE=YS+y_total-1;
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
	vSdCmd(0x2a);		// 设置X开始及结束的地址
 8000ef2:	202a      	movs	r0, #42	; 0x2a
 8000ef4:	f7ff ff28 	bl	8000d48 <vSdCmd>
	data_out_16(XS);	// X开始地址(16位）
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f7ff ff89 	bl	8000e10 <data_out_16>
	data_out_16(XE);	// X结束地址(16位）
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff85 	bl	8000e10 <data_out_16>

	vSdCmd(0x2b);		// 设置Y开始及结束的地址
 8000f06:	202b      	movs	r0, #43	; 0x2b
 8000f08:	f7ff ff1e 	bl	8000d48 <vSdCmd>
	data_out_16(YS);	// Y开始地址(16位）
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	f7ff ff7f 	bl	8000e10 <data_out_16>
	data_out_16(YE);	// Y结束地址(16位）
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff7b 	bl	8000e10 <data_out_16>

	vSdCmd(0x2c);	    // 写数据开始
 8000f1a:	202c      	movs	r0, #44	; 0x2c
 8000f1c:	f7ff ff14 	bl	8000d48 <vSdCmd>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <TFT_Disp128160>:
-函数功能:显示128*160大小图片
-入口参数:水平扫高位在前160*128bmp
-出口参数:无
---------------------------------------------------------------------------------------*/
void TFT_Disp128160(const uchar *dat)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    int i1,j;
//	横屏显示
	lcd_address(0,0,160,128);
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	22a0      	movs	r2, #160	; 0xa0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff ffca 	bl	8000ed0 <lcd_address>
	for(i1=0;i1<128;i1++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e019      	b.n	8000f76 <TFT_Disp128160+0x4e>
	{
		for(j=0;j<160;j++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	e010      	b.n	8000f6a <TFT_Disp128160+0x42>
		{
			vSdData(*dat++);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff2b 	bl	8000dac <vSdData>
			vSdData(*dat++);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff24 	bl	8000dac <vSdData>
		for(j=0;j<160;j++)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b9f      	cmp	r3, #159	; 0x9f
 8000f6e:	ddeb      	ble.n	8000f48 <TFT_Disp128160+0x20>
	for(i1=0;i1<128;i1++)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7a:	dde2      	ble.n	8000f42 <TFT_Disp128160+0x1a>
//		{
//		 vSdData(*dat++);
//		 vSdData(*dat++);
//		}
//	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <display_color>:
	}
}

//显示全屏单一色彩
void display_color(uint color)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	int i1,j;

	lcd_address(0,0,160,128);
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	22a0      	movs	r2, #160	; 0xa0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff ff9c 	bl	8000ed0 <lcd_address>
	for(i1=0;i1<128;i1++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e00e      	b.n	8000fbc <display_color+0x38>
	{
		for(j=0;j<160;j++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	e005      	b.n	8000fb0 <display_color+0x2c>
		{
			data_out_16(color);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff33 	bl	8000e10 <data_out_16>
		for(j=0;j<160;j++)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b9f      	cmp	r3, #159	; 0x9f
 8000fb4:	ddf6      	ble.n	8000fa4 <display_color+0x20>
	for(i1=0;i1<128;i1++)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000fc0:	dded      	ble.n	8000f9e <display_color+0x1a>
		{
			data_out_16(color);
		}
	}
	*/
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe0:	4b69      	ldr	r3, [pc, #420]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a68      	ldr	r2, [pc, #416]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b66      	ldr	r3, [pc, #408]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	4b63      	ldr	r3, [pc, #396]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a62      	ldr	r2, [pc, #392]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b60      	ldr	r3, [pc, #384]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a5c      	ldr	r2, [pc, #368]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <MX_GPIO_Init+0x1bc>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <MX_GPIO_Init+0x1bc>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a56      	ldr	r2, [pc, #344]	; (8001188 <MX_GPIO_Init+0x1bc>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <MX_GPIO_Init+0x1bc>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEY3A_Pin|LED1_DO_Pin|LED_DO_Pin|KEY4_Pin 
 8001040:	2201      	movs	r2, #1
 8001042:	f248 71ce 	movw	r1, #34766	; 0x87ce
 8001046:	4851      	ldr	r0, [pc, #324]	; (800118c <MX_GPIO_Init+0x1c0>)
 8001048:	f002 f8d1 	bl	80031ee <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin 
                          |CC2520_CS_GPIO_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|LED2_Pin|LED1_Pin 
 800104c:	2200      	movs	r2, #0
 800104e:	f248 7102 	movw	r1, #34562	; 0x8702
 8001052:	484f      	ldr	r0, [pc, #316]	; (8001190 <MX_GPIO_Init+0x1c4>)
 8001054:	f002 f8cb 	bl	80031ee <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CC2520_NRST_GPIO_Pin|CC2520_CLK_GPIO_Pin|CC2520_MOSI_GPIO_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2170      	movs	r1, #112	; 0x70
 800105c:	484c      	ldr	r0, [pc, #304]	; (8001190 <MX_GPIO_Init+0x1c4>)
 800105e:	f002 f8c6 	bl	80031ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2520_POWEN_GPIO_GPIO_Port, CC2520_POWEN_GPIO_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2110      	movs	r1, #16
 8001066:	4849      	ldr	r0, [pc, #292]	; (800118c <MX_GPIO_Init+0x1c0>)
 8001068:	f002 f8c1 	bl	80031ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_CE3_Pin|D0_Pin|D1_Pin|D2_Pin 
 800106c:	2201      	movs	r2, #1
 800106e:	f24f 0102 	movw	r1, #61442	; 0xf002
 8001072:	4848      	ldr	r0, [pc, #288]	; (8001194 <MX_GPIO_Init+0x1c8>)
 8001074:	f002 f8bb 	bl	80031ee <HAL_GPIO_WritePin>
                          |D3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800107e:	4845      	ldr	r0, [pc, #276]	; (8001194 <MX_GPIO_Init+0x1c8>)
 8001080:	f002 f8b5 	bl	80031ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY5_Pin|CC2520_GP0_GPIO_Pin;
 8001084:	f247 0320 	movw	r3, #28704	; 0x7020
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	483c      	ldr	r0, [pc, #240]	; (800118c <MX_GPIO_Init+0x1c0>)
 800109a:	f001 ff27 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = KEY3A_Pin|LED1_DO_Pin|LED_DO_Pin|KEY4_Pin 
 800109e:	f248 73ce 	movw	r3, #34766	; 0x87ce
 80010a2:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin 
                          |CC2520_CS_GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4835      	ldr	r0, [pc, #212]	; (800118c <MX_GPIO_Init+0x1c0>)
 80010b8:	f001 ff18 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PAPin PAPin 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|LED2_Pin|LED1_Pin 
 80010bc:	f248 7302 	movw	r3, #34562	; 0x8702
 80010c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	482e      	ldr	r0, [pc, #184]	; (8001190 <MX_GPIO_Init+0x1c4>)
 80010d6:	f001 ff09 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CC2520_NRST_GPIO_Pin|CC2520_CLK_GPIO_Pin|CC2520_MOSI_GPIO_Pin;
 80010da:	2370      	movs	r3, #112	; 0x70
 80010dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	4827      	ldr	r0, [pc, #156]	; (8001190 <MX_GPIO_Init+0x1c4>)
 80010f2:	f001 fefb 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2520_MISO_GPIO_Pin;
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CC2520_MISO_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0x1c4>)
 800110a:	f001 feef 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2520_POWEN_GPIO_Pin;
 800110e:	2310      	movs	r3, #16
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CC2520_POWEN_GPIO_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <MX_GPIO_Init+0x1c0>)
 8001126:	f001 fee1 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2520_GP1_GPIO_Pin;
 800112a:	2301      	movs	r3, #1
 800112c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CC2520_GP1_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4619      	mov	r1, r3
 800113c:	4815      	ldr	r0, [pc, #84]	; (8001194 <MX_GPIO_Init+0x1c8>)
 800113e:	f001 fed5 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = RS485_CE3_Pin|D0_Pin|D1_Pin|D2_Pin 
 8001142:	f24f 0302 	movw	r3, #61442	; 0xf002
 8001146:	613b      	str	r3, [r7, #16]
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <MX_GPIO_Init+0x1c8>)
 800115c:	f001 fec6 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_GPIO_Init+0x1c8>)
 800117a:	f001 feb7 	bl	8002eec <HAL_GPIO_Init>

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	40011000 	.word	0x40011000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00

08001198 <delay_init>:
typedef uint32_t u32;
u8 fac_us;


void delay_init(u8 SYSCLK)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
    #if SYSTEM_SUPPORT_OS
        u32 reload;
    #endif

    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011a2:	2004      	movs	r0, #4
 80011a4:	f001 fd7e 	bl	8002ca4 <HAL_SYSTICK_CLKSourceConfig>
    //SysTick  HCLK
    fac_us=SYSCLK;              // OS,fac_us
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <delay_init+0x20>)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	7013      	strb	r3, [r2, #0]
        SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;// SYSTICK
        SysTick->LOAD=reload;                   // 1/OS_TICKS_PER_SEC
        SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // SYSTICK
        #else
    #endif
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200007f4 	.word	0x200007f4

080011bc <delay_us1>:


void delay_us1(u32 nus)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                   //LOAD
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <delay_us1+0x74>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <delay_us1+0x78>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <delay_us1+0x74>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <delay_us1+0x74>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d0f8      	beq.n	80011e2 <delay_us1+0x26>
        {
            if(tnow<told)tcnt+=told-tnow;       // SYSTICK.
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d206      	bcs.n	8001206 <delay_us1+0x4a>
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4413      	add	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	e007      	b.n	8001216 <delay_us1+0x5a>
            else tcnt+=reload-tnow+told;
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	4413      	add	r3, r2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4413      	add	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
            told=tnow;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	429a      	cmp	r2, r3
 8001220:	d200      	bcs.n	8001224 <delay_us1+0x68>
        tnow=SysTick->VAL;
 8001222:	e7de      	b.n	80011e2 <delay_us1+0x26>
            if(tcnt>=ticks)break;
 8001224:	bf00      	nop
        }
    }
}
 8001226:	bf00      	nop
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	e000e010 	.word	0xe000e010
 8001234:	200007f4 	.word	0x200007f4

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f001 fba0 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f8a2 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f7ff fec2 	bl	8000fcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001248:	f000 fe2c 	bl	8001ea4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800124c:	f000 fec4 	bl	8001fd8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001250:	f000 ffce 	bl	80021f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001254:	f000 fff6 	bl	8002244 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001258:	f000 fe70 	bl	8001f3c <MX_TIM3_Init>
  MX_USB_PCD_Init();
 800125c:	f001 f8aa 	bl	80023b4 <MX_USB_PCD_Init>
  MX_TIM5_Init();
 8001260:	f000 ff08 	bl	8002074 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8001264:	483b      	ldr	r0, [pc, #236]	; (8001354 <main+0x11c>)
 8001266:	f002 fdb8 	bl	8003dda <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800126a:	483b      	ldr	r0, [pc, #236]	; (8001358 <main+0x120>)
 800126c:	f002 fdb5 	bl	8003dda <HAL_TIM_Base_Start_IT>
  RR=0; GG=0; BB=0;
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <main+0x124>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <main+0x128>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <main+0x12c>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
  FLAG_RECEIVE_OK1=1;
 8001282:	4a39      	ldr	r2, [pc, #228]	; (8001368 <main+0x130>)
 8001284:	7813      	ldrb	r3, [r2, #0]
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	7013      	strb	r3, [r2, #0]
  fre_set=0;
 800128c:	4b37      	ldr	r3, [pc, #220]	; (800136c <main+0x134>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3,(uint8_t *)cRxBuffer,13); //
 8001292:	220d      	movs	r2, #13
 8001294:	4936      	ldr	r1, [pc, #216]	; (8001370 <main+0x138>)
 8001296:	4837      	ldr	r0, [pc, #220]	; (8001374 <main+0x13c>)
 8001298:	f003 f983 	bl	80045a2 <HAL_UART_Receive_IT>
 // delay_init(72);

  reset_ws2812();
 800129c:	f001 f8ca 	bl	8002434 <reset_ws2812>
  reset_ws2812_1();
 80012a0:	f001 f8d8 	bl	8002454 <reset_ws2812_1>
  RGB_close1();
 80012a4:	f001 fb22 	bl	80028ec <RGB_close1>
  RGB_close();
 80012a8:	f001 fafc 	bl	80028a4 <RGB_close>
  flag_slave_ok=0;
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <main+0x140>)
 80012ae:	7813      	ldrb	r3, [r2, #0]
 80012b0:	f36f 1304 	bfc	r3, #4, #1
 80012b4:	7013      	strb	r3, [r2, #0]
	while(HAL_UART_Transmit_IT(&huart3, (uint8_t *)TX_BUFF_WENXIN, sizeof(TX_BUFF_WENXIN))!=HAL_OK)
	{
		;
	}
	*/
  lcd_init();
 80012b6:	f7ff fdc1 	bl	8000e3c <lcd_init>
  TFT_Disp128160(gImage_Peaks_logo);
 80012ba:	4830      	ldr	r0, [pc, #192]	; (800137c <main+0x144>)
 80012bc:	f7ff fe34 	bl	8000f28 <TFT_Disp128160>
	  HAL_GPIO_WritePin(RS485_CE3_GPIO_Port, RS485_CE3_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2102      	movs	r1, #2
 80012c4:	482e      	ldr	r0, [pc, #184]	; (8001380 <main+0x148>)
 80012c6:	f001 ff92 	bl	80031ee <HAL_GPIO_WritePin>

	  HAL_Delay(1);//延时大概 1mS
 80012ca:	2001      	movs	r0, #1
 80012cc:	f001 fbba 	bl	8002a44 <HAL_Delay>
	  CC2520_GPIO_Config();
 80012d0:	f7fe ffee 	bl	80002b0 <CC2520_GPIO_Config>
	  //--------------------------SPI初始化函�??????---------------------------
		CC2520_SPI_Init();
 80012d4:	f7ff fa96 	bl	8000804 <CC2520_SPI_Init>
		CC2520_Init(0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff f857 	bl	800038c <CC2520_Init>
		//CC2520_SetRxMode();		//设置为接收模式
		//CC2520_Command(CMD_SXOSCOFF);
		//CC2520_IntoActMode_Init();
	 // CC2520_Init(0);
	  flag_CC2520_Search=0;
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <main+0x140>)
 80012e0:	7813      	ldrb	r3, [r2, #0]
 80012e2:	f36f 0382 	bfc	r3, #2, #1
 80012e6:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(CC2520_RxPacket())		//判断RF2520接收
 80012e8:	f7ff f9ec 	bl	80006c4 <CC2520_RxPacket>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <main+0xc2>
		{
			//time_cc2520_no_rx=0;
			CC2520_ReadRXFIFO();	//数据接收
 80012f2:	f7ff fb95 	bl	8000a20 <CC2520_ReadRXFIFO>
			cc2520_data_load();
 80012f6:	f7ff fbd1 	bl	8000a9c <cc2520_data_load>
		}

		if(flag_CC2520_Search)
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <main+0x140>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <main+0xde>
		{
			flag_CC2520_Search=0;
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <main+0x140>)
 800130a:	7813      	ldrb	r3, [r2, #0]
 800130c:	f36f 0382 	bfc	r3, #2, #1
 8001310:	7013      	strb	r3, [r2, #0]
			CC2520_Search();
 8001312:	f7ff fb41 	bl	8000998 <CC2520_Search>
			CC2520_Init(fre_set);
			CC2520_IntoActMode_Init();
			CC2520_SetRxMode();		//设置为接收模�??????
		}
		*/
      if(FLAG_RECEIVE_OK)
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <main+0x14c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0e1      	beq.n	80012e8 <main+0xb0>
      {
    	  FLAG_RECEIVE_OK=0;
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <main+0x14c>)
 8001326:	7813      	ldrb	r3, [r2, #0]
 8001328:	f36f 13c7 	bfc	r3, #7, #1
 800132c:	7013      	strb	r3, [r2, #0]
	      HAL_GPIO_WritePin(GPIOB, RS485_CE3_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2102      	movs	r1, #2
 8001332:	4813      	ldr	r0, [pc, #76]	; (8001380 <main+0x148>)
 8001334:	f001 ff5b 	bl	80031ee <HAL_GPIO_WritePin>
	      HAL_Delay(2);//延时大概 1mS
 8001338:	2002      	movs	r0, #2
 800133a:	f001 fb83 	bl	8002a44 <HAL_Delay>
    	  IOT_PROCESS();	//IOT处理进程
 800133e:	f000 fb5b 	bl	80019f8 <IOT_PROCESS>
				;
			}
			*/
    	//}

		  HAL_GPIO_WritePin(GPIOB, RS485_CE3_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2102      	movs	r1, #2
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <main+0x148>)
 8001348:	f001 ff51 	bl	80031ee <HAL_GPIO_WritePin>
		  HAL_Delay(1);//延时大概 1mS
 800134c:	2001      	movs	r0, #1
 800134e:	f001 fb79 	bl	8002a44 <HAL_Delay>
		if(CC2520_RxPacket())		//判断RF2520接收
 8001352:	e7c9      	b.n	80012e8 <main+0xb0>
 8001354:	200007b4 	.word	0x200007b4
 8001358:	200005e8 	.word	0x200005e8
 800135c:	20000dda 	.word	0x20000dda
 8001360:	20000dd4 	.word	0x20000dd4
 8001364:	20000ddc 	.word	0x20000ddc
 8001368:	20000168 	.word	0x20000168
 800136c:	2000048d 	.word	0x2000048d
 8001370:	20000840 	.word	0x20000840
 8001374:	2000062c 	.word	0x2000062c
 8001378:	2000005c 	.word	0x2000005c
 800137c:	08004df4 	.word	0x08004df4
 8001380:	40010c00 	.word	0x40010c00
 8001384:	20000058 	.word	0x20000058

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b096      	sub	sp, #88	; 0x58
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001392:	2228      	movs	r2, #40	; 0x28
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fd02 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013bc:	2301      	movs	r3, #1
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ca:	2301      	movs	r3, #1
 80013cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fffc 	bl	80033e0 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013ee:	f000 fc9b 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fa66 	bl	80038e0 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800141a:	f000 fc85 	bl	8001d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800141e:	2310      	movs	r3, #16
 8001420:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fbf5 	bl	8003c18 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001434:	f000 fc78 	bl	8001d28 <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3758      	adds	r7, #88	; 0x58
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim2.Instance)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b87      	ldr	r3, [pc, #540]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d10e      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		FLAG_RECEIVE_OK = 1;	//断帧机制   20ms没接收到数据，判断为1 �????????????
 8001454:	4a86      	ldr	r2, [pc, #536]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001456:	7813      	ldrb	r3, [r2, #0]
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	7013      	strb	r3, [r2, #0]

		Rx_LEN=Rx_count_UART3;
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001464:	701a      	strb	r2, [r3, #0]
		Rx_count_UART3=0;
 8001466:	4b83      	ldr	r3, [pc, #524]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);//关闭定时
 800146c:	487f      	ldr	r0, [pc, #508]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800146e:	f002 fcd7 	bl	8003e20 <HAL_TIM_Base_Stop_IT>
	}
	if (htim->Instance == htim3.Instance)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	f040 823e 	bne.w	80018fc <HAL_TIM_PeriodElapsedCallback+0x4bc>
	{
		cc2520_rx_cycle++;
 8001480:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b7d      	ldr	r3, [pc, #500]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800148a:	801a      	strh	r2, [r3, #0]
		time_cc2520_no_rx++;
 800148c:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001494:	6013      	str	r3, [r2, #0]
		time_delay++;
 8001496:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800149e:	6013      	str	r3, [r2, #0]
		time3_20ms++;
 80014a0:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b78      	ldr	r3, [pc, #480]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80014aa:	801a      	strh	r2, [r3, #0]

		if((CC2520_PSDU[24]==0x15))
 80014ac:	4b78      	ldr	r3, [pc, #480]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
 80014b0:	2b15      	cmp	r3, #21
 80014b2:	d135      	bne.n	8001520 <HAL_TIM_PeriodElapsedCallback+0xe0>
		{
			if(flag_slave_ok)
 80014b4:	4b77      	ldr	r3, [pc, #476]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d018      	beq.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0xb4>
			{
				flag_slave_ok=0;
 80014c2:	4a74      	ldr	r2, [pc, #464]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80014c4:	7813      	ldrb	r3, [r2, #0]
 80014c6:	f36f 1304 	bfc	r3, #4, #1
 80014ca:	7013      	strb	r3, [r2, #0]
				ID_ARM_UP_A[5]=temp_run;
 80014cc:	4b72      	ldr	r3, [pc, #456]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b72      	ldr	r3, [pc, #456]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80014d2:	715a      	strb	r2, [r3, #5]
				RR=RR_temp; GG=GG_temp; BB=BB_temp;
 80014d4:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	4b72      	ldr	r3, [pc, #456]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80014ea:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 80014ec:	f001 f98a 	bl	8002804 <send_string_data>
				  send_string_data1();
 80014f0:	f001 f9c4 	bl	800287c <send_string_data1>
			}
			time_hand_ctrl=0;
 80014f4:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
			ID_ARM_UP_A[5]=temp_run;
 80014fa:	4b67      	ldr	r3, [pc, #412]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001500:	715a      	strb	r2, [r3, #5]
			RR=RR_temp; GG=GG_temp; BB=BB_temp;
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001518:	701a      	strb	r2, [r3, #0]
			  send_string_data();
 800151a:	f001 f973 	bl	8002804 <send_string_data>
 800151e:	e034      	b.n	800158a <HAL_TIM_PeriodElapsedCallback+0x14a>
			//ID_ARM_UP_A[5]=temp_run;
			//RR_temp=RR; GG_temp=GG; BB_temp=BB;
		}
		else
		{
			time_hand_ctrl++;
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800152a:	701a      	strb	r2, [r3, #0]
			if(time_hand_ctrl>80)
 800152c:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b50      	cmp	r3, #80	; 0x50
 8001532:	d918      	bls.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x126>
			{
				time_hand_ctrl=81;
 8001534:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001536:	2251      	movs	r2, #81	; 0x51
 8001538:	701a      	strb	r2, [r3, #0]
				flag_slave_ok=1;
 800153a:	4a56      	ldr	r2, [pc, #344]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800153c:	7813      	ldrb	r3, [r2, #0]
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	7013      	strb	r3, [r2, #0]
				//temp_run=ID_ARM_UP_A[5];
				  ID_ARM_UP_A[5]=0x05;
 8001544:	4b55      	ldr	r3, [pc, #340]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001546:	2205      	movs	r2, #5
 8001548:	715a      	strb	r2, [r3, #5]
				  RR=0; GG=0; BB=0;
 800154a:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 800155c:	f001 f952 	bl	8002804 <send_string_data>
				  send_string_data1();
 8001560:	f001 f98c 	bl	800287c <send_string_data1>
 8001564:	e011      	b.n	800158a <HAL_TIM_PeriodElapsedCallback+0x14a>
			}
			else
			{
				ID_ARM_UP_A[5]=temp_run;
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	4b4c      	ldr	r3, [pc, #304]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800156c:	715a      	strb	r2, [r3, #5]
				RR=RR_temp; GG=GG_temp; BB=BB_temp;
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001584:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 8001586:	f001 f93d 	bl	8002804 <send_string_data>
			{
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
			}
		}
		 */
		SET_KEY3_0;
 800158a:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001594:	60d3      	str	r3, [r2, #12]
		SET_KEY4_1;
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	60d3      	str	r3, [r2, #12]
		//asm("nop");asm("nop");
		  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)==0)	//SW1
 80015a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a6:	4845      	ldr	r0, [pc, #276]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015a8:	f001 fe0a 	bl	80031c0 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d112      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x198>
		  {
			  g_u8Time20ms_1++;
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015bc:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_1>1)
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d937      	bls.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			  {
				  g_u8Time20ms_1=3;
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015c8:	2203      	movs	r2, #3
 80015ca:	701a      	strb	r2, [r3, #0]
				  key1_in_Flag=1;
 80015cc:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015ce:	7813      	ldrb	r3, [r2, #0]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	7013      	strb	r3, [r2, #0]
 80015d6:	e02e      	b.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_1=0;
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
			  if(key1_in_Flag)
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d024      	beq.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			  {
				  key1_in_Flag=0;
 80015ec:	4a35      	ldr	r2, [pc, #212]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015ee:	7813      	ldrb	r3, [r2, #0]
 80015f0:	f36f 0300 	bfc	r3, #0, #1
 80015f4:	7013      	strb	r3, [r2, #0]
				  RR=25; GG=0; BB=0;
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80015f8:	2219      	movs	r2, #25
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
				 // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
				  ID_ARM_UP_A[5]=0x01;
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800160a:	2201      	movs	r2, #1
 800160c:	715a      	strb	r2, [r3, #5]
				  RR_temp=RR; GG_temp=GG; BB_temp=BB;
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001620:	781a      	ldrb	r2, [r3, #0]
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001624:	701a      	strb	r2, [r3, #0]
				  temp_run=ID_ARM_UP_A[5];
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001628:	795a      	ldrb	r2, [r3, #5]
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800162c:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 800162e:	f001 f8e9 	bl	8002804 <send_string_data>
				  send_string_data1();
 8001632:	f001 f923 	bl	800287c <send_string_data1>
				  //send_image(gImage_8);
			  }
		  }
		  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin)==0)	//SW3
 8001636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163a:	4820      	ldr	r0, [pc, #128]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800163c:	f001 fdc0 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d142      	bne.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x28c>
		  {
			  g_u8Time20ms_2++;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001650:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_2>1)
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d967      	bls.n	800172a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			  {
				  g_u8Time20ms_2=3;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800165c:	2203      	movs	r2, #3
 800165e:	701a      	strb	r2, [r3, #0]
				  key2_in_Flag=1;
 8001660:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001662:	7813      	ldrb	r3, [r2, #0]
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	7013      	strb	r3, [r2, #0]
 800166a:	e05e      	b.n	800172a <HAL_TIM_PeriodElapsedCallback+0x2ea>
 800166c:	20000a14 	.word	0x20000a14
 8001670:	20000058 	.word	0x20000058
 8001674:	2000076f 	.word	0x2000076f
 8001678:	20000628 	.word	0x20000628
 800167c:	200007b4 	.word	0x200007b4
 8001680:	20000554 	.word	0x20000554
 8001684:	20000160 	.word	0x20000160
 8001688:	20000384 	.word	0x20000384
 800168c:	2000004a 	.word	0x2000004a
 8001690:	20000560 	.word	0x20000560
 8001694:	2000005c 	.word	0x2000005c
 8001698:	20000045 	.word	0x20000045
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	20000046 	.word	0x20000046
 80016a4:	20000dda 	.word	0x20000dda
 80016a8:	20000047 	.word	0x20000047
 80016ac:	20000dd4 	.word	0x20000dd4
 80016b0:	20000048 	.word	0x20000048
 80016b4:	20000ddc 	.word	0x20000ddc
 80016b8:	20000044 	.word	0x20000044
 80016bc:	40011000 	.word	0x40011000
 80016c0:	20000b62 	.word	0x20000b62
 80016c4:	20000050 	.word	0x20000050
 80016c8:	20000909 	.word	0x20000909
			  }
		  }
		  else
		  {
			  g_u8Time20ms_2=0;
 80016cc:	4b97      	ldr	r3, [pc, #604]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
			  if(key2_in_Flag)
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d024      	beq.n	800172a <HAL_TIM_PeriodElapsedCallback+0x2ea>
			  {
				  key2_in_Flag=0;
 80016e0:	4a93      	ldr	r2, [pc, #588]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80016e2:	7813      	ldrb	r3, [r2, #0]
 80016e4:	f36f 0341 	bfc	r3, #1, #1
 80016e8:	7013      	strb	r3, [r2, #0]
				  ID_ARM_UP_A[5]=0x03;
 80016ea:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80016ec:	2203      	movs	r2, #3
 80016ee:	715a      	strb	r2, [r3, #5]
				  temp_run=ID_ARM_UP_A[5];
 80016f0:	4b90      	ldr	r3, [pc, #576]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80016f2:	795a      	ldrb	r2, [r3, #5]
 80016f4:	4b90      	ldr	r3, [pc, #576]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80016f6:	701a      	strb	r2, [r3, #0]
				  //send_image(gImage_9);
				  RR=0; GG=0; BB=25;
 80016f8:	4b90      	ldr	r3, [pc, #576]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	4b90      	ldr	r3, [pc, #576]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001706:	2219      	movs	r2, #25
 8001708:	701a      	strb	r2, [r3, #0]
				  RR_temp=RR; GG_temp=GG; BB_temp=BB;
 800170a:	4b8c      	ldr	r3, [pc, #560]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	4b8b      	ldr	r3, [pc, #556]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b8d      	ldr	r3, [pc, #564]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001720:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 8001722:	f001 f86f 	bl	8002804 <send_string_data>
				  send_string_data1();
 8001726:	f001 f8a9 	bl	800287c <send_string_data1>
			  }
		  }

		SET_KEY3_1;
 800172a:	4b8a      	ldr	r3, [pc, #552]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	4a89      	ldr	r2, [pc, #548]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001734:	60d3      	str	r3, [r2, #12]
		SET_KEY4_0;
 8001736:	4b87      	ldr	r3, [pc, #540]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4a86      	ldr	r2, [pc, #536]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800173c:	f023 0308 	bic.w	r3, r3, #8
 8001740:	60d3      	str	r3, [r2, #12]
		//asm("nop");asm("nop");
		  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)==0)	//SW2
 8001742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001746:	4883      	ldr	r0, [pc, #524]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001748:	f001 fd3a 	bl	80031c0 <HAL_GPIO_ReadPin>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d112      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x338>
		  {
			  g_u8Time20ms_3++;
 8001752:	4b81      	ldr	r3, [pc, #516]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800175c:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_3>1)
 800175e:	4b7e      	ldr	r3, [pc, #504]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d937      	bls.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x396>
			  {
				  g_u8Time20ms_3=3;
 8001766:	4b7c      	ldr	r3, [pc, #496]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001768:	2203      	movs	r2, #3
 800176a:	701a      	strb	r2, [r3, #0]
				  key3_in_Flag=1;
 800176c:	4a70      	ldr	r2, [pc, #448]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800176e:	7813      	ldrb	r3, [r2, #0]
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	7013      	strb	r3, [r2, #0]
 8001776:	e02e      	b.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x396>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_3=0;
 8001778:	4b77      	ldr	r3, [pc, #476]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
			  if(key3_in_Flag)
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d024      	beq.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x396>
			  {
				  key3_in_Flag=0;
 800178c:	4a68      	ldr	r2, [pc, #416]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800178e:	7813      	ldrb	r3, [r2, #0]
 8001790:	f36f 0382 	bfc	r3, #2, #1
 8001794:	7013      	strb	r3, [r2, #0]
				  ID_ARM_UP_A[5]=0x02;
 8001796:	4b67      	ldr	r3, [pc, #412]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001798:	2202      	movs	r2, #2
 800179a:	715a      	strb	r2, [r3, #5]
				  temp_run=ID_ARM_UP_A[5];
 800179c:	4b65      	ldr	r3, [pc, #404]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800179e:	795a      	ldrb	r2, [r3, #5]
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80017a2:	701a      	strb	r2, [r3, #0]
				 // send_image(gImage_8);
				  RR=0; GG=25; BB=0;
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80017ac:	2219      	movs	r2, #25
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
				  RR_temp=RR; GG_temp=GG; BB_temp=BB;
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	4b62      	ldr	r3, [pc, #392]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80017cc:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 80017ce:	f001 f819 	bl	8002804 <send_string_data>
				  send_string_data1();
 80017d2:	f001 f853 	bl	800287c <send_string_data1>
			  }
		  }
		  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin)==0)	//SW4
 80017d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017da:	485e      	ldr	r0, [pc, #376]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80017dc:	f001 fcf0 	bl	80031c0 <HAL_GPIO_ReadPin>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d112      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x3cc>
		  {
			  g_u8Time20ms_4++;
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b5b      	ldr	r3, [pc, #364]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80017f0:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_4>1)
 80017f2:	4b5a      	ldr	r3, [pc, #360]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d937      	bls.n	800186a <HAL_TIM_PeriodElapsedCallback+0x42a>
			  {
				  g_u8Time20ms_4=3;
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80017fc:	2203      	movs	r2, #3
 80017fe:	701a      	strb	r2, [r3, #0]
				  key4_in_Flag=1;
 8001800:	4a4b      	ldr	r2, [pc, #300]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001802:	7813      	ldrb	r3, [r2, #0]
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	7013      	strb	r3, [r2, #0]
 800180a:	e02e      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x42a>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_4=0;
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
			  if(key4_in_Flag)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d024      	beq.n	800186a <HAL_TIM_PeriodElapsedCallback+0x42a>
			  {
				  key4_in_Flag=0;
 8001820:	4a43      	ldr	r2, [pc, #268]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001822:	7813      	ldrb	r3, [r2, #0]
 8001824:	f36f 03c3 	bfc	r3, #3, #1
 8001828:	7013      	strb	r3, [r2, #0]
				  ID_ARM_UP_A[5]=0x04;
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800182c:	2204      	movs	r2, #4
 800182e:	715a      	strb	r2, [r3, #5]
				  temp_run=ID_ARM_UP_A[5];
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001832:	795a      	ldrb	r2, [r3, #5]
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001836:	701a      	strb	r2, [r3, #0]
				  //send_image(gImage_9);
				  RR=25; GG=25; BB=25;
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800183a:	2219      	movs	r2, #25
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	4b40      	ldr	r3, [pc, #256]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001840:	2219      	movs	r2, #25
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001846:	2219      	movs	r2, #25
 8001848:	701a      	strb	r2, [r3, #0]
				  RR_temp=RR; GG_temp=GG; BB_temp=BB;
 800184a:	4b3c      	ldr	r3, [pc, #240]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001860:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 8001862:	f000 ffcf 	bl	8002804 <send_string_data>
				  send_string_data1();
 8001866:	f001 f809 	bl	800287c <send_string_data1>
			  }
		  }
		  if(HAL_GPIO_ReadPin(KEY5_GPIO_Port, KEY5_Pin)==0)
 800186a:	2120      	movs	r1, #32
 800186c:	4839      	ldr	r0, [pc, #228]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x514>)
 800186e:	f001 fca7 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <HAL_TIM_PeriodElapsedCallback+0x45e>
		  {
			  g_u8Time20ms_5++;
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001882:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_5>1)
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d937      	bls.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x4bc>
			  {
				  g_u8Time20ms_5=3;
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800188e:	2203      	movs	r2, #3
 8001890:	701a      	strb	r2, [r3, #0]
				  key5_in_Flag=1;
 8001892:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001894:	7813      	ldrb	r3, [r2, #0]
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	7013      	strb	r3, [r2, #0]
 800189c:	e02e      	b.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x4bc>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_5=0;
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
			  if(key5_in_Flag)
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d024      	beq.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x4bc>
			  {
				  key5_in_Flag=0;
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80018b4:	7813      	ldrb	r3, [r2, #0]
 80018b6:	f36f 1345 	bfc	r3, #5, #1
 80018ba:	7013      	strb	r3, [r2, #0]
				  ID_ARM_UP_A[5]=0x05;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80018be:	2205      	movs	r2, #5
 80018c0:	715a      	strb	r2, [r3, #5]
				  temp_run=ID_ARM_UP_A[5];
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80018c4:	795a      	ldrb	r2, [r3, #5]
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80018c8:	701a      	strb	r2, [r3, #0]
				  RR=0; GG=0; BB=0;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
				  RR_temp=RR; GG_temp=GG; BB_temp=BB;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80018f2:	701a      	strb	r2, [r3, #0]
				  send_string_data();
 80018f4:	f000 ff86 	bl	8002804 <send_string_data>
				  send_string_data1();
 80018f8:	f000 ffc0 	bl	800287c <send_string_data1>
					}
					*/
			  }
		  }
	}
	if (htim->Instance == htim4.Instance)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d10d      	bne.n	8001924 <HAL_TIM_PeriodElapsedCallback+0x4e4>
	{
		////HAL_GPIO_TogglePin(LED_DO_GPIO_Port, LED_DO_Pin);
		////HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    	if(FLAG_RECEIVE_OK1)
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x528>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_TIM_PeriodElapsedCallback+0x4e4>
    	{
    		FLAG_RECEIVE_OK1=0;
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8001918:	7813      	ldrb	r3, [r2, #0]
 800191a:	f36f 0382 	bfc	r3, #2, #1
 800191e:	7013      	strb	r3, [r2, #0]
    		send_string_data1();
 8001920:	f000 ffac 	bl	800287c <send_string_data1>
    		//send_string_data1();
    		//send_string_data1();
    		//send_string_data1();
    	}
	}
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000909 	.word	0x20000909
 8001930:	20000050 	.word	0x20000050
 8001934:	2000000c 	.word	0x2000000c
 8001938:	20000045 	.word	0x20000045
 800193c:	20000dda 	.word	0x20000dda
 8001940:	20000dd4 	.word	0x20000dd4
 8001944:	20000ddc 	.word	0x20000ddc
 8001948:	20000046 	.word	0x20000046
 800194c:	20000047 	.word	0x20000047
 8001950:	20000048 	.word	0x20000048
 8001954:	40011000 	.word	0x40011000
 8001958:	20000b64 	.word	0x20000b64
 800195c:	200007b0 	.word	0x200007b0
 8001960:	20000990 	.word	0x20000990
 8001964:	200005e8 	.word	0x200005e8
 8001968:	20000168 	.word	0x20000168

0800196c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(huart==&huart1)
  {

  }

  if(huart==&huart3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_UART_RxCpltCallback+0x78>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d12f      	bne.n	80019dc <HAL_UART_RxCpltCallback+0x70>
  {
		__HAL_TIM_SET_COUNTER(&htim2,0);
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_UART_RxCpltCallback+0x7c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
		Rxbuff3[Rx_count_UART3++] = cRxBuffer[0];
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_UART_RxCpltCallback+0x80>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	b2d1      	uxtb	r1, r2
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_UART_RxCpltCallback+0x80>)
 800198e:	7011      	strb	r1, [r2, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_UART_RxCpltCallback+0x84>)
 8001994:	7819      	ldrb	r1, [r3, #0]
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_UART_RxCpltCallback+0x88>)
 8001998:	5499      	strb	r1, [r3, r2]
		if((Rxbuff3[0]=='R'))
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_UART_RxCpltCallback+0x88>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b52      	cmp	r3, #82	; 0x52
 80019a0:	d108      	bne.n	80019b4 <HAL_UART_RxCpltCallback+0x48>
		{
			__HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_UART_RxCpltCallback+0x7c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f06f 0201 	mvn.w	r2, #1
 80019aa:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 80019ac:	480e      	ldr	r0, [pc, #56]	; (80019e8 <HAL_UART_RxCpltCallback+0x7c>)
 80019ae:	f002 fa14 	bl	8003dda <HAL_TIM_Base_Start_IT>
 80019b2:	e00e      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x66>
			//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		}
		else
		{
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_UART_RxCpltCallback+0x7c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_UART_RxCpltCallback+0x7c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0201 	mvn.w	r2, #1
 80019c4:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <HAL_UART_RxCpltCallback+0x7c>)
 80019c8:	f002 fa07 	bl	8003dda <HAL_TIM_Base_Start_IT>
			Rx_count_UART3=0;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_UART_RxCpltCallback+0x80>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		if(Rx_count_UART3>=7)
		{
		  Rx_count_UART3=0;
		}
		*/
		HAL_UART_Receive_IT(&huart3,(uint8_t *)cRxBuffer,1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <HAL_UART_RxCpltCallback+0x84>)
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <HAL_UART_RxCpltCallback+0x78>)
 80019d8:	f002 fde3 	bl	80045a2 <HAL_UART_Receive_IT>
  }




}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000062c 	.word	0x2000062c
 80019e8:	20000a14 	.word	0x20000a14
 80019ec:	2000076f 	.word	0x2000076f
 80019f0:	20000840 	.word	0x20000840
 80019f4:	20000a98 	.word	0x20000a98

080019f8 <IOT_PROCESS>:
/******************************************/
void IOT_PROCESS(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	//if((Rxbuff3[0]=='R'))
    if((Rxbuff3[0]=='R')&&(Rxbuff3[Rx_LEN-1]=='*'))
 80019fc:	4b95      	ldr	r3, [pc, #596]	; (8001c54 <IOT_PROCESS+0x25c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b52      	cmp	r3, #82	; 0x52
 8001a02:	f040 8175 	bne.w	8001cf0 <IOT_PROCESS+0x2f8>
 8001a06:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <IOT_PROCESS+0x260>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	4a91      	ldr	r2, [pc, #580]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	2b2a      	cmp	r3, #42	; 0x2a
 8001a12:	f040 816d 	bne.w	8001cf0 <IOT_PROCESS+0x2f8>
    {
       FLAG_RECEIVE_OK1=1;
 8001a16:	4a91      	ldr	r2, [pc, #580]	; (8001c5c <IOT_PROCESS+0x264>)
 8001a18:	7813      	ldrb	r3, [r2, #0]
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	7013      	strb	r3, [r2, #0]
       for(i=0;i<Rx_LEN-1;i++)
 8001a20:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e028      	b.n	8001a7a <IOT_PROCESS+0x82>
       {
    	   if(Rxbuff3[i]=='R')
 8001a28:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001a30:	5c9b      	ldrb	r3, [r3, r2]
 8001a32:	2b52      	cmp	r3, #82	; 0x52
 8001a34:	d104      	bne.n	8001a40 <IOT_PROCESS+0x48>
    	   {
    		   R_BIT=i;
 8001a36:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	4b8a      	ldr	r3, [pc, #552]	; (8001c64 <IOT_PROCESS+0x26c>)
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e016      	b.n	8001a6e <IOT_PROCESS+0x76>
    	   }
    	   else if(Rxbuff3[i]=='G')
 8001a40:	4b87      	ldr	r3, [pc, #540]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001a48:	5c9b      	ldrb	r3, [r3, r2]
 8001a4a:	2b47      	cmp	r3, #71	; 0x47
 8001a4c:	d104      	bne.n	8001a58 <IOT_PROCESS+0x60>
    	   {
    		   G_BIT=i;
 8001a4e:	4b84      	ldr	r3, [pc, #528]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b85      	ldr	r3, [pc, #532]	; (8001c68 <IOT_PROCESS+0x270>)
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e00a      	b.n	8001a6e <IOT_PROCESS+0x76>
    	   }
    	   else if(Rxbuff3[i]=='B')
 8001a58:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	2b42      	cmp	r3, #66	; 0x42
 8001a64:	d103      	bne.n	8001a6e <IOT_PROCESS+0x76>
    	   {
    		   B_BIT=i;
 8001a66:	4b7e      	ldr	r3, [pc, #504]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <IOT_PROCESS+0x274>)
 8001a6c:	701a      	strb	r2, [r3, #0]
       for(i=0;i<Rx_LEN-1;i++)
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <IOT_PROCESS+0x268>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b75      	ldr	r3, [pc, #468]	; (8001c58 <IOT_PROCESS+0x260>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbce      	blt.n	8001a28 <IOT_PROCESS+0x30>
    	   }
       }
       delta_RG=G_BIT-R_BIT-1;
 8001a8a:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <IOT_PROCESS+0x270>)
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <IOT_PROCESS+0x26c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b75      	ldr	r3, [pc, #468]	; (8001c70 <IOT_PROCESS+0x278>)
 8001a9c:	701a      	strb	r2, [r3, #0]
       delta_GB=B_BIT-G_BIT-1;
 8001a9e:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <IOT_PROCESS+0x274>)
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <IOT_PROCESS+0x270>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <IOT_PROCESS+0x27c>)
 8001ab0:	701a      	strb	r2, [r3, #0]
       delta_BX=Rx_LEN-B_BIT-1-1;
 8001ab2:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <IOT_PROCESS+0x260>)
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	; (8001c6c <IOT_PROCESS+0x274>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3b02      	subs	r3, #2
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <IOT_PROCESS+0x280>)
 8001ac4:	701a      	strb	r2, [r3, #0]
       switch (delta_RG)
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <IOT_PROCESS+0x278>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d00d      	beq.n	8001aea <IOT_PROCESS+0xf2>
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d021      	beq.n	8001b16 <IOT_PROCESS+0x11e>
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d146      	bne.n	8001b64 <IOT_PROCESS+0x16c>
       {
           case 0x01:
           {
        	   RR=Rxbuff3[G_BIT-1]-0X30;
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <IOT_PROCESS+0x270>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	3b30      	subs	r3, #48	; 0x30
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <IOT_PROCESS+0x284>)
 8001ae6:	701a      	strb	r2, [r3, #0]
           }break;
 8001ae8:	e03c      	b.n	8001b64 <IOT_PROCESS+0x16c>
           case 0x02:
           {
        	   RR=(Rxbuff3[G_BIT-1]-0X30)+(Rxbuff3[G_BIT-2]-0X30)*10;
 8001aea:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <IOT_PROCESS+0x270>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001af2:	5cd2      	ldrb	r2, [r2, r3]
 8001af4:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <IOT_PROCESS+0x270>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	3b02      	subs	r3, #2
 8001afa:	4956      	ldr	r1, [pc, #344]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	4619      	mov	r1, r3
 8001b00:	0089      	lsls	r1, r1, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3b10      	subs	r3, #16
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <IOT_PROCESS+0x284>)
 8001b12:	701a      	strb	r2, [r3, #0]
           }break;
 8001b14:	e026      	b.n	8001b64 <IOT_PROCESS+0x16c>
           case 0x03:
           {
        	   RR=(Rxbuff3[G_BIT-1]-0X30)+(Rxbuff3[G_BIT-2]-0X30)*10+(Rxbuff3[G_BIT-3]-0X30)*100;
 8001b16:	4b54      	ldr	r3, [pc, #336]	; (8001c68 <IOT_PROCESS+0x270>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001b1e:	5cd2      	ldrb	r2, [r2, r3]
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <IOT_PROCESS+0x270>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3b02      	subs	r3, #2
 8001b26:	494b      	ldr	r1, [pc, #300]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	0089      	lsls	r1, r1, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <IOT_PROCESS+0x270>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	4945      	ldr	r1, [pc, #276]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	4619      	mov	r1, r3
 8001b44:	0089      	lsls	r1, r1, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	4619      	mov	r1, r3
 8001b4a:	0088      	lsls	r0, r1, #2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	440b      	add	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	3330      	adds	r3, #48	; 0x30
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <IOT_PROCESS+0x284>)
 8001b60:	701a      	strb	r2, [r3, #0]
           }break;
 8001b62:	bf00      	nop
       }
       switch (delta_GB)
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <IOT_PROCESS+0x27c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d00d      	beq.n	8001b88 <IOT_PROCESS+0x190>
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d021      	beq.n	8001bb4 <IOT_PROCESS+0x1bc>
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d146      	bne.n	8001c02 <IOT_PROCESS+0x20a>
       {
           case 0x01:
           {
        	   GG=Rxbuff3[B_BIT-1]-0X30;
 8001b74:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <IOT_PROCESS+0x274>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4a36      	ldr	r2, [pc, #216]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	3b30      	subs	r3, #48	; 0x30
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <IOT_PROCESS+0x288>)
 8001b84:	701a      	strb	r2, [r3, #0]
           }break;
 8001b86:	e03c      	b.n	8001c02 <IOT_PROCESS+0x20a>
           case 0x02:
           {
        	   GG=(Rxbuff3[B_BIT-1]-0X30)+(Rxbuff3[B_BIT-2]-0X30)*10;
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <IOT_PROCESS+0x274>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001b90:	5cd2      	ldrb	r2, [r2, r3]
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <IOT_PROCESS+0x274>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3b02      	subs	r3, #2
 8001b98:	492e      	ldr	r1, [pc, #184]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	0089      	lsls	r1, r1, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3b10      	subs	r3, #16
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <IOT_PROCESS+0x288>)
 8001bb0:	701a      	strb	r2, [r3, #0]
           }break;
 8001bb2:	e026      	b.n	8001c02 <IOT_PROCESS+0x20a>
           case 0x03:
           {
        	   GG=(Rxbuff3[B_BIT-1]-0X30)+(Rxbuff3[B_BIT-2]-0X30)*10+(Rxbuff3[B_BIT-3]-0X30)*100;
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <IOT_PROCESS+0x274>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001bbc:	5cd2      	ldrb	r2, [r2, r3]
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <IOT_PROCESS+0x274>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	3b02      	subs	r3, #2
 8001bc4:	4923      	ldr	r1, [pc, #140]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	0089      	lsls	r1, r1, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <IOT_PROCESS+0x274>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3b03      	subs	r3, #3
 8001bdc:	491d      	ldr	r1, [pc, #116]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	0089      	lsls	r1, r1, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	4619      	mov	r1, r3
 8001be8:	0088      	lsls	r0, r1, #2
 8001bea:	4619      	mov	r1, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	440b      	add	r3, r1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3330      	adds	r3, #48	; 0x30
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <IOT_PROCESS+0x288>)
 8001bfe:	701a      	strb	r2, [r3, #0]
           }break;
 8001c00:	bf00      	nop
       }
       switch (delta_BX)
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <IOT_PROCESS+0x280>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d00d      	beq.n	8001c26 <IOT_PROCESS+0x22e>
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d03c      	beq.n	8001c88 <IOT_PROCESS+0x290>
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d161      	bne.n	8001cd6 <IOT_PROCESS+0x2de>
       {
           case 0x01:
           {
        	   BB=Rxbuff3[Rx_LEN-1-1]-0X30;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <IOT_PROCESS+0x260>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b02      	subs	r3, #2
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	3b30      	subs	r3, #48	; 0x30
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <IOT_PROCESS+0x28c>)
 8001c22:	701a      	strb	r2, [r3, #0]
           }break;
 8001c24:	e057      	b.n	8001cd6 <IOT_PROCESS+0x2de>
           case 0x02:
           {
        	   BB=(Rxbuff3[Rx_LEN-1-1]-0X30)+(Rxbuff3[Rx_LEN-1-2]-0X30)*10;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <IOT_PROCESS+0x260>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	3b02      	subs	r3, #2
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001c2e:	5cd2      	ldrb	r2, [r2, r3]
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <IOT_PROCESS+0x260>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	4907      	ldr	r1, [pc, #28]	; (8001c54 <IOT_PROCESS+0x25c>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	0089      	lsls	r1, r1, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3b10      	subs	r3, #16
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <IOT_PROCESS+0x28c>)
 8001c4e:	701a      	strb	r2, [r3, #0]
           }break;
 8001c50:	e041      	b.n	8001cd6 <IOT_PROCESS+0x2de>
 8001c52:	bf00      	nop
 8001c54:	20000a98 	.word	0x20000a98
 8001c58:	20000628 	.word	0x20000628
 8001c5c:	20000168 	.word	0x20000168
 8001c60:	200007f5 	.word	0x200007f5
 8001c64:	20000758 	.word	0x20000758
 8001c68:	20000759 	.word	0x20000759
 8001c6c:	20000a55 	.word	0x20000a55
 8001c70:	200005e4 	.word	0x200005e4
 8001c74:	20000908 	.word	0x20000908
 8001c78:	2000083c 	.word	0x2000083c
 8001c7c:	20000dda 	.word	0x20000dda
 8001c80:	20000dd4 	.word	0x20000dd4
 8001c84:	20000ddc 	.word	0x20000ddc
           case 0x03:
           {
        	   BB=(Rxbuff3[Rx_LEN-1-1]-0X30)+(Rxbuff3[Rx_LEN-1-2]-0X30)*10+(Rxbuff3[Rx_LEN-1-3]-0X30)*100;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <IOT_PROCESS+0x310>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b02      	subs	r3, #2
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <IOT_PROCESS+0x314>)
 8001c90:	5cd2      	ldrb	r2, [r2, r3]
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <IOT_PROCESS+0x310>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3b03      	subs	r3, #3
 8001c98:	491c      	ldr	r1, [pc, #112]	; (8001d0c <IOT_PROCESS+0x314>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	0089      	lsls	r1, r1, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <IOT_PROCESS+0x310>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	4916      	ldr	r1, [pc, #88]	; (8001d0c <IOT_PROCESS+0x314>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	0089      	lsls	r1, r1, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	0088      	lsls	r0, r1, #2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3330      	adds	r3, #48	; 0x30
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <IOT_PROCESS+0x318>)
 8001cd2:	701a      	strb	r2, [r3, #0]
           }break;
 8001cd4:	bf00      	nop
       }

       TX_BUFF_WENXIN[0]=RR;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <IOT_PROCESS+0x31c>)
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <IOT_PROCESS+0x320>)
 8001cdc:	701a      	strb	r2, [r3, #0]
       TX_BUFF_WENXIN[1]=GG;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <IOT_PROCESS+0x324>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <IOT_PROCESS+0x320>)
 8001ce4:	705a      	strb	r2, [r3, #1]
       TX_BUFF_WENXIN[2]=BB;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <IOT_PROCESS+0x318>)
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <IOT_PROCESS+0x320>)
 8001cec:	709a      	strb	r2, [r3, #2]
 8001cee:	e007      	b.n	8001d00 <IOT_PROCESS+0x308>

    }
	else
	{
		Rx_count_UART3=0;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <IOT_PROCESS+0x328>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
		FLAG_RECEIVE_OK1=0;
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <IOT_PROCESS+0x32c>)
 8001cf8:	7813      	ldrb	r3, [r2, #0]
 8001cfa:	f36f 0382 	bfc	r3, #2, #1
 8001cfe:	7013      	strb	r3, [r2, #0]
	}
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000628 	.word	0x20000628
 8001d0c:	20000a98 	.word	0x20000a98
 8001d10:	20000ddc 	.word	0x20000ddc
 8001d14:	20000dda 	.word	0x20000dda
 8001d18:	20000014 	.word	0x20000014
 8001d1c:	20000dd4 	.word	0x20000dd4
 8001d20:	2000076f 	.word	0x2000076f
 8001d24:	20000168 	.word	0x20000168

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_MspInit+0x5c>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_MspInit+0x5c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6193      	str	r3, [r2, #24]
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_MspInit+0x5c>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_MspInit+0x5c>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_MspInit+0x5c>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_MspInit+0x5c>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_MspInit+0x60>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_MspInit+0x60>)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <HardFault_Handler+0x4>

08001daa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <MemManage_Handler+0x4>

08001db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <BusFault_Handler+0x4>

08001db6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <UsageFault_Handler+0x4>

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de4:	f000 fe12 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM2_IRQHandler+0x10>)
 8001df2:	f002 f83f 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000a14 	.word	0x20000a14

08001e00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM3_IRQHandler+0x10>)
 8001e06:	f002 f835 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200007b4 	.word	0x200007b4

08001e14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <TIM4_IRQHandler+0x10>)
 8001e1a:	f002 f82b 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200005e8 	.word	0x200005e8

08001e28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <USART3_IRQHandler+0x10>)
 8001e2e:	f002 fc0d 	bl	800464c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000062c 	.word	0x2000062c

08001e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <SystemInit+0x5c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <SystemInit+0x5c>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <SystemInit+0x5c>)
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4911      	ldr	r1, [pc, #68]	; (8001e98 <SystemInit+0x5c>)
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <SystemInit+0x60>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <SystemInit+0x5c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <SystemInit+0x5c>)
 8001e5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <SystemInit+0x5c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SystemInit+0x5c>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <SystemInit+0x5c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <SystemInit+0x5c>)
 8001e7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e7e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SystemInit+0x5c>)
 8001e82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SystemInit+0x64>)
 8001e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	f8ff0000 	.word	0xf8ff0000
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001eca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ece:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001ed8:	22c7      	movs	r2, #199	; 0xc7
 8001eda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee8:	4813      	ldr	r0, [pc, #76]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001eea:	f001 ff4b 	bl	8003d84 <HAL_TIM_Base_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ef4:	f7ff ff18 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001f06:	f002 f8bd 	bl	8004084 <HAL_TIM_ConfigClockSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f10:	f7ff ff0a 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_TIM2_Init+0x94>)
 8001f22:	f002 fa9b 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f2c:	f7ff fefc 	bl	8001d28 <Error_Handler>
  }

}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000a14 	.word	0x20000a14

08001f3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f50:	463b      	mov	r3, r7
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <MX_TIM3_Init+0x98>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f60:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f6e:	22c7      	movs	r2, #199	; 0xc7
 8001f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f7e:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f80:	f001 ff00 	bl	8003d84 <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001f8a:	f7ff fecd 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001f9c:	f002 f872 	bl	8004084 <HAL_TIM_ConfigClockSource>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f7ff febf 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <MX_TIM3_Init+0x94>)
 8001fb8:	f002 fa50 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001fc2:	f7ff feb1 	bl	8001d28 <Error_Handler>
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200007b4 	.word	0x200007b4
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <MX_TIM4_Init+0x94>)
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <MX_TIM4_Init+0x98>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM4_Init+0x94>)
 8001ffc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002000:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM4_Init+0x94>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM4_Init+0x94>)
 800200a:	22c7      	movs	r2, #199	; 0xc7
 800200c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_TIM4_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_TIM4_Init+0x94>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800201a:	4814      	ldr	r0, [pc, #80]	; (800206c <MX_TIM4_Init+0x94>)
 800201c:	f001 feb2 	bl	8003d84 <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002026:	f7ff fe7f 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <MX_TIM4_Init+0x94>)
 8002038:	f002 f824 	bl	8004084 <HAL_TIM_ConfigClockSource>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002042:	f7ff fe71 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <MX_TIM4_Init+0x94>)
 8002054:	f002 fa02 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800205e:	f7ff fe63 	bl	8001d28 <Error_Handler>
  }

}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200005e8 	.word	0x200005e8
 8002070:	40000800 	.word	0x40000800

08002074 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM5_Init+0x94>)
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <MX_TIM5_Init+0x98>)
 8002094:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7200-1;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_TIM5_Init+0x94>)
 8002098:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800209c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM5_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM5_Init+0x94>)
 80020a6:	22c7      	movs	r2, #199	; 0xc7
 80020a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_TIM5_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_TIM5_Init+0x94>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020b6:	4814      	ldr	r0, [pc, #80]	; (8002108 <MX_TIM5_Init+0x94>)
 80020b8:	f001 fe64 	bl	8003d84 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80020c2:	f7ff fe31 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_TIM5_Init+0x94>)
 80020d4:	f001 ffd6 	bl	8004084 <HAL_TIM_ConfigClockSource>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80020de:	f7ff fe23 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ea:	463b      	mov	r3, r7
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_TIM5_Init+0x94>)
 80020f0:	f002 f9b4 	bl	800445c <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80020fa:	f7ff fe15 	bl	8001d28 <Error_Handler>
  }

}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000770 	.word	0x20000770
 800210c:	40000c00 	.word	0x40000c00

08002110 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d114      	bne.n	800214c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2102      	movs	r1, #2
 800213e:	201c      	movs	r0, #28
 8002140:	f000 fd79 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002144:	201c      	movs	r0, #28
 8002146:	f000 fd92 	bl	8002c6e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800214a:	e044      	b.n	80021d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_TIM_Base_MspInit+0xd4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d114      	bne.n	8002180 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	201d      	movs	r0, #29
 8002174:	f000 fd5f 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002178:	201d      	movs	r0, #29
 800217a:	f000 fd78 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 800217e:	e02a      	b.n	80021d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_TIM_Base_MspInit+0xd8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d114      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201e      	movs	r0, #30
 80021a8:	f000 fd45 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021ac:	201e      	movs	r0, #30
 80021ae:	f000 fd5e 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 80021b2:	e010      	b.n	80021d6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_TIM_Base_MspInit+0xdc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10b      	bne.n	80021d6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_TIM_Base_MspInit+0xd0>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00

080021f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_USART2_UART_Init+0x4c>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <MX_USART2_UART_Init+0x50>)
 80021f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <MX_USART2_UART_Init+0x4c>)
 80021fc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_USART2_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <MX_USART2_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_USART2_UART_Init+0x4c>)
 8002216:	220c      	movs	r2, #12
 8002218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <MX_USART2_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_USART2_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_USART2_UART_Init+0x4c>)
 8002228:	f002 f96e 	bl	8004508 <HAL_UART_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002232:	f7ff fd79 	bl	8001d28 <Error_Handler>
  }

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000a58 	.word	0x20000a58
 8002240:	40004400 	.word	0x40004400

08002244 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <MX_USART3_UART_Init+0x50>)
 800224c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 8002250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 800226a:	220c      	movs	r2, #12
 800226c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_USART3_UART_Init+0x4c>)
 800227c:	f002 f944 	bl	8004508 <HAL_UART_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002286:	f7ff fd4f 	bl	8001d28 <Error_Handler>
  }

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000062c 	.word	0x2000062c
 8002294:	40004800 	.word	0x40004800

08002298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <HAL_UART_MspInit+0x108>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d130      	bne.n	800231a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 80022be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c2:	61d3      	str	r3, [r2, #28]
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022e8:	2304      	movs	r3, #4
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	4619      	mov	r1, r3
 80022fa:	482b      	ldr	r0, [pc, #172]	; (80023a8 <HAL_UART_MspInit+0x110>)
 80022fc:	f000 fdf6 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002300:	2308      	movs	r3, #8
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	4619      	mov	r1, r3
 8002312:	4825      	ldr	r0, [pc, #148]	; (80023a8 <HAL_UART_MspInit+0x110>)
 8002314:	f000 fdea 	bl	8002eec <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002318:	e03e      	b.n	8002398 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_UART_MspInit+0x114>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d139      	bne.n	8002398 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 800232a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_UART_MspInit+0x10c>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 0318 	add.w	r3, r7, #24
 8002366:	4619      	mov	r1, r3
 8002368:	4811      	ldr	r0, [pc, #68]	; (80023b0 <HAL_UART_MspInit+0x118>)
 800236a:	f000 fdbf 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800236e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	4619      	mov	r1, r3
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <HAL_UART_MspInit+0x118>)
 8002384:	f000 fdb2 	bl	8002eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2027      	movs	r0, #39	; 0x27
 800238e:	f000 fc52 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002392:	2027      	movs	r0, #39	; 0x27
 8002394:	f000 fc6b 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40004400 	.word	0x40004400
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010800 	.word	0x40010800
 80023ac:	40004800 	.word	0x40004800
 80023b0:	40010c00 	.word	0x40010c00

080023b4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <MX_USB_PCD_Init+0x40>)
 80023bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023c0:	2208      	movs	r2, #8
 80023c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023c6:	2202      	movs	r2, #2
 80023c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80023dc:	4804      	ldr	r0, [pc, #16]	; (80023f0 <MX_USB_PCD_Init+0x3c>)
 80023de:	f000 ff1e 	bl	800321e <HAL_PCD_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80023e8:	f7ff fc9e 	bl	8001d28 <Error_Handler>
  }

}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000b68 	.word	0x20000b68
 80023f4:	40005c00 	.word	0x40005c00

080023f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_PCD_MspInit+0x34>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10b      	bne.n	8002422 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_PCD_MspInit+0x38>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_PCD_MspInit+0x38>)
 8002410:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_PCD_MspInit+0x38>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40005c00 	.word	0x40005c00
 8002430:	40021000 	.word	0x40021000

08002434 <reset_ws2812>:
}
//=============================================
//reset_ws2812
//=============================================
void reset_ws2812()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	CLR_WS2812DATA_ME;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <reset_ws2812+0x1c>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <reset_ws2812+0x1c>)
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	60d3      	str	r3, [r2, #12]
	delay_us1(300);
 8002444:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002448:	f7fe feb8 	bl	80011bc <delay_us1>
	//SET_WS2812DATA_ME;
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40011000 	.word	0x40011000

08002454 <reset_ws2812_1>:
void reset_ws2812_1()
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	CLR_WS2812DATA;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <reset_ws2812_1+0x1c>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <reset_ws2812_1+0x1c>)
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	60d3      	str	r3, [r2, #12]
	delay_us1(300);
 8002464:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002468:	f7fe fea8 	bl	80011bc <delay_us1>
	//SET_WS2812DATA_ME;
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40011000 	.word	0x40011000

08002474 <WS2812_BYTE_1>:
        SET_WS2812DATA_ME;
}
*/
/***********************************************************************/
void WS2812_BYTE_1(uint8_t x)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
	uint8_t y;
	for(y=0;y<8;y++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e0bb      	b.n	80025fc <WS2812_BYTE_1+0x188>
	{
		if(x&0x80)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	da70      	bge.n	800256e <WS2812_BYTE_1+0xfa>
		{
            SET_WS2812DATA;
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <WS2812_BYTE_1+0x19c>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a5f      	ldr	r2, [pc, #380]	; (8002610 <WS2812_BYTE_1+0x19c>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
            CLR_WS2812DATA;
 80024fc:	4b44      	ldr	r3, [pc, #272]	; (8002610 <WS2812_BYTE_1+0x19c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a43      	ldr	r2, [pc, #268]	; (8002610 <WS2812_BYTE_1+0x19c>)
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	e040      	b.n	80025f0 <WS2812_BYTE_1+0x17c>
		}
		else
		{
            SET_WS2812DATA;
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <WS2812_BYTE_1+0x19c>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a27      	ldr	r2, [pc, #156]	; (8002610 <WS2812_BYTE_1+0x19c>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	bf00      	nop
            CLR_WS2812DATA;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <WS2812_BYTE_1+0x19c>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <WS2812_BYTE_1+0x19c>)
 8002586:	f023 0302 	bic.w	r3, r3, #2
 800258a:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	bf00      	nop
 800259e:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
		}
		x<<=1;
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	71fb      	strb	r3, [r7, #7]
	for(y=0;y<8;y++)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3301      	adds	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b07      	cmp	r3, #7
 8002600:	f67f af40 	bls.w	8002484 <WS2812_BYTE_1+0x10>
	}
    //delay50us();
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000

08002614 <WS2812_BYTE>:
/***********************************************************************/
void WS2812_BYTE(uint8_t x)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	uint8_t y;
	for(y=0;y<8;y++)
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e0bb      	b.n	800279c <WS2812_BYTE+0x188>
	{
		if(x&0x80)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da70      	bge.n	800270e <WS2812_BYTE+0xfa>
		{
            SET_WS2812DATA_ME;
 800262c:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <WS2812_BYTE+0x19c>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a5f      	ldr	r2, [pc, #380]	; (80027b0 <WS2812_BYTE+0x19c>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800266a:	bf00      	nop
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	bf00      	nop
            CLR_WS2812DATA_ME;
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <WS2812_BYTE+0x19c>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a43      	ldr	r2, [pc, #268]	; (80027b0 <WS2812_BYTE+0x19c>)
 80026a2:	f023 0304 	bic.w	r3, r3, #4
 80026a6:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	e040      	b.n	8002790 <WS2812_BYTE+0x17c>
		}
		else
		{
            SET_WS2812DATA_ME;
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <WS2812_BYTE+0x19c>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <WS2812_BYTE+0x19c>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	bf00      	nop
            CLR_WS2812DATA_ME;
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <WS2812_BYTE+0x19c>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <WS2812_BYTE+0x19c>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	bf00      	nop
		}
		x<<=1;
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	71fb      	strb	r3, [r7, #7]
	for(y=0;y<8;y++)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b07      	cmp	r3, #7
 80027a0:	f67f af40 	bls.w	8002624 <WS2812_BYTE+0x10>
	}
    //delay50us();
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40011000 	.word	0x40011000

080027b4 <send_single_data>:
//============================================
//发送RGB数据
//============================================
void send_single_data()  //数据格式G7-G0-R7-R0-B7-B0
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
   LED_DAT=GG;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <send_single_data+0x40>)
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <send_single_data+0x44>)
 80027be:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE(LED_DAT);
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <send_single_data+0x44>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff25 	bl	8002614 <WS2812_BYTE>
   LED_DAT=RR;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <send_single_data+0x48>)
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <send_single_data+0x44>)
 80027d0:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE(LED_DAT);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <send_single_data+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff1c 	bl	8002614 <WS2812_BYTE>
   LED_DAT=BB;
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <send_single_data+0x4c>)
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <send_single_data+0x44>)
 80027e2:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE(LED_DAT);
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <send_single_data+0x44>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff13 	bl	8002614 <WS2812_BYTE>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000dd4 	.word	0x20000dd4
 80027f8:	20000dd6 	.word	0x20000dd6
 80027fc:	20000dda 	.word	0x20000dda
 8002800:	20000ddc 	.word	0x20000ddc

08002804 <send_string_data>:
void  send_string_data()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i=0;i<3;i++)
 800280a:	2300      	movs	r3, #0
 800280c:	71fb      	strb	r3, [r7, #7]
 800280e:	e004      	b.n	800281a <send_string_data+0x16>
    {
        send_single_data();
 8002810:	f7ff ffd0 	bl	80027b4 <send_single_data>
    for(i=0;i<3;i++)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	3301      	adds	r3, #1
 8002818:	71fb      	strb	r3, [r7, #7]
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d9f7      	bls.n	8002810 <send_string_data+0xc>
    }
    reset_ws2812();
 8002820:	f7ff fe08 	bl	8002434 <reset_ws2812>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <send_single_data1>:
//============================================
//发送RGB数据
//============================================
void send_single_data1()  //数据格式G7-G0-R7-R0-B7-B0
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
   LED_DAT=GG;
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <send_single_data1+0x40>)
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <send_single_data1+0x44>)
 8002836:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE_1(LED_DAT);
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <send_single_data1+0x44>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fe19 	bl	8002474 <WS2812_BYTE_1>
   LED_DAT=RR;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <send_single_data1+0x48>)
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <send_single_data1+0x44>)
 8002848:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE_1(LED_DAT);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <send_single_data1+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fe10 	bl	8002474 <WS2812_BYTE_1>
   LED_DAT=BB;
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <send_single_data1+0x4c>)
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <send_single_data1+0x44>)
 800285a:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE_1(LED_DAT);
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <send_single_data1+0x44>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fe07 	bl	8002474 <WS2812_BYTE_1>
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000dd4 	.word	0x20000dd4
 8002870:	20000dd6 	.word	0x20000dd6
 8002874:	20000dda 	.word	0x20000dda
 8002878:	20000ddc 	.word	0x20000ddc

0800287c <send_string_data1>:
   WS2812_BYTE_1(RA);
   //LED_DAT=BB;
   WS2812_BYTE_1(BA);
}
void  send_string_data1()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i=0;i<72;i++)
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	e004      	b.n	8002892 <send_string_data1+0x16>
    {
        send_single_data1();
 8002888:	f7ff ffd0 	bl	800282c <send_single_data1>
    for(i=0;i<72;i++)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	3301      	adds	r3, #1
 8002890:	71fb      	strb	r3, [r7, #7]
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b47      	cmp	r3, #71	; 0x47
 8002896:	d9f7      	bls.n	8002888 <send_string_data1+0xc>
    }
    reset_ws2812_1();
 8002898:	f7ff fddc 	bl	8002454 <reset_ws2812_1>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <RGB_close>:
    send_string_data1();
    for(t=speed1;t>0;t--)  HAL_Delay(100);

}
void RGB_close() //RGB闪烁
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
    uint16_t t;
    RR=0; GG=0; BB=0;
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <RGB_close+0x3c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <RGB_close+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <RGB_close+0x44>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    send_string_data();
 80028bc:	f7ff ffa2 	bl	8002804 <send_string_data>
    for(t=speed1;t>0;t--)HAL_Delay(100);
 80028c0:	2301      	movs	r3, #1
 80028c2:	80fb      	strh	r3, [r7, #6]
 80028c4:	e005      	b.n	80028d2 <RGB_close+0x2e>
 80028c6:	2064      	movs	r0, #100	; 0x64
 80028c8:	f000 f8bc 	bl	8002a44 <HAL_Delay>
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	80fb      	strh	r3, [r7, #6]
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f6      	bne.n	80028c6 <RGB_close+0x22>

}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000dda 	.word	0x20000dda
 80028e4:	20000dd4 	.word	0x20000dd4
 80028e8:	20000ddc 	.word	0x20000ddc

080028ec <RGB_close1>:
void RGB_close1() //RGB闪烁
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
    uint16_t t;
    RR=0; GG=0; BB=0;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <RGB_close1+0x3c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <RGB_close1+0x40>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <RGB_close1+0x44>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
    send_string_data1();
 8002904:	f7ff ffba 	bl	800287c <send_string_data1>
    for(t=speed1;t>0;t--)HAL_Delay(100);
 8002908:	2301      	movs	r3, #1
 800290a:	80fb      	strh	r3, [r7, #6]
 800290c:	e005      	b.n	800291a <RGB_close1+0x2e>
 800290e:	2064      	movs	r0, #100	; 0x64
 8002910:	f000 f898 	bl	8002a44 <HAL_Delay>
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	3b01      	subs	r3, #1
 8002918:	80fb      	strh	r3, [r7, #6]
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f6      	bne.n	800290e <RGB_close1+0x22>

}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000dda 	.word	0x20000dda
 800292c:	20000dd4 	.word	0x20000dd4
 8002930:	20000ddc 	.word	0x20000ddc

08002934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002934:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002936:	e003      	b.n	8002940 <LoopCopyDataInit>

08002938 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800293a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800293c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800293e:	3104      	adds	r1, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002940:	480a      	ldr	r0, [pc, #40]	; (800296c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002944:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002946:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002948:	d3f6      	bcc.n	8002938 <CopyDataInit>
  ldr r2, =_sbss
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800294c:	e002      	b.n	8002954 <LoopFillZerobss>

0800294e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002950:	f842 3b04 	str.w	r3, [r2], #4

08002954 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002956:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002958:	d3f9      	bcc.n	800294e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800295a:	f7ff fa6f 	bl	8001e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295e:	f002 f9fb 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002962:	f7fe fc69 	bl	8001238 <main>
  bx lr
 8002966:	4770      	bx	lr
  ldr r3, =_sidata
 8002968:	0800ee1c 	.word	0x0800ee1c
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002970:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8002974:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8002978:	20000de4 	.word	0x20000de4

0800297c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC1_2_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_Init+0x28>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <HAL_Init+0x28>)
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f945 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f808 	bl	80029ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff f9ca 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000

080029ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x54>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_InitTick+0x58>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f95d 	bl	8002c8a <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f000 f925 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_InitTick+0x5c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2000001c 	.word	0x2000001c
 8002a04:	20000024 	.word	0x20000024
 8002a08:	20000020 	.word	0x20000020

08002a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_IncTick+0x1c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_IncTick+0x20>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_IncTick+0x20>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000024 	.word	0x20000024
 8002a2c:	20000de0 	.word	0x20000de0

08002a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_GetTick+0x10>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	20000de0 	.word	0x20000de0

08002a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d005      	beq.n	8002a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_Delay+0x40>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6a:	bf00      	nop
 8002a6c:	f7ff ffe0 	bl	8002a30 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d8f7      	bhi.n	8002a6c <HAL_Delay+0x28>
  {
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000024 	.word	0x20000024

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <__NVIC_EnableIRQ+0x34>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff90 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff2d 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff42 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff90 	bl	8002b78 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5f 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff35 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d106      	bne.n	8002cc0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002cbe:	e005      	b.n	8002ccc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d005      	beq.n	8002cfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	e0d6      	b.n	8002eac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 020e 	bic.w	r2, r2, #14
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b64      	ldr	r3, [pc, #400]	; (8002eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d958      	bls.n	8002ddc <HAL_DMA_Abort_IT+0x100>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_DMA_Abort_IT+0x1e0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04f      	beq.n	8002dd4 <HAL_DMA_Abort_IT+0xf8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a61      	ldr	r2, [pc, #388]	; (8002ec0 <HAL_DMA_Abort_IT+0x1e4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d048      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0xf4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a60      	ldr	r2, [pc, #384]	; (8002ec4 <HAL_DMA_Abort_IT+0x1e8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d040      	beq.n	8002dca <HAL_DMA_Abort_IT+0xee>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5e      	ldr	r2, [pc, #376]	; (8002ec8 <HAL_DMA_Abort_IT+0x1ec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d038      	beq.n	8002dc4 <HAL_DMA_Abort_IT+0xe8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_DMA_Abort_IT+0x1f0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d030      	beq.n	8002dbe <HAL_DMA_Abort_IT+0xe2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5b      	ldr	r2, [pc, #364]	; (8002ed0 <HAL_DMA_Abort_IT+0x1f4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d028      	beq.n	8002db8 <HAL_DMA_Abort_IT+0xdc>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d020      	beq.n	8002db2 <HAL_DMA_Abort_IT+0xd6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_DMA_Abort_IT+0x1f8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_DMA_Abort_IT+0xd2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_DMA_Abort_IT+0x1fc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d012      	beq.n	8002daa <HAL_DMA_Abort_IT+0xce>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a54      	ldr	r2, [pc, #336]	; (8002edc <HAL_DMA_Abort_IT+0x200>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00a      	beq.n	8002da4 <HAL_DMA_Abort_IT+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a53      	ldr	r2, [pc, #332]	; (8002ee0 <HAL_DMA_Abort_IT+0x204>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d102      	bne.n	8002d9e <HAL_DMA_Abort_IT+0xc2>
 8002d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9c:	e01b      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da2:	e018      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da8:	e015      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002daa:	2310      	movs	r3, #16
 8002dac:	e013      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e011      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db6:	e00e      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dbc:	e00b      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc2:	e008      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc8:	e005      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dce:	e002      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	e000      	b.n	8002dd6 <HAL_DMA_Abort_IT+0xfa>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <HAL_DMA_Abort_IT+0x208>)
 8002dd8:	6053      	str	r3, [r2, #4]
 8002dda:	e057      	b.n	8002e8c <HAL_DMA_Abort_IT+0x1b0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a36      	ldr	r2, [pc, #216]	; (8002ebc <HAL_DMA_Abort_IT+0x1e0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d04f      	beq.n	8002e86 <HAL_DMA_Abort_IT+0x1aa>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <HAL_DMA_Abort_IT+0x1e4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d048      	beq.n	8002e82 <HAL_DMA_Abort_IT+0x1a6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <HAL_DMA_Abort_IT+0x1e8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d040      	beq.n	8002e7c <HAL_DMA_Abort_IT+0x1a0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <HAL_DMA_Abort_IT+0x1ec>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d038      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x19a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <HAL_DMA_Abort_IT+0x1f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d030      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x194>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <HAL_DMA_Abort_IT+0x1f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d028      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x18e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d020      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x188>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <HAL_DMA_Abort_IT+0x1f8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d019      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x184>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <HAL_DMA_Abort_IT+0x1fc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d012      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x180>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a28      	ldr	r2, [pc, #160]	; (8002edc <HAL_DMA_Abort_IT+0x200>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00a      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x17a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <HAL_DMA_Abort_IT+0x204>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d102      	bne.n	8002e50 <HAL_DMA_Abort_IT+0x174>
 8002e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4e:	e01b      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e54:	e018      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5a:	e015      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	e013      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e011      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e68:	e00e      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e6e:	e00b      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e74:	e008      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7a:	e005      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e80:	e002      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e82:	2310      	movs	r3, #16
 8002e84:	e000      	b.n	8002e88 <HAL_DMA_Abort_IT+0x1ac>
 8002e86:	2301      	movs	r3, #1
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_DMA_Abort_IT+0x20c>)
 8002e8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
    } 
  }
  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40020080 	.word	0x40020080
 8002ebc:	40020008 	.word	0x40020008
 8002ec0:	4002001c 	.word	0x4002001c
 8002ec4:	40020030 	.word	0x40020030
 8002ec8:	40020044 	.word	0x40020044
 8002ecc:	40020058 	.word	0x40020058
 8002ed0:	4002006c 	.word	0x4002006c
 8002ed4:	40020408 	.word	0x40020408
 8002ed8:	4002041c 	.word	0x4002041c
 8002edc:	40020430 	.word	0x40020430
 8002ee0:	40020444 	.word	0x40020444
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020000 	.word	0x40020000

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e133      	b.n	8003168 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f00:	2201      	movs	r2, #1
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8122 	bne.w	8003162 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d034      	beq.n	8002f90 <HAL_GPIO_Init+0xa4>
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d80d      	bhi.n	8002f46 <HAL_GPIO_Init+0x5a>
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d02b      	beq.n	8002f86 <HAL_GPIO_Init+0x9a>
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d804      	bhi.n	8002f3c <HAL_GPIO_Init+0x50>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d031      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d01c      	beq.n	8002f74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f3a:	e048      	b.n	8002fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d043      	beq.n	8002fc8 <HAL_GPIO_Init+0xdc>
 8002f40:	2b11      	cmp	r3, #17
 8002f42:	d01b      	beq.n	8002f7c <HAL_GPIO_Init+0x90>
          break;
 8002f44:	e043      	b.n	8002fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f46:	4a8f      	ldr	r2, [pc, #572]	; (8003184 <HAL_GPIO_Init+0x298>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d026      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
 8002f4c:	4a8d      	ldr	r2, [pc, #564]	; (8003184 <HAL_GPIO_Init+0x298>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d806      	bhi.n	8002f60 <HAL_GPIO_Init+0x74>
 8002f52:	4a8d      	ldr	r2, [pc, #564]	; (8003188 <HAL_GPIO_Init+0x29c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d020      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
 8002f58:	4a8c      	ldr	r2, [pc, #560]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
          break;
 8002f5e:	e036      	b.n	8002fce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f60:	4a8b      	ldr	r2, [pc, #556]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
 8002f66:	4a8b      	ldr	r2, [pc, #556]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d016      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
 8002f6c:	4a8a      	ldr	r2, [pc, #552]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_GPIO_Init+0xae>
          break;
 8002f72:	e02c      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	623b      	str	r3, [r7, #32]
          break;
 8002f7a:	e028      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	3304      	adds	r3, #4
 8002f82:	623b      	str	r3, [r7, #32]
          break;
 8002f84:	e023      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	623b      	str	r3, [r7, #32]
          break;
 8002f8e:	e01e      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	330c      	adds	r3, #12
 8002f96:	623b      	str	r3, [r7, #32]
          break;
 8002f98:	e019      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	623b      	str	r3, [r7, #32]
          break;
 8002fa6:	e012      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	611a      	str	r2, [r3, #16]
          break;
 8002fba:	e008      	b.n	8002fce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	615a      	str	r2, [r3, #20]
          break;
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
          break;
 8002fcc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2bff      	cmp	r3, #255	; 0xff
 8002fd2:	d801      	bhi.n	8002fd8 <HAL_GPIO_Init+0xec>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	e001      	b.n	8002fdc <HAL_GPIO_Init+0xf0>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2bff      	cmp	r3, #255	; 0xff
 8002fe2:	d802      	bhi.n	8002fea <HAL_GPIO_Init+0xfe>
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_Init+0x104>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	3b08      	subs	r3, #8
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	210f      	movs	r1, #15
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	401a      	ands	r2, r3
 8003002:	6a39      	ldr	r1, [r7, #32]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	431a      	orrs	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a2 	beq.w	8003162 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	4a5e      	ldr	r2, [pc, #376]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6193      	str	r3, [r2, #24]
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_GPIO_Init+0x2b0>)
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003036:	4a5a      	ldr	r2, [pc, #360]	; (80031a0 <HAL_GPIO_Init+0x2b4>)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003042:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	220f      	movs	r2, #15
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01f      	beq.n	80030a2 <HAL_GPIO_Init+0x1b6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_GPIO_Init+0x1b2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4f      	ldr	r2, [pc, #316]	; (80031ac <HAL_GPIO_Init+0x2c0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_Init+0x1ae>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <HAL_GPIO_Init+0x2c4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00d      	beq.n	8003096 <HAL_GPIO_Init+0x1aa>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4d      	ldr	r2, [pc, #308]	; (80031b4 <HAL_GPIO_Init+0x2c8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_GPIO_Init+0x1a6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_GPIO_Init+0x1a2>
 800308a:	2305      	movs	r3, #5
 800308c:	e00a      	b.n	80030a4 <HAL_GPIO_Init+0x1b8>
 800308e:	2306      	movs	r3, #6
 8003090:	e008      	b.n	80030a4 <HAL_GPIO_Init+0x1b8>
 8003092:	2304      	movs	r3, #4
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x1b8>
 8003096:	2303      	movs	r3, #3
 8003098:	e004      	b.n	80030a4 <HAL_GPIO_Init+0x1b8>
 800309a:	2302      	movs	r3, #2
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_Init+0x1b8>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x1b8>
 80030a2:	2300      	movs	r3, #0
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	f002 0203 	and.w	r2, r2, #3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4093      	lsls	r3, r2
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030b4:	493a      	ldr	r1, [pc, #232]	; (80031a0 <HAL_GPIO_Init+0x2b4>)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	493a      	ldr	r1, [pc, #232]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
 80030da:	e006      	b.n	80030ea <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030dc:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	4935      	ldr	r1, [pc, #212]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4930      	ldr	r1, [pc, #192]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
 8003102:	e006      	b.n	8003112 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	43db      	mvns	r3, r3
 800310c:	492b      	ldr	r1, [pc, #172]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800310e:	4013      	ands	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4926      	ldr	r1, [pc, #152]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
 800312a:	e006      	b.n	800313a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	43db      	mvns	r3, r3
 8003134:	4921      	ldr	r1, [pc, #132]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003136:	4013      	ands	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	491c      	ldr	r1, [pc, #112]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
 8003152:	e006      	b.n	8003162 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	43db      	mvns	r3, r3
 800315c:	4917      	ldr	r1, [pc, #92]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800315e:	4013      	ands	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	3301      	adds	r3, #1
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	f47f aec4 	bne.w	8002f00 <HAL_GPIO_Init+0x14>
  }
}
 8003178:	bf00      	nop
 800317a:	372c      	adds	r7, #44	; 0x2c
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	10210000 	.word	0x10210000
 8003188:	10110000 	.word	0x10110000
 800318c:	10120000 	.word	0x10120000
 8003190:	10310000 	.word	0x10310000
 8003194:	10320000 	.word	0x10320000
 8003198:	10220000 	.word	0x10220000
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40011400 	.word	0x40011400
 80031b4:	40011800 	.word	0x40011800
 80031b8:	40011c00 	.word	0x40011c00
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	807b      	strh	r3, [r7, #2]
 80031fa:	4613      	mov	r3, r2
 80031fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031fe:	787b      	ldrb	r3, [r7, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800320a:	e003      	b.n	8003214 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	041a      	lsls	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	611a      	str	r2, [r3, #16]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800321e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003220:	b08b      	sub	sp, #44	; 0x2c
 8003222:	af06      	add	r7, sp, #24
 8003224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d3      	b.n	80033d8 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff f8d7 	bl	80023f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fd27 	bl	8004caa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	687e      	ldr	r6, [r7, #4]
 8003264:	466d      	mov	r5, sp
 8003266:	f106 0410 	add.w	r4, r6, #16
 800326a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	602b      	str	r3, [r5, #0]
 8003272:	1d33      	adds	r3, r6, #4
 8003274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f001 fcf0 	bl	8004c5c <USB_CoreInit>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0a4      	b.n	80033d8 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fd24 	bl	8004ce2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e035      	b.n	800330c <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	015b      	lsls	r3, r3, #5
 80032a6:	4413      	add	r3, r2
 80032a8:	3329      	adds	r3, #41	; 0x29
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	4413      	add	r3, r2
 80032b6:	3328      	adds	r3, #40	; 0x28
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	b291      	uxth	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	015b      	lsls	r3, r3, #5
 80032c6:	4413      	add	r3, r2
 80032c8:	3336      	adds	r3, #54	; 0x36
 80032ca:	460a      	mov	r2, r1
 80032cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	015b      	lsls	r3, r3, #5
 80032d4:	4413      	add	r3, r2
 80032d6:	332b      	adds	r3, #43	; 0x2b
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	015b      	lsls	r3, r3, #5
 80032e2:	4413      	add	r3, r2
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	4413      	add	r3, r2
 80032f2:	333c      	adds	r3, #60	; 0x3c
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	3302      	adds	r3, #2
 80032fe:	015b      	lsls	r3, r3, #5
 8003300:	4413      	add	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	3301      	adds	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	d3c4      	bcc.n	80032a0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e031      	b.n	8003380 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	015b      	lsls	r3, r3, #5
 8003322:	4413      	add	r3, r2
 8003324:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	015b      	lsls	r3, r3, #5
 8003332:	4413      	add	r3, r2
 8003334:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	015b      	lsls	r3, r3, #5
 8003342:	4413      	add	r3, r2
 8003344:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	015b      	lsls	r3, r3, #5
 8003352:	4413      	add	r3, r2
 8003354:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	015b      	lsls	r3, r3, #5
 8003362:	4413      	add	r3, r2
 8003364:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	330a      	adds	r3, #10
 8003372:	015b      	lsls	r3, r3, #5
 8003374:	4413      	add	r3, r2
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	3301      	adds	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d3c8      	bcc.n	800331c <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	687e      	ldr	r6, [r7, #4]
 8003392:	466d      	mov	r5, sp
 8003394:	f106 0410 	add.w	r4, r6, #16
 8003398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800339a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	602b      	str	r3, [r5, #0]
 80033a0:	1d33      	adds	r3, r6, #4
 80033a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f001 fca8 	bl	8004cfa <USB_DevInit>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e00d      	b.n	80033d8 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 fcb6 	bl	8004d42 <USB_DevDisconnect>

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e26c      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8087 	beq.w	800350e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b04      	cmp	r3, #4
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800340c:	4b8f      	ldr	r3, [pc, #572]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d112      	bne.n	800343e <HAL_RCC_OscConfig+0x5e>
 8003418:	4b8c      	ldr	r3, [pc, #560]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d10b      	bne.n	800343e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003426:	4b89      	ldr	r3, [pc, #548]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d06c      	beq.n	800350c <HAL_RCC_OscConfig+0x12c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d168      	bne.n	800350c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e246      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x76>
 8003448:	4b80      	ldr	r3, [pc, #512]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7f      	ldr	r2, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e02e      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b7b      	ldr	r3, [pc, #492]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7a      	ldr	r2, [pc, #488]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b78      	ldr	r3, [pc, #480]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0xbc>
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a71      	ldr	r2, [pc, #452]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7ff fab8 	bl	8002a30 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff fab4 	bl	8002a30 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1fa      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe4>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7ff faa4 	bl	8002a30 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7ff faa0 	bl	8002a30 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1e6      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x10c>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d063      	beq.n	80035e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800351a:	4b4c      	ldr	r3, [pc, #304]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x18c>
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x176>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1ba      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4939      	ldr	r1, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	e03a      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7ff fa59 	bl	8002a30 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003582:	f7ff fa55 	bl	8002a30 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e19b      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4927      	ldr	r1, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7ff fa38 	bl	8002a30 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c4:	f7ff fa34 	bl	8002a30 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e17a      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d03a      	beq.n	8003664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d019      	beq.n	800362a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7ff fa18 	bl	8002a30 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003604:	f7ff fa14 	bl	8002a30 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e15a      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003622:	2001      	movs	r0, #1
 8003624:	f000 fada 	bl	8003bdc <RCC_Delay>
 8003628:	e01c      	b.n	8003664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003630:	f7ff f9fe 	bl	8002a30 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003636:	e00f      	b.n	8003658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003638:	f7ff f9fa 	bl	8002a30 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d908      	bls.n	8003658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e140      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	42420000 	.word	0x42420000
 8003654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b9e      	ldr	r3, [pc, #632]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e9      	bne.n	8003638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a6 	beq.w	80037be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b97      	ldr	r3, [pc, #604]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b94      	ldr	r3, [pc, #592]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a93      	ldr	r2, [pc, #588]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b91      	ldr	r3, [pc, #580]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b8e      	ldr	r3, [pc, #568]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a8a      	ldr	r2, [pc, #552]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b6:	f7ff f9bb 	bl	8002a30 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7ff f9b7 	bl	8002a30 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	; 0x64
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0fd      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x312>
 80036e4:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a7a      	ldr	r2, [pc, #488]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	e02d      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x334>
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a75      	ldr	r2, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a72      	ldr	r2, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	e01c      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d10c      	bne.n	8003736 <HAL_RCC_OscConfig+0x356>
 800371c:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a6c      	ldr	r2, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4a69      	ldr	r2, [pc, #420]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	e00b      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a66      	ldr	r2, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6213      	str	r3, [r2, #32]
 8003742:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a63      	ldr	r2, [pc, #396]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7ff f96b 	bl	8002a30 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7ff f967 	bl	8002a30 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0ab      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ee      	beq.n	800375e <HAL_RCC_OscConfig+0x37e>
 8003780:	e014      	b.n	80037ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7ff f955 	bl	8002a30 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7ff f951 	bl	8002a30 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e095      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ee      	bne.n	800378a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8081 	beq.w	80038ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d061      	beq.n	8003898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d146      	bne.n	800386a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_OscConfig+0x4fc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7ff f925 	bl	8002a30 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7ff f921 	bl	8002a30 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e067      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d108      	bne.n	8003824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	492d      	ldr	r1, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a19      	ldr	r1, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	430b      	orrs	r3, r1
 8003836:	4927      	ldr	r1, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x4fc>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7ff f8f5 	bl	8002a30 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7ff f8f1 	bl	8002a30 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e037      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x46a>
 8003868:	e02f      	b.n	80038ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <HAL_RCC_OscConfig+0x4fc>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7ff f8de 	bl	8002a30 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7ff f8da 	bl	8002a30 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e020      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x498>
 8003896:	e018      	b.n	80038ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e013      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
 80038dc:	42420060 	.word	0x42420060

080038e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0d0      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800395e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d040      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e073      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06b      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4936      	ldr	r1, [pc, #216]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7ff f82e 	bl	8002a30 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7ff f82a 	bl	8002a30 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e053      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d210      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4922      	ldr	r1, [pc, #136]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	fa21 f303 	lsr.w	r3, r1, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1cc>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe ff8c 	bl	80029ac <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	0800edfc 	.word	0x0800edfc
 8003aac:	2000001c 	.word	0x2000001c
 8003ab0:	20000020 	.word	0x20000020

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	b490      	push	{r4, r7}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003abc:	1d3c      	adds	r4, r7, #4
 8003abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x46>
 8003af2:	e02d      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003af6:	623b      	str	r3, [r7, #32]
      break;
 8003af8:	e02d      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	0c9b      	lsrs	r3, r3, #18
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b06:	4413      	add	r3, r2
 8003b08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c5b      	lsrs	r3, r3, #17
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b26:	4413      	add	r3, r2
 8003b28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b32:	fb02 f203 	mul.w	r2, r2, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	e004      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	623b      	str	r3, [r7, #32]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b52:	623b      	str	r3, [r7, #32]
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	6a3b      	ldr	r3, [r7, #32]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc90      	pop	{r4, r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	08004dc8 	.word	0x08004dc8
 8003b68:	08004dd8 	.word	0x08004dd8
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	003d0900 	.word	0x003d0900

08003b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	2000001c 	.word	0x2000001c

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff2 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003b94:	4601      	mov	r1, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4a03      	ldr	r2, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5cd3      	ldrb	r3, [r2, r3]
 8003ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800ee0c 	.word	0x0800ee0c

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffde 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4a03      	ldr	r2, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5cd3      	ldrb	r3, [r2, r3]
 8003bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	0800ee0c 	.word	0x0800ee0c

08003bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <RCC_Delay+0x34>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <RCC_Delay+0x38>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0a5b      	lsrs	r3, r3, #9
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bf8:	bf00      	nop
  }
  while (Delay --);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <RCC_Delay+0x1c>
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	2000001c 	.word	0x2000001c
 8003c14:	10624dd3 	.word	0x10624dd3

08003c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c38:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10d      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4a4b      	ldr	r2, [pc, #300]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	61d3      	str	r3, [r2, #28]
 8003c50:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d118      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c78:	f7fe feda 	bl	8002a30 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	e008      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c80:	f7fe fed6 	bl	8002a30 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06d      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02e      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d027      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd2:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fea5 	bl	8002a30 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fe fea1 	bl	8002a30 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ee      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4917      	ldr	r1, [pc, #92]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	490b      	ldr	r1, [pc, #44]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42420440 	.word	0x42420440

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e01d      	b.n	8003dd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe f9b0 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fa3a 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b06      	cmp	r3, #6
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10f      	bne.n	8003e68 <HAL_TIM_Base_Stop_IT+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	f240 4344 	movw	r3, #1092	; 0x444
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_Base_Stop_IT+0x48>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9a4 	bl	8004204 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f997 	bl	80041f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f9a6 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f97a 	bl	8004204 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f96d 	bl	80041f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f97c 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f950 	bl	8004204 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f943 	bl	80041f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f952 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f926 	bl	8004204 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f919 	bl	80041f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f928 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fa24 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa69 	bl	80044f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8ec 	bl	8004228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0220 	mvn.w	r2, #32
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa34 	bl	80044e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIM_ConfigClockSource+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e0a6      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x166>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d067      	beq.n	80041a4 <HAL_TIM_ConfigClockSource+0x120>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d80b      	bhi.n	80040f0 <HAL_TIM_ConfigClockSource+0x6c>
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d073      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0x140>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d802      	bhi.n	80040e6 <HAL_TIM_ConfigClockSource+0x62>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d06f      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040e4:	e078      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d06c      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0x140>
 80040ea:	2b30      	cmp	r3, #48	; 0x30
 80040ec:	d06a      	beq.n	80041c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040ee:	e073      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040f0:	2b70      	cmp	r3, #112	; 0x70
 80040f2:	d00d      	beq.n	8004110 <HAL_TIM_ConfigClockSource+0x8c>
 80040f4:	2b70      	cmp	r3, #112	; 0x70
 80040f6:	d804      	bhi.n	8004102 <HAL_TIM_ConfigClockSource+0x7e>
 80040f8:	2b50      	cmp	r3, #80	; 0x50
 80040fa:	d033      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0xe0>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d041      	beq.n	8004184 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004100:	e06a      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d066      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x152>
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d017      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800410e:	e063      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f000 f97d 	bl	800441e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004132:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
      break;
 800413c:	e04c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6899      	ldr	r1, [r3, #8]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f000 f966 	bl	800441e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004160:	609a      	str	r2, [r3, #8]
      break;
 8004162:	e039      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	461a      	mov	r2, r3
 8004172:	f000 f8dd 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2150      	movs	r1, #80	; 0x50
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f934 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8004182:	e029      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	461a      	mov	r2, r3
 8004192:	f000 f8fb 	bl	800438c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2160      	movs	r1, #96	; 0x60
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f924 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 80041a2:	e019      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f000 f8bd 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2140      	movs	r1, #64	; 0x40
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f914 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 80041c2:	e009      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 f90b 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 80041d4:	e000      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a33      	ldr	r2, [pc, #204]	; (800431c <TIM_Base_SetConfig+0xe0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a32      	ldr	r2, [pc, #200]	; (8004320 <TIM_Base_SetConfig+0xe4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00f      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d00b      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2f      	ldr	r2, [pc, #188]	; (8004324 <TIM_Base_SetConfig+0xe8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a2e      	ldr	r2, [pc, #184]	; (8004328 <TIM_Base_SetConfig+0xec>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a2d      	ldr	r2, [pc, #180]	; (800432c <TIM_Base_SetConfig+0xf0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a22      	ldr	r2, [pc, #136]	; (800431c <TIM_Base_SetConfig+0xe0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <TIM_Base_SetConfig+0x82>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a21      	ldr	r2, [pc, #132]	; (8004320 <TIM_Base_SetConfig+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00f      	beq.n	80042be <TIM_Base_SetConfig+0x82>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0x82>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <TIM_Base_SetConfig+0xe8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0x82>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <TIM_Base_SetConfig+0xec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0x82>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	; (800432c <TIM_Base_SetConfig+0xf0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <TIM_Base_SetConfig+0xe0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0xc8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <TIM_Base_SetConfig+0xe4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d103      	bne.n	800430c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	615a      	str	r2, [r3, #20]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40013400 	.word	0x40013400
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00

08004330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 0210 	bic.w	r2, r3, #16
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004438:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	021a      	lsls	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	609a      	str	r2, [r3, #8]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004470:	2302      	movs	r3, #2
 8004472:	e032      	b.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ac:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e03f      	b.n	800459a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd feb2 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800454a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 faab 	bl	8004aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d140      	bne.n	800463e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UART_Receive_IT+0x26>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e039      	b.n	8004640 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_UART_Receive_IT+0x38>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e032      	b.n	8004640 <HAL_UART_Receive_IT+0x9e>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004618:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
	...

0800464c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_UART_IRQHandler+0x52>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f984 	bl	80049a4 <UART_Receive_IT>
      return;
 800469c:	e0cc      	b.n	8004838 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80ab 	beq.w	80047fc <HAL_UART_IRQHandler+0x1b0>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_UART_IRQHandler+0x70>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80a0 	beq.w	80047fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_UART_IRQHandler+0x90>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_UART_IRQHandler+0xb0>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	f043 0202 	orr.w	r2, r3, #2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_UART_IRQHandler+0xd0>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_UART_IRQHandler+0xf0>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	f043 0208 	orr.w	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d078      	beq.n	8004836 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_UART_IRQHandler+0x112>
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f923 	bl	80049a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_UART_IRQHandler+0x13a>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d031      	beq.n	80047ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f86e 	bl	8004868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d023      	beq.n	80047e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <HAL_UART_IRQHandler+0x1f4>)
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fa8c 	bl	8002cdc <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e00e      	b.n	80047f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f83b 	bl	8004856 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e00a      	b.n	80047f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f837 	bl	8004856 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e006      	b.n	80047f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f833 	bl	8004856 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80047f6:	e01e      	b.n	8004836 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	bf00      	nop
    return;
 80047fa:	e01c      	b.n	8004836 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_UART_IRQHandler+0x1cc>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f85a 	bl	80048ca <UART_Transmit_IT>
    return;
 8004816:	e00f      	b.n	8004838 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_UART_IRQHandler+0x1ec>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8a1 	bl	8004974 <UART_EndTransmit_IT>
    return;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004836:	bf00      	nop
  }
}
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	080048a3 	.word	0x080048a3

08004844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800487e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff ffca 	bl	8004856 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b21      	cmp	r3, #33	; 0x21
 80048dc:	d144      	bne.n	8004968 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	d11a      	bne.n	800491e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048fc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	1c9a      	adds	r2, r3, #2
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	621a      	str	r2, [r3, #32]
 8004910:	e00e      	b.n	8004930 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	621a      	str	r2, [r3, #32]
 800491c:	e008      	b.n	8004930 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	1c59      	adds	r1, r3, #1
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6211      	str	r1, [r2, #32]
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4619      	mov	r1, r3
 800493e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff ff55 	bl	8004844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b22      	cmp	r3, #34	; 0x22
 80049b6:	d171      	bne.n	8004a9c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c0:	d123      	bne.n	8004a0a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10e      	bne.n	80049ee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	1c9a      	adds	r2, r3, #2
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
 80049ec:	e029      	b.n	8004a42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28
 8004a08:	e01b      	b.n	8004a42 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6858      	ldr	r0, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6291      	str	r1, [r2, #40]	; 0x28
 8004a22:	b2c2      	uxtb	r2, r0
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e00c      	b.n	8004a42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	1c58      	adds	r0, r3, #1
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	6288      	str	r0, [r1, #40]	; 0x28
 8004a3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d120      	bne.n	8004a98 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0220 	bic.w	r2, r2, #32
 8004a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc ff6c 	bl	800196c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e002      	b.n	8004a9e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ae2:	f023 030c 	bic.w	r3, r3, #12
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <UART_SetConfig+0x1ac>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d14e      	bne.n	8004bae <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7ff f850 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004b14:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009a      	lsls	r2, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2c:	4a4a      	ldr	r2, [pc, #296]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	0119      	lsls	r1, r3, #4
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009a      	lsls	r2, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b4c:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2064      	movs	r0, #100	; 0x64
 8004b56:	fb00 f303 	mul.w	r3, r0, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	3332      	adds	r3, #50	; 0x32
 8004b60:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6c:	4419      	add	r1, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004b86:	fba3 0302 	umull	r0, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2064      	movs	r0, #100	; 0x64
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a2f      	ldr	r2, [pc, #188]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	440a      	add	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004bac:	e04d      	b.n	8004c4a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bae:	f7fe ffed 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8004bb2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009a      	lsls	r2, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	4a23      	ldr	r2, [pc, #140]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	0119      	lsls	r1, r3, #4
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009a      	lsls	r2, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004bec:	fba3 0302 	umull	r0, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2064      	movs	r0, #100	; 0x64
 8004bf4:	fb00 f303 	mul.w	r3, r0, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0a:	4419      	add	r1, r3
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009a      	lsls	r2, r3, #2
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004c24:	fba3 0302 	umull	r0, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2064      	movs	r0, #100	; 0x64
 8004c2c:	fb00 f303 	mul.w	r3, r0, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x1b0>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	440a      	add	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40013800 	.word	0x40013800
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	f107 0014 	add.w	r0, r7, #20
 8004c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr

08004c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c88:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	89fb      	ldrh	r3, [r7, #14]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cb2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cb6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	b21a      	sxth	r2, r3
 8004cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	f107 0014 	add.w	r0, r7, #20
 8004d08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ffa5 	bl	8004c7c <USB_EnableGlobalInt>

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3e:	b004      	add	sp, #16
 8004d40:	4770      	bx	lr

08004d42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
	...

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	4e0c      	ldr	r6, [pc, #48]	; (8004d90 <__libc_init_array+0x38>)
 8004d5e:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d60:	1ba4      	subs	r4, r4, r6
 8004d62:	10a4      	asrs	r4, r4, #2
 8004d64:	42a5      	cmp	r5, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	f000 f822 	bl	8004db0 <_init>
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	4e0a      	ldr	r6, [pc, #40]	; (8004d98 <__libc_init_array+0x40>)
 8004d70:	4c0a      	ldr	r4, [pc, #40]	; (8004d9c <__libc_init_array+0x44>)
 8004d72:	1ba4      	subs	r4, r4, r6
 8004d74:	10a4      	asrs	r4, r4, #2
 8004d76:	42a5      	cmp	r5, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d80:	4798      	blx	r3
 8004d82:	3501      	adds	r5, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d8a:	4798      	blx	r3
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	0800ee14 	.word	0x0800ee14
 8004d94:	0800ee14 	.word	0x0800ee14
 8004d98:	0800ee14 	.word	0x0800ee14
 8004d9c:	0800ee18 	.word	0x0800ee18

08004da0 <memset>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	4402      	add	r2, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
