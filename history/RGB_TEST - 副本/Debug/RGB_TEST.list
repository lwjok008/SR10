
RGB_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a124  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eadc  0800eadc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800eadc  0800eadc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eadc  0800eadc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eadc  0800eadc  0001eadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eae0  0800eae0  0001eae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800eae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  20000020  0800eb04  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd8  0800eb04  00020dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001120b  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c9e  00000000  00000000  00031254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00033ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175fe  00000000  00000000  00035ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd72  00000000  00000000  0004d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081a6d  00000000  00000000  0005b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dccad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f4  00000000  00000000  000dcd28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000020 	.word	0x20000020
 8000200:	00000000 	.word	0x00000000
 8000204:	080049a0 	.word	0x080049a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000024 	.word	0x20000024
 8000220:	080049a0 	.word	0x080049a0

08000224 <crc_check>:
uint32	rxd_ok=0;
uint32	rxd_err=0;


void crc_check(uchar *ptr,uchar len)	//	CRC16  多项式： X^16+X^15+X^2+1
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	70fb      	strb	r3, [r7, #3]
	uint crc=0xffff;
 8000230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000234:	60fb      	str	r3, [r7, #12]
	uchar i_crc,j_crc;
	for(i_crc=0;i_crc<len;i_crc++)
 8000236:	2300      	movs	r3, #0
 8000238:	72fb      	strb	r3, [r7, #11]
 800023a:	e023      	b.n	8000284 <crc_check+0x60>
	{
		crc^=ptr[i_crc];
 800023c:	7afb      	ldrb	r3, [r7, #11]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	461a      	mov	r2, r3
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	4053      	eors	r3, r2
 800024a:	60fb      	str	r3, [r7, #12]
		for(j_crc=0;j_crc<8;j_crc++)
 800024c:	2300      	movs	r3, #0
 800024e:	72bb      	strb	r3, [r7, #10]
 8000250:	e012      	b.n	8000278 <crc_check+0x54>
		{
			if(crc&0x0001)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d007      	beq.n	800026c <crc_check+0x48>
				crc=(crc>>1)^0xA001;	//0xA001
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8000264:	f083 0301 	eor.w	r3, r3, #1
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	e002      	b.n	8000272 <crc_check+0x4e>
			else
				crc=crc>>1;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	085b      	lsrs	r3, r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
		for(j_crc=0;j_crc<8;j_crc++)
 8000272:	7abb      	ldrb	r3, [r7, #10]
 8000274:	3301      	adds	r3, #1
 8000276:	72bb      	strb	r3, [r7, #10]
 8000278:	7abb      	ldrb	r3, [r7, #10]
 800027a:	2b07      	cmp	r3, #7
 800027c:	d9e9      	bls.n	8000252 <crc_check+0x2e>
	for(i_crc=0;i_crc<len;i_crc++)
 800027e:	7afb      	ldrb	r3, [r7, #11]
 8000280:	3301      	adds	r3, #1
 8000282:	72fb      	strb	r3, [r7, #11]
 8000284:	7afa      	ldrb	r2, [r7, #11]
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	429a      	cmp	r2, r3
 800028a:	d3d7      	bcc.n	800023c <crc_check+0x18>
		}
	}
	CRC_LOW=crc&0x00ff;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <crc_check+0x84>)
 8000292:	701a      	strb	r2, [r3, #0]
	CRC_HIG=crc>>8;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	0a1b      	lsrs	r3, r3, #8
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <crc_check+0x88>)
 800029c:	701a      	strb	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	2000054c 	.word	0x2000054c
 80002ac:	20000272 	.word	0x20000272

080002b0 <CC2520_GPIO_Config>:
///////////////////////////////////////////////////////////
void CC2520_GPIO_Config(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0



	/* 停止信号 FLASH: CS引脚高电平*/
	CSN_ON();
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <CC2520_GPIO_Config+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a03      	ldr	r2, [pc, #12]	; (80002c8 <CC2520_GPIO_Config+0x18>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002be:	60d3      	str	r3, [r2, #12]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40011000 	.word	0x40011000

080002cc <CC2520_IntoActMode_Init>:
{

}

void CC2520_IntoActMode_Init(void)	//在进入act模式时要做初始化
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/*CC2520_WriteReg(0x30,0x32);
	//CC2520_WriteReg(TXPOWER,0xF7);
	CC2520_WriteReg(0x36,0xF8);
	CC2520_WriteRAM(0x00, 0x46, 0x85);
	CC2520_WriteRAM(0x00, 0x47, 0x14);*/
	CC2520_WriteReg(0x30,0xF7);	//TXPOWER
 80002d0:	21f7      	movs	r1, #247	; 0xf7
 80002d2:	2030      	movs	r0, #48	; 0x30
 80002d4:	f000 f904 	bl	80004e0 <CC2520_WriteReg>
	CC2520_WriteReg(0x31,0x94);	//TXCTRL
 80002d8:	2194      	movs	r1, #148	; 0x94
 80002da:	2031      	movs	r0, #49	; 0x31
 80002dc:	f000 f900 	bl	80004e0 <CC2520_WriteReg>
	CC2520_WriteReg(0x36,0xF8);
 80002e0:	21f8      	movs	r1, #248	; 0xf8
 80002e2:	2036      	movs	r0, #54	; 0x36
 80002e4:	f000 f8fc 	bl	80004e0 <CC2520_WriteReg>
	CC2520_WriteRAM(0x00, 0x46, 0x85);
 80002e8:	2285      	movs	r2, #133	; 0x85
 80002ea:	2146      	movs	r1, #70	; 0x46
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f947 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x47, 0x14);
 80002f2:	2214      	movs	r2, #20
 80002f4:	2147      	movs	r1, #71	; 0x47
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 f942 	bl	8000580 <CC2520_WriteRAM>

	CC2520_WriteRAM(0x00, 0x4A, 0x3F);//调整接收灵敏度
 80002fc:	223f      	movs	r2, #63	; 0x3f
 80002fe:	214a      	movs	r1, #74	; 0x4a
 8000300:	2000      	movs	r0, #0
 8000302:	f000 f93d 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4C, 0x7B);//FSCTRL	调整合成器电流
 8000306:	227b      	movs	r2, #123	; 0x7b
 8000308:	214c      	movs	r1, #76	; 0x4c
 800030a:	2000      	movs	r0, #0
 800030c:	f000 f938 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4F, 0x2B);
 8000310:	222b      	movs	r2, #43	; 0x2b
 8000312:	214f      	movs	r1, #79	; 0x4f
 8000314:	2000      	movs	r0, #0
 8000316:	f000 f933 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x53, 0x11);
 800031a:	2211      	movs	r2, #17
 800031c:	2153      	movs	r1, #83	; 0x53
 800031e:	2000      	movs	r0, #0
 8000320:	f000 f92e 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x56, 0x10);
 8000324:	2210      	movs	r2, #16
 8000326:	2156      	movs	r1, #86	; 0x56
 8000328:	2000      	movs	r0, #0
 800032a:	f000 f929 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x57, 0x0E);
 800032e:	220e      	movs	r2, #14
 8000330:	2157      	movs	r1, #87	; 0x57
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f924 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x58, 0x03);
 8000338:	2203      	movs	r2, #3
 800033a:	2158      	movs	r1, #88	; 0x58
 800033c:	2000      	movs	r0, #0
 800033e:	f000 f91f 	bl	8000580 <CC2520_WriteRAM>

	CC2520_WriteRAM(0x00, 0x4A, 0x3F);
 8000342:	223f      	movs	r2, #63	; 0x3f
 8000344:	214a      	movs	r1, #74	; 0x4a
 8000346:	2000      	movs	r0, #0
 8000348:	f000 f91a 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4C, 0x5A);
 800034c:	225a      	movs	r2, #90	; 0x5a
 800034e:	214c      	movs	r1, #76	; 0x4c
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f915 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x4F, 0x2B);
 8000356:	222b      	movs	r2, #43	; 0x2b
 8000358:	214f      	movs	r1, #79	; 0x4f
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f910 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x53, 0x11);
 8000360:	2211      	movs	r2, #17
 8000362:	2153      	movs	r1, #83	; 0x53
 8000364:	2000      	movs	r0, #0
 8000366:	f000 f90b 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x56, 0x10);
 800036a:	2210      	movs	r2, #16
 800036c:	2156      	movs	r1, #86	; 0x56
 800036e:	2000      	movs	r0, #0
 8000370:	f000 f906 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x57, 0x0E);
 8000374:	220e      	movs	r2, #14
 8000376:	2157      	movs	r1, #87	; 0x57
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f901 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x00, 0x58, 0x03);
 800037e:	2203      	movs	r2, #3
 8000380:	2158      	movs	r1, #88	; 0x58
 8000382:	2000      	movs	r0, #0
 8000384:	f000 f8fc 	bl	8000580 <CC2520_WriteRAM>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <CC2520_Init>:
//---------------------------CC2520射频芯片初始化函数--------------------------------------
void CC2520_Init(uchar freq)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]

	POWER_ON_CC2520();		//zigbee电源控制
 8000396:	4b4d      	ldr	r3, [pc, #308]	; (80004cc <CC2520_Init+0x140>)
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	4a4c      	ldr	r2, [pc, #304]	; (80004cc <CC2520_Init+0x140>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	60d3      	str	r3, [r2, #12]
	HAL_Delay(30);
 80003a2:	201e      	movs	r0, #30
 80003a4:	f002 f92e 	bl	8002604 <HAL_Delay>
	POWER_OFF_CC2520();	//zigbee电源开启
 80003a8:	4b48      	ldr	r3, [pc, #288]	; (80004cc <CC2520_Init+0x140>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a47      	ldr	r2, [pc, #284]	; (80004cc <CC2520_Init+0x140>)
 80003ae:	f023 0310 	bic.w	r3, r3, #16
 80003b2:	60d3      	str	r3, [r2, #12]

	RESET_OFF();
 80003b4:	4b46      	ldr	r3, [pc, #280]	; (80004d0 <CC2520_Init+0x144>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a45      	ldr	r2, [pc, #276]	; (80004d0 <CC2520_Init+0x144>)
 80003ba:	f023 0310 	bic.w	r3, r3, #16
 80003be:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);
 80003c0:	200a      	movs	r0, #10
 80003c2:	f002 f91f 	bl	8002604 <HAL_Delay>
	RESET_ON();		//zigbee复位
 80003c6:	4b42      	ldr	r3, [pc, #264]	; (80004d0 <CC2520_Init+0x144>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	4a41      	ldr	r2, [pc, #260]	; (80004d0 <CC2520_Init+0x144>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);
 80003d2:	200a      	movs	r0, #10
 80003d4:	f002 f916 	bl	8002604 <HAL_Delay>

	CC2520_Command(CMD_SXOSCON);	//zigbee晶振开启
 80003d8:	2040      	movs	r0, #64	; 0x40
 80003da:	f000 f94b 	bl	8000674 <CC2520_Command>
	//HAL_Delay(10);

	CC2520_WriteRAM(0x03,RAM_PANID,  CC2520_Source_PANID[0]);
 80003de:	4b3d      	ldr	r3, [pc, #244]	; (80004d4 <CC2520_Init+0x148>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	461a      	mov	r2, r3
 80003e4:	21f2      	movs	r1, #242	; 0xf2
 80003e6:	2003      	movs	r0, #3
 80003e8:	f000 f8ca 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03,RAM_PANID+1, CC2520_Source_PANID[1]);	//设置PANID
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <CC2520_Init+0x148>)
 80003ee:	785b      	ldrb	r3, [r3, #1]
 80003f0:	461a      	mov	r2, r3
 80003f2:	21f3      	movs	r1, #243	; 0xf3
 80003f4:	2003      	movs	r0, #3
 80003f6:	f000 f8c3 	bl	8000580 <CC2520_WriteRAM>
	CC2520_ReadRAM(3,RAM_PANID);
 80003fa:	21f2      	movs	r1, #242	; 0xf2
 80003fc:	2003      	movs	r0, #3
 80003fe:	f000 f895 	bl	800052c <CC2520_ReadRAM>

	CC2520_WriteRAM(0x03, RAM_IEEEADR,CC2520_Source_IEEEAddr[0]);
 8000402:	4b35      	ldr	r3, [pc, #212]	; (80004d8 <CC2520_Init+0x14c>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	21ea      	movs	r1, #234	; 0xea
 800040a:	2003      	movs	r0, #3
 800040c:	f000 f8b8 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+1,CC2520_Source_IEEEAddr[1]);
 8000410:	4b31      	ldr	r3, [pc, #196]	; (80004d8 <CC2520_Init+0x14c>)
 8000412:	785b      	ldrb	r3, [r3, #1]
 8000414:	461a      	mov	r2, r3
 8000416:	21eb      	movs	r1, #235	; 0xeb
 8000418:	2003      	movs	r0, #3
 800041a:	f000 f8b1 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+2, CC2520_Source_IEEEAddr[2]);
 800041e:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <CC2520_Init+0x14c>)
 8000420:	789b      	ldrb	r3, [r3, #2]
 8000422:	461a      	mov	r2, r3
 8000424:	21ec      	movs	r1, #236	; 0xec
 8000426:	2003      	movs	r0, #3
 8000428:	f000 f8aa 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+3, CC2520_Source_IEEEAddr[3]);
 800042c:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <CC2520_Init+0x14c>)
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	461a      	mov	r2, r3
 8000432:	21ed      	movs	r1, #237	; 0xed
 8000434:	2003      	movs	r0, #3
 8000436:	f000 f8a3 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+4, CC2520_Source_IEEEAddr[4]);
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <CC2520_Init+0x14c>)
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	461a      	mov	r2, r3
 8000440:	21ee      	movs	r1, #238	; 0xee
 8000442:	2003      	movs	r0, #3
 8000444:	f000 f89c 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+5, CC2520_Source_IEEEAddr[5]);
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <CC2520_Init+0x14c>)
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	461a      	mov	r2, r3
 800044e:	21ef      	movs	r1, #239	; 0xef
 8000450:	2003      	movs	r0, #3
 8000452:	f000 f895 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+6, CC2520_Source_IEEEAddr[6]);
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <CC2520_Init+0x14c>)
 8000458:	799b      	ldrb	r3, [r3, #6]
 800045a:	461a      	mov	r2, r3
 800045c:	21f0      	movs	r1, #240	; 0xf0
 800045e:	2003      	movs	r0, #3
 8000460:	f000 f88e 	bl	8000580 <CC2520_WriteRAM>
	CC2520_WriteRAM(0x03, RAM_IEEEADR+7, CC2520_Source_IEEEAddr[7]);	//设置IEEEADR
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <CC2520_Init+0x14c>)
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	461a      	mov	r2, r3
 800046a:	21f1      	movs	r1, #241	; 0xf1
 800046c:	2003      	movs	r0, #3
 800046e:	f000 f887 	bl	8000580 <CC2520_WriteRAM>
	CC2520_ReadRAM(3,RAM_IEEEADR);
 8000472:	21ea      	movs	r1, #234	; 0xea
 8000474:	2003      	movs	r0, #3
 8000476:	f000 f859 	bl	800052c <CC2520_ReadRAM>


	CC2520_WriteReg(FRMFILT0,0x0D);
 800047a:	210d      	movs	r1, #13
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f82f 	bl	80004e0 <CC2520_WriteReg>
	CC2520_WriteReg(GPIOCTRL0,0x2A);
 8000482:	212a      	movs	r1, #42	; 0x2a
 8000484:	2020      	movs	r0, #32
 8000486:	f000 f82b 	bl	80004e0 <CC2520_WriteReg>
	CC2520_WriteReg(GPIOCTRL1,0x27);
 800048a:	2127      	movs	r1, #39	; 0x27
 800048c:	2021      	movs	r0, #33	; 0x21
 800048e:	f000 f827 	bl	80004e0 <CC2520_WriteReg>
	CC2520_WriteReg(GPIOCTRL,0x3F);	//使能上拉20K
 8000492:	213f      	movs	r1, #63	; 0x3f
 8000494:	2028      	movs	r0, #40	; 0x28
 8000496:	f000 f823 	bl	80004e0 <CC2520_WriteReg>
	//CC2520_WriteReg(FREQCTRL,0x0B);	//设置频段，2407M，
	//if (freq>63)	freq=0;

	//CC2520_WriteReg(FREQCTRL, FreqTable[freq]);

	CC2520_WriteReg(FREQCTRL, freq);		//设置频率
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4619      	mov	r1, r3
 800049e:	202e      	movs	r0, #46	; 0x2e
 80004a0:	f000 f81e 	bl	80004e0 <CC2520_WriteReg>

	CC2520_WorkFreqIndex = freq;
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <CC2520_Init+0x150>)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	7013      	strb	r3, [r2, #0]

	CC2520_WriteReg(FSMCTRL,0);	//no timeout  有限元状态机
 80004aa:	2100      	movs	r1, #0
 80004ac:	2035      	movs	r0, #53	; 0x35
 80004ae:	f000 f817 	bl	80004e0 <CC2520_WriteReg>

	CC2520_Command(CMD_SFLUSHRX);	//清除RX缓存
 80004b2:	2047      	movs	r0, #71	; 0x47
 80004b4:	f000 f8de 	bl	8000674 <CC2520_Command>
	CC2520_Command(CMD_SFLUSHTX);	//清除TX缓存
 80004b8:	2048      	movs	r0, #72	; 0x48
 80004ba:	f000 f8db 	bl	8000674 <CC2520_Command>

	CC2520_IntoActMode_Init();
 80004be:	f7ff ff05 	bl	80002cc <CC2520_IntoActMode_Init>

	//HAL_Delay(10);
	//CC2520_SetRxMode();


}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000004 	.word	0x20000004
 80004dc:	2000054d 	.word	0x2000054d

080004e0 <CC2520_WriteReg>:
	CSN_ON();
	return value;
}
//---------------------------CC2520寄存器写入函数--------------------------------------
void  CC2520_WriteReg(uint8  addr, uint8 value)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	CSN_OFF();
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <CC2520_WriteReg+0x48>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <CC2520_WriteReg+0x48>)
 80004f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004fa:	60d3      	str	r3, [r2, #12]
	SPI_Write(addr|REG_WRITE);
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f9e5 	bl	80008d4 <SPI_Write>
	SPI_Write(value);
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f9e1 	bl	80008d4 <SPI_Write>
	CSN_ON();
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <CC2520_WriteReg+0x48>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <CC2520_WriteReg+0x48>)
 8000518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051c:	60d3      	str	r3, [r2, #12]
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40011000 	.word	0x40011000

0800052c <CC2520_ReadRAM>:
//---------------------------CC2520 RAM 读取函数--------------------------------------
uint8 CC2520_ReadRAM(uint8 addrH,uint8 addrL)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	460a      	mov	r2, r1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
	uint8 value;
	CSN_OFF();
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <CC2520_ReadRAM+0x50>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <CC2520_ReadRAM+0x50>)
 8000542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000546:	60d3      	str	r3, [r2, #12]
	SPI_Write(addrH|MEM_READ);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f9bf 	bl	80008d4 <SPI_Write>
	SPI_Write(addrL);
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f9bb 	bl	80008d4 <SPI_Write>
	value = SPI_Read();
 800055e:	f000 f963 	bl	8000828 <SPI_Read>
 8000562:	4603      	mov	r3, r0
 8000564:	73fb      	strb	r3, [r7, #15]
	CSN_ON();
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <CC2520_ReadRAM+0x50>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <CC2520_ReadRAM+0x50>)
 800056c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000570:	60d3      	str	r3, [r2, #12]
	return value;
 8000572:	7bfb      	ldrb	r3, [r7, #15]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40011000 	.word	0x40011000

08000580 <CC2520_WriteRAM>:
//---------------------------CC2520 RAM 写入函数--------------------------------------
void CC2520_WriteRAM(uint8 addrH,uint8 addrL, uint8 value)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	460b      	mov	r3, r1
 800058c:	71bb      	strb	r3, [r7, #6]
 800058e:	4613      	mov	r3, r2
 8000590:	717b      	strb	r3, [r7, #5]
	CSN_OFF();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <CC2520_WriteRAM+0x50>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <CC2520_WriteRAM+0x50>)
 8000598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800059c:	60d3      	str	r3, [r2, #12]
	SPI_Write(addrH|MEM_WRITE);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f994 	bl	80008d4 <SPI_Write>
	SPI_Write(addrL);
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f990 	bl	80008d4 <SPI_Write>
	SPI_Write(value);
 80005b4:	797b      	ldrb	r3, [r7, #5]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f98c 	bl	80008d4 <SPI_Write>
	CSN_ON();
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <CC2520_WriteRAM+0x50>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <CC2520_WriteRAM+0x50>)
 80005c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40011000 	.word	0x40011000

080005d4 <CC2520_WriteTXFIFO>:


//---------------------------CC2520 TXFIFIO 写入函数--------------------------------------
void  CC2520_WriteTXFIFO(uchar txd_len)//3.5ms@len=16
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	uint8 i;

	CC2520_Command(CMD_SFLUSHTX);//80us
 80005de:	2048      	movs	r0, #72	; 0x48
 80005e0:	f000 f848 	bl	8000674 <CC2520_Command>

	CSN_OFF();
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <CC2520_WriteTXFIFO+0x94>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <CC2520_WriteTXFIFO+0x94>)
 80005ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005ee:	60d3      	str	r3, [r2, #12]

	SPI_Write(TXFIFO_WRITE); //80us
 80005f0:	203a      	movs	r0, #58	; 0x3a
 80005f2:	f000 f96f 	bl	80008d4 <SPI_Write>


	SPI_Write(23+txd_len+2);//80us
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	3319      	adds	r3, #25
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f969 	bl	80008d4 <SPI_Write>


	for(i=1;i<24;i++)
 8000602:	2301      	movs	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e008      	b.n	800061a <CC2520_WriteTXFIFO+0x46>
	{
		SPI_Write(CC2520_PackHead[i]);//1.9ms@len=16
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <CC2520_WriteTXFIFO+0x98>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f960 	bl	80008d4 <SPI_Write>
	for(i=1;i<24;i++)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b17      	cmp	r3, #23
 800061e:	d9f3      	bls.n	8000608 <CC2520_WriteTXFIFO+0x34>
	}

	for(i=0;i<txd_len;i++)
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e008      	b.n	8000638 <CC2520_WriteTXFIFO+0x64>
	{
		SPI_Write(CC2520_PSDU[i]);//1.3ms@len=16
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <CC2520_WriteTXFIFO+0x9c>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f951 	bl	80008d4 <SPI_Write>
	for(i=0;i<txd_len;i++)
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	7bfa      	ldrb	r2, [r7, #15]
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	429a      	cmp	r2, r3
 800063e:	d3f2      	bcc.n	8000626 <CC2520_WriteTXFIFO+0x52>
	}

	SPI_Write(0x55);//80us
 8000640:	2055      	movs	r0, #85	; 0x55
 8000642:	f000 f947 	bl	80008d4 <SPI_Write>
	SPI_Write(0xaa);//80us
 8000646:	20aa      	movs	r0, #170	; 0xaa
 8000648:	f000 f944 	bl	80008d4 <SPI_Write>
	CSN_ON();
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <CC2520_WriteTXFIFO+0x94>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <CC2520_WriteTXFIFO+0x94>)
 8000652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000656:	60d3      	str	r3, [r2, #12]

	delay_us1(40);;//32us
 8000658:	2028      	movs	r0, #40	; 0x28
 800065a:	f000 fd85 	bl	8001168 <delay_us1>

}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40011000 	.word	0x40011000
 800066c:	080049cc 	.word	0x080049cc
 8000670:	20000554 	.word	0x20000554

08000674 <CC2520_Command>:

//---------------------------CC2520命令函数--------------------------------------
void  CC2520_Command(uint8 cmd)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	CSN_OFF();   //NRF_CS=0	片选有效
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <CC2520_Command+0x34>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <CC2520_Command+0x34>)
 8000684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000688:	60d3      	str	r3, [r2, #12]
	SPI_Write(cmd);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f921 	bl	80008d4 <SPI_Write>
	CSN_ON();    //NRF_CS=1
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <CC2520_Command+0x34>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <CC2520_Command+0x34>)
 8000698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800069c:	60d3      	str	r3, [r2, #12]
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40011000 	.word	0x40011000

080006ac <CC2520_SetRxMode>:

//---------------------------CC2520 设置接收函数--------------------------------------
void CC2520_SetRxMode(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	//CC2520_Command(CMD_SRFOFF);
	CC2520_Command(CMD_SRXON);
 80006b0:	2042      	movs	r0, #66	; 0x42
 80006b2:	f7ff ffdf 	bl	8000674 <CC2520_Command>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <CC2520_RxPacket>:
//---------------------------CC2520 判断接收函数--------------------------------------
uint8 CC2520_RxPacket(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	uchar	ok=0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]

    if((HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin)==0)&&(HAL_GPIO_ReadPin(CC2520_GP1_GPIO_GPIO_Port,CC2520_GP1_GPIO_Pin)!=0))
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4822      	ldr	r0, [pc, #136]	; (8000754 <CC2520_RxPacket+0x98>)
 80006cc:	f002 fb58 	bl	8002d80 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <CC2520_RxPacket+0x2e>
 80006d6:	2101      	movs	r1, #1
 80006d8:	481f      	ldr	r0, [pc, #124]	; (8000758 <CC2520_RxPacket+0x9c>)
 80006da:	f002 fb51 	bl	8002d80 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <CC2520_RxPacket+0x2e>
		ok++;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	3301      	adds	r3, #1
 80006e8:	71fb      	strb	r3, [r7, #7]
    if((HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin)==0)&&(HAL_GPIO_ReadPin(CC2520_GP1_GPIO_GPIO_Port,CC2520_GP1_GPIO_Pin)!=0))
 80006ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ee:	4819      	ldr	r0, [pc, #100]	; (8000754 <CC2520_RxPacket+0x98>)
 80006f0:	f002 fb46 	bl	8002d80 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d109      	bne.n	800070e <CC2520_RxPacket+0x52>
 80006fa:	2101      	movs	r1, #1
 80006fc:	4816      	ldr	r0, [pc, #88]	; (8000758 <CC2520_RxPacket+0x9c>)
 80006fe:	f002 fb3f 	bl	8002d80 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <CC2520_RxPacket+0x52>
		ok++;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	3301      	adds	r3, #1
 800070c:	71fb      	strb	r3, [r7, #7]
    if((HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin)==0)&&(HAL_GPIO_ReadPin(CC2520_GP1_GPIO_GPIO_Port,CC2520_GP1_GPIO_Pin)!=0))
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <CC2520_RxPacket+0x98>)
 8000714:	f002 fb34 	bl	8002d80 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <CC2520_RxPacket+0x76>
 800071e:	2101      	movs	r1, #1
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <CC2520_RxPacket+0x9c>)
 8000722:	f002 fb2d 	bl	8002d80 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <CC2520_RxPacket+0x76>
   	 	ok++;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3301      	adds	r3, #1
 8000730:	71fb      	strb	r3, [r7, #7]
    if (ok>1)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d907      	bls.n	8000748 <CC2520_RxPacket+0x8c>
	{
		//HAL_Delay(1);
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <CC2520_RxPacket+0xa0>)
 8000740:	f002 fb35 	bl	8002dae <HAL_GPIO_WritePin>

		return TRUE;
 8000744:	2301      	movs	r3, #1
 8000746:	e000      	b.n	800074a <CC2520_RxPacket+0x8e>
	}
	return FALSE;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40011000 	.word	0x40011000
 8000758:	40010c00 	.word	0x40010c00
 800075c:	40010800 	.word	0x40010800

08000760 <CC2520_TxPacket>:


//---------------------------CC2520 发送函数--------------------------------------
void CC2520_TxPacket(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	uint32	i=0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
	uchar	hig_cnt;
	//CC2520_Command(CMD_SRFOFF);
	CC2520_Command(CMD_STXON);
 800076a:	2043      	movs	r0, #67	; 0x43
 800076c:	f7ff ff82 	bl	8000674 <CC2520_Command>
	HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f001 ff47 	bl	8002604 <HAL_Delay>
	//for (i=0; i<2500;i++);
	for (i=0; i<200;i++)
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	e028      	b.n	80007ce <CC2520_TxPacket+0x6e>
	{
		hig_cnt = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	70fb      	strb	r3, [r7, #3]
		if (HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin))
 8000780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000784:	481b      	ldr	r0, [pc, #108]	; (80007f4 <CC2520_TxPacket+0x94>)
 8000786:	f002 fafb 	bl	8002d80 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <CC2520_TxPacket+0x36>
			hig_cnt++;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	3301      	adds	r3, #1
 8000794:	70fb      	strb	r3, [r7, #3]
		if (HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin))
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <CC2520_TxPacket+0x94>)
 800079c:	f002 faf0 	bl	8002d80 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <CC2520_TxPacket+0x4c>
			hig_cnt++;
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	3301      	adds	r3, #1
 80007aa:	70fb      	strb	r3, [r7, #3]
		if (HAL_GPIO_ReadPin(CC2520_GP0_GPIO_GPIO_Port,CC2520_GP0_GPIO_Pin))
 80007ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <CC2520_TxPacket+0x94>)
 80007b2:	f002 fae5 	bl	8002d80 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <CC2520_TxPacket+0x62>
			hig_cnt++;
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	3301      	adds	r3, #1
 80007c0:	70fb      	strb	r3, [r7, #3]
		if (hig_cnt>1)	break;
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d806      	bhi.n	80007d6 <CC2520_TxPacket+0x76>
	for (i=0; i<200;i++)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2bc7      	cmp	r3, #199	; 0xc7
 80007d2:	d9d3      	bls.n	800077c <CC2520_TxPacket+0x1c>
 80007d4:	e000      	b.n	80007d8 <CC2520_TxPacket+0x78>
		if (hig_cnt>1)	break;
 80007d6:	bf00      	nop
	}
	if (i==200)	RF_BadCycCnt++;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2bc8      	cmp	r3, #200	; 0xc8
 80007dc:	d105      	bne.n	80007ea <CC2520_TxPacket+0x8a>
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <CC2520_TxPacket+0x98>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <CC2520_TxPacket+0x98>)
 80007e8:	701a      	strb	r2, [r3, #0]
	//else
		//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40011000 	.word	0x40011000
 80007f8:	20000051 	.word	0x20000051

080007fc <CC2520_SPI_Init>:

//--------------------------SPI初始化函数---------------------------
void CC2520_SPI_Init(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	SCLK_OFF();
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <CC2520_SPI_Init+0x24>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <CC2520_SPI_Init+0x24>)
 8000806:	f023 0320 	bic.w	r3, r3, #32
 800080a:	60d3      	str	r3, [r2, #12]
	CSN_ON();
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <CC2520_SPI_Init+0x28>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <CC2520_SPI_Init+0x28>)
 8000812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40010800 	.word	0x40010800
 8000824:	40011000 	.word	0x40011000

08000828 <SPI_Read>:
//--------------------------SPI单字节读取函数---------------------------
uint8 SPI_Read(void)//30us
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	uint8 i,rxdata, hig_cnt;
	rxdata = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	71bb      	strb	r3, [r7, #6]

	//SET_CC2520_GP0_Input();
	//SET_CC2520_GP1_Input();

	for (i = 0;i < 8;i++)
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	e043      	b.n	80008c0 <SPI_Read+0x98>
	{
		rxdata = rxdata<<1;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	71bb      	strb	r3, [r7, #6]
		SCLK_ON();
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <SPI_Read+0xa8>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <SPI_Read+0xa8>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	60d3      	str	r3, [r2, #12]
		delay_us1(12);
 800084a:	200c      	movs	r0, #12
 800084c:	f000 fc8c 	bl	8001168 <delay_us1>
		hig_cnt = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	717b      	strb	r3, [r7, #5]

		if (MISO_IN())	hig_cnt++;
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <SPI_Read+0xa8>)
 8000858:	f002 fa92 	bl	8002d80 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <SPI_Read+0x40>
 8000862:	797b      	ldrb	r3, [r7, #5]
 8000864:	3301      	adds	r3, #1
 8000866:	717b      	strb	r3, [r7, #5]
		if (MISO_IN())	hig_cnt++;
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <SPI_Read+0xa8>)
 800086c:	f002 fa88 	bl	8002d80 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <SPI_Read+0x54>
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	3301      	adds	r3, #1
 800087a:	717b      	strb	r3, [r7, #5]
		if (MISO_IN())	hig_cnt++;
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <SPI_Read+0xa8>)
 8000880:	f002 fa7e 	bl	8002d80 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <SPI_Read+0x68>
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	3301      	adds	r3, #1
 800088e:	717b      	strb	r3, [r7, #5]
		if (hig_cnt>1)
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d904      	bls.n	80008a0 <SPI_Read+0x78>
        {
			rxdata |= 0x01;
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	71bb      	strb	r3, [r7, #6]
 800089e:	e003      	b.n	80008a8 <SPI_Read+0x80>
		}
		else
		{
			rxdata &= ~0x01;
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	f023 0301 	bic.w	r3, r3, #1
 80008a6:	71bb      	strb	r3, [r7, #6]
		}
		SCLK_OFF();
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <SPI_Read+0xa8>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <SPI_Read+0xa8>)
 80008ae:	f023 0320 	bic.w	r3, r3, #32
 80008b2:	60d3      	str	r3, [r2, #12]
		delay_us1(12);
 80008b4:	200c      	movs	r0, #12
 80008b6:	f000 fc57 	bl	8001168 <delay_us1>
	for (i = 0;i < 8;i++)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3301      	adds	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d9b8      	bls.n	8000838 <SPI_Read+0x10>
	 }

	 return rxdata;
 80008c6:	79bb      	ldrb	r3, [r7, #6]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40010800 	.word	0x40010800

080008d4 <SPI_Write>:
//----------------------------SPI单字节写入函数---------------------------
void SPI_Write(uint8 txdata)  //SPI=100kHz
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	uint8 i;

	for (i = 0;i < 8;i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e03a      	b.n	800095a <SPI_Write+0x86>
	{
		if (txdata&0x80)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da06      	bge.n	80008fa <SPI_Write+0x26>
		{
			MOSI_ON();
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <SPI_Write+0x94>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <SPI_Write+0x94>)
 80008f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f6:	60d3      	str	r3, [r2, #12]
 80008f8:	e005      	b.n	8000906 <SPI_Write+0x32>
		}
		else
		{
			MOSI_OFF();
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <SPI_Write+0x94>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <SPI_Write+0x94>)
 8000900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000904:	60d3      	str	r3, [r2, #12]
		}
		SCLK_ON();
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <SPI_Write+0x94>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <SPI_Write+0x94>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	60d3      	str	r3, [r2, #12]
		delay_init(72);
 8000912:	2048      	movs	r0, #72	; 0x48
 8000914:	f000 fc16 	bl	8001144 <delay_init>
		delay_init(72);
 8000918:	2048      	movs	r0, #72	; 0x48
 800091a:	f000 fc13 	bl	8001144 <delay_init>
		delay_init(72);
 800091e:	2048      	movs	r0, #72	; 0x48
 8000920:	f000 fc10 	bl	8001144 <delay_init>
		delay_init(72);
 8000924:	2048      	movs	r0, #72	; 0x48
 8000926:	f000 fc0d 	bl	8001144 <delay_init>
		//delay_init(10);
		//delay_us1(1);//延时4.7us
		txdata = txdata<<1;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]
		SCLK_OFF();
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <SPI_Write+0x94>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <SPI_Write+0x94>)
 8000936:	f023 0320 	bic.w	r3, r3, #32
 800093a:	60d3      	str	r3, [r2, #12]
		delay_init(72);
 800093c:	2048      	movs	r0, #72	; 0x48
 800093e:	f000 fc01 	bl	8001144 <delay_init>
		delay_init(72);
 8000942:	2048      	movs	r0, #72	; 0x48
 8000944:	f000 fbfe 	bl	8001144 <delay_init>
		delay_init(72);
 8000948:	2048      	movs	r0, #72	; 0x48
 800094a:	f000 fbfb 	bl	8001144 <delay_init>
		delay_init(72);
 800094e:	2048      	movs	r0, #72	; 0x48
 8000950:	f000 fbf8 	bl	8001144 <delay_init>
	for (i = 0;i < 8;i++)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d9c1      	bls.n	80008e4 <SPI_Write+0x10>
		//delay_us1(1);//延时4.7us
	}
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010800 	.word	0x40010800

0800096c <CC2520_ReadRXFIFO>:

}
//---------------------------CC2520 RXFIFIO 读取函数--------------------------------------

void CC2520_ReadRXFIFO(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
	uint8 i;
	CSN_OFF();
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <CC2520_ReadRXFIFO+0x74>)
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <CC2520_ReadRXFIFO+0x74>)
 8000978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800097c:	60d3      	str	r3, [r2, #12]
	SPI_Write(RXFIFO_READ);
 800097e:	2030      	movs	r0, #48	; 0x30
 8000980:	f7ff ffa8 	bl	80008d4 <SPI_Write>
	CC2520_PSDU[0] = SPI_Read(); //CC2520_PSDU[0]表示收到的数据包长度，实测值为41
 8000984:	f7ff ff50 	bl	8000828 <SPI_Read>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <CC2520_ReadRXFIFO+0x78>)
 800098e:	701a      	strb	r2, [r3, #0]
	if (CC2520_PSDU[0]>127)
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <CC2520_ReadRXFIFO+0x78>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	da02      	bge.n	80009a0 <CC2520_ReadRXFIFO+0x34>
		CC2520_PSDU[0]=127;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <CC2520_ReadRXFIFO+0x78>)
 800099c:	227f      	movs	r2, #127	; 0x7f
 800099e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<CC2520_PSDU[0];i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	e00a      	b.n	80009bc <CC2520_ReadRXFIFO+0x50>
	{
		CC2520_PSDU[1+i] = SPI_Read();
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	1c5c      	adds	r4, r3, #1
 80009aa:	f7ff ff3d 	bl	8000828 <SPI_Read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <CC2520_ReadRXFIFO+0x78>)
 80009b4:	551a      	strb	r2, [r3, r4]
	for(i=0;i<CC2520_PSDU[0];i++)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	3301      	adds	r3, #1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <CC2520_ReadRXFIFO+0x78>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3ef      	bcc.n	80009a6 <CC2520_ReadRXFIFO+0x3a>
	}
	CSN_ON();
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <CC2520_ReadRXFIFO+0x74>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <CC2520_ReadRXFIFO+0x74>)
 80009cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d0:	60d3      	str	r3, [r2, #12]
	CC2520_Command(CMD_SFLUSHRX);
 80009d2:	2047      	movs	r0, #71	; 0x47
 80009d4:	f7ff fe4e 	bl	8000674 <CC2520_Command>
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40011000 	.word	0x40011000
 80009e4:	20000554 	.word	0x20000554

080009e8 <temp_send>:
		//MOSI_OFF();
		//MOSI_OFF();
}
*/
void temp_send()			//温度发送
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	CC2520_PSDU[10]=0;
	CC2520_PSDU[11]=(time_send_delay-1000)/400;
	CC2520_PSDU[12]=0x00;
	CC2520_PSDU[13]=time_send_period_set/1000;
	*/
	CC2520_PSDU[0]=0x14;
 80009ee:	4b67      	ldr	r3, [pc, #412]	; (8000b8c <temp_send+0x1a4>)
 80009f0:	2214      	movs	r2, #20
 80009f2:	701a      	strb	r2, [r3, #0]
	CC2520_PSDU[1]=0x19;
 80009f4:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <temp_send+0x1a4>)
 80009f6:	2219      	movs	r2, #25
 80009f8:	705a      	strb	r2, [r3, #1]
	CC2520_PSDU[2]=0x05;
 80009fa:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <temp_send+0x1a4>)
 80009fc:	2205      	movs	r2, #5
 80009fe:	709a      	strb	r2, [r3, #2]
	CC2520_PSDU[3]=0x24;
 8000a00:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <temp_send+0x1a4>)
 8000a02:	2224      	movs	r2, #36	; 0x24
 8000a04:	70da      	strb	r2, [r3, #3]
	CC2520_PSDU[4]=0x00;
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <temp_send+0x1a4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	711a      	strb	r2, [r3, #4]
	CC2520_PSDU[5]=0x03;
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	; (8000b8c <temp_send+0x1a4>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	715a      	strb	r2, [r3, #5]
	CC2520_PSDU[6]=0x01;
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <temp_send+0x1a4>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	719a      	strb	r2, [r3, #6]
	CC2520_PSDU[7]=0x06;
 8000a18:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <temp_send+0x1a4>)
 8000a1a:	2206      	movs	r2, #6
 8000a1c:	71da      	strb	r2, [r3, #7]
	CC2520_PSDU[8]=0x01;
 8000a1e:	4b5b      	ldr	r3, [pc, #364]	; (8000b8c <temp_send+0x1a4>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	721a      	strb	r2, [r3, #8]
	CC2520_PSDU[9]=0xBE;
 8000a24:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <temp_send+0x1a4>)
 8000a26:	22be      	movs	r2, #190	; 0xbe
 8000a28:	725a      	strb	r2, [r3, #9]
	CC2520_PSDU[10]=0x38;
 8000a2a:	4b58      	ldr	r3, [pc, #352]	; (8000b8c <temp_send+0x1a4>)
 8000a2c:	2238      	movs	r2, #56	; 0x38
 8000a2e:	729a      	strb	r2, [r3, #10]
	CC2520_PSDU[11]=0x02;
 8000a30:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <temp_send+0x1a4>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	72da      	strb	r2, [r3, #11]
	CC2520_PSDU[12]=0x2A;
 8000a36:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <temp_send+0x1a4>)
 8000a38:	222a      	movs	r2, #42	; 0x2a
 8000a3a:	731a      	strb	r2, [r3, #12]
	CC2520_PSDU[13]=0x40;
 8000a3c:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <temp_send+0x1a4>)
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	735a      	strb	r2, [r3, #13]
	ptr=CC2520_PSDU;
 8000a42:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <temp_send+0x1a8>)
 8000a44:	4a51      	ldr	r2, [pc, #324]	; (8000b8c <temp_send+0x1a4>)
 8000a46:	601a      	str	r2, [r3, #0]
	crc_check(ptr,14);
 8000a48:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <temp_send+0x1a8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	210e      	movs	r1, #14
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbe8 	bl	8000224 <crc_check>
	CC2520_PSDU[14]=CRC_LOW;
 8000a54:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <temp_send+0x1ac>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <temp_send+0x1a4>)
 8000a5a:	739a      	strb	r2, [r3, #14]
	CC2520_PSDU[15]=CRC_HIG;
 8000a5c:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <temp_send+0x1b0>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <temp_send+0x1a4>)
 8000a62:	73da      	strb	r2, [r3, #15]
	CC2520_Command(CMD_SXOSCON);	//开启装载到发送结束约12ms
 8000a64:	2040      	movs	r0, #64	; 0x40
 8000a66:	f7ff fe05 	bl	8000674 <CC2520_Command>
	delay_init(72);
 8000a6a:	2048      	movs	r0, #72	; 0x48
 8000a6c:	f000 fb6a 	bl	8001144 <delay_init>
	delay_init(72);
 8000a70:	2048      	movs	r0, #72	; 0x48
 8000a72:	f000 fb67 	bl	8001144 <delay_init>
	delay_init(72);
 8000a76:	2048      	movs	r0, #72	; 0x48
 8000a78:	f000 fb64 	bl	8001144 <delay_init>
	CSN_OFF();
 8000a7c:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <temp_send+0x1b4>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <temp_send+0x1b4>)
 8000a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a86:	60d3      	str	r3, [r2, #12]
	HAL_Delay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f001 fdbb 	bl	8002604 <HAL_Delay>
	//while(!MISO_IN());
	//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	CSN_ON();
 8000a8e:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <temp_send+0x1b4>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <temp_send+0x1b4>)
 8000a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a98:	60d3      	str	r3, [r2, #12]
	CC2520_WriteTXFIFO(16);
 8000a9a:	2010      	movs	r0, #16
 8000a9c:	f7ff fd9a 	bl	80005d4 <CC2520_WriteTXFIFO>
	CC2520_TxPacket();	//开启发送到完成时间约7ms
 8000aa0:	f7ff fe5e 	bl	8000760 <CC2520_TxPacket>
	delay_init(72);
 8000aa4:	2048      	movs	r0, #72	; 0x48
 8000aa6:	f000 fb4d 	bl	8001144 <delay_init>
	CC2520_SetRxMode();		//设置为接收模式开启
 8000aaa:	f7ff fdff 	bl	80006ac <CC2520_SetRxMode>
	time_delay=0;
 8000aae:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <temp_send+0x1b8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
	i=0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71fb      	strb	r3, [r7, #7]
	while(time_delay<50)		//最长允许开启100ms
 8000ab8:	e009      	b.n	8000ace <temp_send+0xe6>
	{

		if(CC2520_RxPacket())
 8000aba:	f7ff fdff 	bl	80006bc <CC2520_RxPacket>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d004      	beq.n	8000ace <temp_send+0xe6>
		{
			CC2520_ReadRXFIFO();
 8000ac4:	f7ff ff52 	bl	800096c <CC2520_ReadRXFIFO>
			i=1;				//退出接收等待后，如i=1，则判断为有接收
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
			break;
 8000acc:	e003      	b.n	8000ad6 <temp_send+0xee>
	while(time_delay<50)		//最长允许开启100ms
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <temp_send+0x1b8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b31      	cmp	r3, #49	; 0x31
 8000ad4:	d9f1      	bls.n	8000aba <temp_send+0xd2>
		}
	}

	CC2520_Command(CMD_SXOSCOFF);
 8000ad6:	2046      	movs	r0, #70	; 0x46
 8000ad8:	f7ff fdcc 	bl	8000674 <CC2520_Command>

	if(i==1)			//如i=1，则判断为有接收
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d150      	bne.n	8000b84 <temp_send+0x19c>
	{

		for(i=0;i<16 ;i++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e00a      	b.n	8000afe <temp_send+0x116>
		{
			CC2520_PSDU[i]=CC2520_PSDU[i+24];
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f103 0218 	add.w	r2, r3, #24
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4926      	ldr	r1, [pc, #152]	; (8000b8c <temp_send+0x1a4>)
 8000af2:	5c89      	ldrb	r1, [r1, r2]
 8000af4:	4a25      	ldr	r2, [pc, #148]	; (8000b8c <temp_send+0x1a4>)
 8000af6:	54d1      	strb	r1, [r2, r3]
		for(i=0;i<16 ;i++)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	3301      	adds	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d9f1      	bls.n	8000ae8 <temp_send+0x100>
		}
		if(CC2520_PSDU[1]==0x19)
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <temp_send+0x1a4>)
 8000b06:	785b      	ldrb	r3, [r3, #1]
 8000b08:	2b19      	cmp	r3, #25
 8000b0a:	d13b      	bne.n	8000b84 <temp_send+0x19c>
	  	{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <temp_send+0x1bc>)
 8000b14:	f002 f94b 	bl	8002dae <HAL_GPIO_WritePin>
		  	//time_reset=0;
	  		ptr=CC2520_PSDU;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <temp_send+0x1a8>)
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <temp_send+0x1a4>)
 8000b1c:	601a      	str	r2, [r3, #0]
			crc_check(ptr,14);
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <temp_send+0x1a8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	210e      	movs	r1, #14
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb7d 	bl	8000224 <crc_check>

			if(CC2520_PSDU[14]==CRC_LOW  && CC2520_PSDU[15]==CRC_HIG)		//校验ok
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <temp_send+0x1a4>)
 8000b2c:	7b9a      	ldrb	r2, [r3, #14]
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <temp_send+0x1ac>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d126      	bne.n	8000b84 <temp_send+0x19c>
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <temp_send+0x1a4>)
 8000b38:	7bda      	ldrb	r2, [r3, #15]
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <temp_send+0x1b0>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d120      	bne.n	8000b84 <temp_send+0x19c>
			{
				if(CC2520_PSDU[6]==0x03)
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <temp_send+0x1a4>)
 8000b44:	799b      	ldrb	r3, [r3, #6]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d11c      	bne.n	8000b84 <temp_send+0x19c>
				{
					HAL_Delay(80);					//延时待定
 8000b4a:	2050      	movs	r0, #80	; 0x50
 8000b4c:	f001 fd5a 	bl	8002604 <HAL_Delay>
					CC2520_Command(CMD_SXOSCON);	//开启装载到发送结束约12ms
 8000b50:	2040      	movs	r0, #64	; 0x40
 8000b52:	f7ff fd8f 	bl	8000674 <CC2520_Command>
					CSN_OFF();
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <temp_send+0x1b4>)
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <temp_send+0x1b4>)
 8000b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b60:	60d3      	str	r3, [r2, #12]
					HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f001 fd4e 	bl	8002604 <HAL_Delay>
					//while(!MISO_IN());
					CSN_ON();
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <temp_send+0x1b4>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <temp_send+0x1b4>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	60d3      	str	r3, [r2, #12]
					CC2520_WriteTXFIFO(16);
 8000b74:	2010      	movs	r0, #16
 8000b76:	f7ff fd2d 	bl	80005d4 <CC2520_WriteTXFIFO>
					CC2520_TxPacket();	//原包回传
 8000b7a:	f7ff fdf1 	bl	8000760 <CC2520_TxPacket>
					CC2520_Command(CMD_SXOSCOFF);
 8000b7e:	2046      	movs	r0, #70	; 0x46
 8000b80:	f7ff fd78 	bl	8000674 <CC2520_Command>

			}
	  	}
	}

}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000554 	.word	0x20000554
 8000b90:	20000160 	.word	0x20000160
 8000b94:	2000054c 	.word	0x2000054c
 8000b98:	20000272 	.word	0x20000272
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	20000378 	.word	0x20000378
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <LCD_DA>:
#define purple 0xa1d6	 	//定义紫色
#define brown  0x8200	 //定义棕色
#define gray   0x8410	 	//定义灰色

void LCD_DA(u8 da)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	if((da & (1<<0))==(1<<0))
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d006      	beq.n	8000bca <LCD_DA+0x22>
		 SET_D0;
 8000bbc:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <LCD_DA+0x134>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a46      	ldr	r2, [pc, #280]	; (8000cdc <LCD_DA+0x134>)
 8000bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc6:	60d3      	str	r3, [r2, #12]
 8000bc8:	e005      	b.n	8000bd6 <LCD_DA+0x2e>
	else
		 CLR_D0;
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <LCD_DA+0x134>)
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <LCD_DA+0x134>)
 8000bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bd4:	60d3      	str	r3, [r2, #12]
	if((da & (1<<1))==(1<<1))
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <LCD_DA+0x46>
		 SET_D1;
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <LCD_DA+0x134>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a3d      	ldr	r2, [pc, #244]	; (8000cdc <LCD_DA+0x134>)
 8000be6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bea:	60d3      	str	r3, [r2, #12]
 8000bec:	e005      	b.n	8000bfa <LCD_DA+0x52>
	else
		 CLR_D1;
 8000bee:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <LCD_DA+0x134>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4a3a      	ldr	r2, [pc, #232]	; (8000cdc <LCD_DA+0x134>)
 8000bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bf8:	60d3      	str	r3, [r2, #12]
	if((da & (1<<2))==(1<<2))
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <LCD_DA+0x6a>
		 SET_D2;
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <LCD_DA+0x134>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <LCD_DA+0x134>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	60d3      	str	r3, [r2, #12]
 8000c10:	e005      	b.n	8000c1e <LCD_DA+0x76>
	else
		 CLR_D2;
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <LCD_DA+0x134>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <LCD_DA+0x134>)
 8000c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c1c:	60d3      	str	r3, [r2, #12]
	if((da & (1<<3))==(1<<3))
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <LCD_DA+0x8e>
		 SET_D3;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <LCD_DA+0x134>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <LCD_DA+0x134>)
 8000c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c32:	60d3      	str	r3, [r2, #12]
 8000c34:	e005      	b.n	8000c42 <LCD_DA+0x9a>
	else
		 CLR_D3;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <LCD_DA+0x134>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <LCD_DA+0x134>)
 8000c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c40:	60d3      	str	r3, [r2, #12]
	if((da & (1<<4))==(1<<4))
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <LCD_DA+0xb2>
		 SET_D4;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <LCD_DA+0x138>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <LCD_DA+0x138>)
 8000c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c56:	60d3      	str	r3, [r2, #12]
 8000c58:	e005      	b.n	8000c66 <LCD_DA+0xbe>
	else
		 CLR_D4;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <LCD_DA+0x138>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <LCD_DA+0x138>)
 8000c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c64:	60d3      	str	r3, [r2, #12]
	if((da & (1<<5))==(1<<5))
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <LCD_DA+0xd6>
		 SET_D5;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <LCD_DA+0x138>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <LCD_DA+0x138>)
 8000c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7a:	60d3      	str	r3, [r2, #12]
 8000c7c:	e005      	b.n	8000c8a <LCD_DA+0xe2>
	else
		 CLR_D5;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <LCD_DA+0x138>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <LCD_DA+0x138>)
 8000c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c88:	60d3      	str	r3, [r2, #12]
	if((da & (1<<6))==(1<<6))
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <LCD_DA+0xfa>
		 SET_D6;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <LCD_DA+0x138>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <LCD_DA+0x138>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	60d3      	str	r3, [r2, #12]
 8000ca0:	e005      	b.n	8000cae <LCD_DA+0x106>
	else
		 CLR_D6;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <LCD_DA+0x138>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <LCD_DA+0x138>)
 8000ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cac:	60d3      	str	r3, [r2, #12]
	if((da & (1<<7))==(1<<7))
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	da06      	bge.n	8000cc4 <LCD_DA+0x11c>
		 SET_D7;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <LCD_DA+0x138>)
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <LCD_DA+0x138>)
 8000cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc0:	60d3      	str	r3, [r2, #12]
	else
		 CLR_D7;
}
 8000cc2:	e005      	b.n	8000cd0 <LCD_DA+0x128>
		 CLR_D7;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <LCD_DA+0x138>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <LCD_DA+0x138>)
 8000cca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <delay1>:

void delay1(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	asm("nop");
 8000ce8:	bf00      	nop

}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <vSdCmd>:

//////////////////////////////////////////////////
void vSdCmd(uint8_t Command)       //send command
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]

	  CLR_DC;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <vSdCmd+0x5c>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <vSdCmd+0x5c>)
 8000d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d08:	60d3      	str	r3, [r2, #12]

	  LCD_DA(Command);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff4b 	bl	8000ba8 <LCD_DA>

	  CLR_CS;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <vSdCmd+0x60>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <vSdCmd+0x60>)
 8000d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d1c:	60d3      	str	r3, [r2, #12]

	  CLR_WR;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <vSdCmd+0x5c>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <vSdCmd+0x5c>)
 8000d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d28:	60d3      	str	r3, [r2, #12]

	   delay1();
 8000d2a:	f7ff ffdb 	bl	8000ce4 <delay1>

	    SET_WR;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <vSdCmd+0x5c>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <vSdCmd+0x5c>)
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d38:	60d3      	str	r3, [r2, #12]

		  SET_CS;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <vSdCmd+0x60>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <vSdCmd+0x60>)
 8000d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d44:	60d3      	str	r3, [r2, #12]
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010800 	.word	0x40010800
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <vSdData>:
//////////////////////////////////////////////////
void vSdData(uint8_t Ddata)       //send command
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]


	  SET_DC;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <vSdData+0x5c>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <vSdData+0x5c>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6c:	60d3      	str	r3, [r2, #12]

	  LCD_DA(Ddata);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff19 	bl	8000ba8 <LCD_DA>

	  CLR_CS;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <vSdData+0x60>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <vSdData+0x60>)
 8000d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d80:	60d3      	str	r3, [r2, #12]

	  CLR_WR;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <vSdData+0x5c>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <vSdData+0x5c>)
 8000d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d8c:	60d3      	str	r3, [r2, #12]

		delay1();
 8000d8e:	f7ff ffa9 	bl	8000ce4 <delay1>

		SET_WR;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <vSdData+0x5c>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <vSdData+0x5c>)
 8000d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9c:	60d3      	str	r3, [r2, #12]

	  SET_CS;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <vSdData+0x60>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <vSdData+0x60>)
 8000da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da8:	60d3      	str	r3, [r2, #12]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <data_out_16>:
//////////////////////////////////////////////////////

//传16位数据，16位数据一起赋值
void data_out_16(uint data_16bit)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uchar hdata,ldata;
	hdata=(data_16bit>>8)&0X00FF;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	73fb      	strb	r3, [r7, #15]
	ldata=data_16bit&0X00FF;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	73bb      	strb	r3, [r7, #14]
	vSdData(hdata);
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffc1 	bl	8000d58 <vSdData>
	vSdData(ldata);
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ffbd 	bl	8000d58 <vSdData>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <lcd_init>:
      vSdData(Fg_Color);
}


void lcd_init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

	//PORT_LCD_RST=0;
	//lcd_gpio_config();

	CLR_RS;			//低电平：复位
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <lcd_init+0x8c>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <lcd_init+0x8c>)
 8000df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df6:	60d3      	str	r3, [r2, #12]
	HAL_Delay(20);
 8000df8:	2014      	movs	r0, #20
 8000dfa:	f001 fc03 	bl	8002604 <HAL_Delay>
	//PORT_LCD_RST=1;
	SET_RS;			//高电平：复位结束
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <lcd_init+0x8c>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <lcd_init+0x8c>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	60d3      	str	r3, [r2, #12]
	HAL_Delay(80);
 8000e0a:	2050      	movs	r0, #80	; 0x50
 8000e0c:	f001 fbfa 	bl	8002604 <HAL_Delay>

	vSdCmd(0x11);	//开始初始化：
 8000e10:	2011      	movs	r0, #17
 8000e12:	f7ff ff6f 	bl	8000cf4 <vSdCmd>
	vSdCmd(0x26);vSdData(0x04);	//设置GAMMA参数
 8000e16:	2026      	movs	r0, #38	; 0x26
 8000e18:	f7ff ff6c 	bl	8000cf4 <vSdCmd>
 8000e1c:	2004      	movs	r0, #4
 8000e1e:	f7ff ff9b 	bl	8000d58 <vSdData>
	vSdCmd(0x36);vSdData(0xa8);	//行扫描顺序，列扫描顺序，横放/竖放    //设置：RAM写入方向从左向右、从上到下、数据顺序BGR
 8000e22:	2036      	movs	r0, #54	; 0x36
 8000e24:	f7ff ff66 	bl	8000cf4 <vSdCmd>
 8000e28:	20a8      	movs	r0, #168	; 0xa8
 8000e2a:	f7ff ff95 	bl	8000d58 <vSdData>
	vSdCmd(0xb1);vSdData(0x0e);vSdData(0x14);		//设置fr=61.7hz
 8000e2e:	20b1      	movs	r0, #177	; 0xb1
 8000e30:	f7ff ff60 	bl	8000cf4 <vSdCmd>
 8000e34:	200e      	movs	r0, #14
 8000e36:	f7ff ff8f 	bl	8000d58 <vSdData>
 8000e3a:	2014      	movs	r0, #20
 8000e3c:	f7ff ff8c 	bl	8000d58 <vSdData>
	vSdCmd(0x3a);vSdData(0x05);		//数据格式16bit
 8000e40:	203a      	movs	r0, #58	; 0x3a
 8000e42:	f7ff ff57 	bl	8000cf4 <vSdCmd>
 8000e46:	2005      	movs	r0, #5
 8000e48:	f7ff ff86 	bl	8000d58 <vSdData>
	vSdCmd(0x29);	//开显示
 8000e4c:	2029      	movs	r0, #41	; 0x29
 8000e4e:	f7ff ff51 	bl	8000cf4 <vSdCmd>

	SET_BK;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <lcd_init+0x90>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <lcd_init+0x90>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	60d3      	str	r3, [r2, #12]
	display_color(green);
 8000e5e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000e62:	f000 f865 	bl	8000f30 <display_color>
	HAL_Delay(1000);
 8000e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e6a:	f001 fbcb 	bl	8002604 <HAL_Delay>
	//TFT_Disp128160(gImage_Peaks_logo);
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	40010800 	.word	0x40010800

08000e7c <lcd_address>:
//定义窗口坐标：开始坐标（XS,YS)以及窗口大小（x_total,y_total)
void lcd_address(uint XS,uint YS,uint x_total,uint y_total)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
	int XE,YE;
	XE=XS+x_total-1;
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	3b01      	subs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
	YE=YS+y_total-1;
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
	vSdCmd(0x2a);		// 设置X开始及结束的地址
 8000e9e:	202a      	movs	r0, #42	; 0x2a
 8000ea0:	f7ff ff28 	bl	8000cf4 <vSdCmd>
	data_out_16(XS);	// X开始地址(16位）
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ff89 	bl	8000dbc <data_out_16>
	data_out_16(XE);	// X结束地址(16位）
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff85 	bl	8000dbc <data_out_16>

	vSdCmd(0x2b);		// 设置Y开始及结束的地址
 8000eb2:	202b      	movs	r0, #43	; 0x2b
 8000eb4:	f7ff ff1e 	bl	8000cf4 <vSdCmd>
	data_out_16(YS);	// Y开始地址(16位）
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f7ff ff7f 	bl	8000dbc <data_out_16>
	data_out_16(YE);	// Y结束地址(16位）
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff7b 	bl	8000dbc <data_out_16>

	vSdCmd(0x2c);	    // 写数据开始
 8000ec6:	202c      	movs	r0, #44	; 0x2c
 8000ec8:	f7ff ff14 	bl	8000cf4 <vSdCmd>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <TFT_Disp128160>:
-函数功能:显示128*160大小图片
-入口参数:水平扫高位在前160*128bmp
-出口参数:无
---------------------------------------------------------------------------------------*/
void TFT_Disp128160(const uchar *dat)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    int i1,j;
//	横屏显示
	lcd_address(0,0,160,128);
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	22a0      	movs	r2, #160	; 0xa0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff ffca 	bl	8000e7c <lcd_address>
	for(i1=0;i1<128;i1++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e019      	b.n	8000f22 <TFT_Disp128160+0x4e>
	{
		for(j=0;j<160;j++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	e010      	b.n	8000f16 <TFT_Disp128160+0x42>
		{
			vSdData(*dat++);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff2b 	bl	8000d58 <vSdData>
			vSdData(*dat++);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff24 	bl	8000d58 <vSdData>
		for(j=0;j<160;j++)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	2b9f      	cmp	r3, #159	; 0x9f
 8000f1a:	ddeb      	ble.n	8000ef4 <TFT_Disp128160+0x20>
	for(i1=0;i1<128;i1++)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b7f      	cmp	r3, #127	; 0x7f
 8000f26:	dde2      	ble.n	8000eee <TFT_Disp128160+0x1a>
//		{
//		 vSdData(*dat++);
//		 vSdData(*dat++);
//		}
//	}
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <display_color>:
	}
}

//显示全屏单一色彩
void display_color(uint color)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	int i1,j;

	lcd_address(0,0,160,128);
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	22a0      	movs	r2, #160	; 0xa0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff9c 	bl	8000e7c <lcd_address>
	for(i1=0;i1<128;i1++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e00e      	b.n	8000f68 <display_color+0x38>
	{
		for(j=0;j<160;j++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	e005      	b.n	8000f5c <display_color+0x2c>
		{
			data_out_16(color);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff33 	bl	8000dbc <data_out_16>
		for(j=0;j<160;j++)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b9f      	cmp	r3, #159	; 0x9f
 8000f60:	ddf6      	ble.n	8000f50 <display_color+0x20>
	for(i1=0;i1<128;i1++)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6c:	dded      	ble.n	8000f4a <display_color+0x1a>
		{
			data_out_16(color);
		}
	}
	*/
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b69      	ldr	r3, [pc, #420]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a68      	ldr	r2, [pc, #416]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa4:	4b63      	ldr	r3, [pc, #396]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a62      	ldr	r2, [pc, #392]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b60      	ldr	r3, [pc, #384]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b57      	ldr	r3, [pc, #348]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a56      	ldr	r2, [pc, #344]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b54      	ldr	r3, [pc, #336]	; (8001134 <MX_GPIO_Init+0x1bc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEY3A_Pin|LED1_DO_Pin|LED_DO_Pin|KEY4_Pin 
 8000fec:	2201      	movs	r2, #1
 8000fee:	f248 71ce 	movw	r1, #34766	; 0x87ce
 8000ff2:	4851      	ldr	r0, [pc, #324]	; (8001138 <MX_GPIO_Init+0x1c0>)
 8000ff4:	f001 fedb 	bl	8002dae <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin 
                          |CC2520_CS_GPIO_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|LED2_Pin|LED1_Pin 
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f248 7102 	movw	r1, #34562	; 0x8702
 8000ffe:	484f      	ldr	r0, [pc, #316]	; (800113c <MX_GPIO_Init+0x1c4>)
 8001000:	f001 fed5 	bl	8002dae <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CC2520_NRST_GPIO_Pin|CC2520_CLK_GPIO_Pin|CC2520_MOSI_GPIO_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2170      	movs	r1, #112	; 0x70
 8001008:	484c      	ldr	r0, [pc, #304]	; (800113c <MX_GPIO_Init+0x1c4>)
 800100a:	f001 fed0 	bl	8002dae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2520_POWEN_GPIO_GPIO_Port, CC2520_POWEN_GPIO_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2110      	movs	r1, #16
 8001012:	4849      	ldr	r0, [pc, #292]	; (8001138 <MX_GPIO_Init+0x1c0>)
 8001014:	f001 fecb 	bl	8002dae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_CE3_Pin|D0_Pin|D1_Pin|D2_Pin 
 8001018:	2201      	movs	r2, #1
 800101a:	f24f 0102 	movw	r1, #61442	; 0xf002
 800101e:	4848      	ldr	r0, [pc, #288]	; (8001140 <MX_GPIO_Init+0x1c8>)
 8001020:	f001 fec5 	bl	8002dae <HAL_GPIO_WritePin>
                          |D3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7140 	mov.w	r1, #768	; 0x300
 800102a:	4845      	ldr	r0, [pc, #276]	; (8001140 <MX_GPIO_Init+0x1c8>)
 800102c:	f001 febf 	bl	8002dae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY5_Pin|CC2520_GP0_GPIO_Pin;
 8001030:	f247 0320 	movw	r3, #28704	; 0x7020
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4619      	mov	r1, r3
 8001044:	483c      	ldr	r0, [pc, #240]	; (8001138 <MX_GPIO_Init+0x1c0>)
 8001046:	f001 fd31 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = KEY3A_Pin|LED1_DO_Pin|LED_DO_Pin|KEY4_Pin 
 800104a:	f248 73ce 	movw	r3, #34766	; 0x87ce
 800104e:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin 
                          |CC2520_CS_GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4835      	ldr	r0, [pc, #212]	; (8001138 <MX_GPIO_Init+0x1c0>)
 8001064:	f001 fd22 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 PAPin PAPin 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|LED2_Pin|LED1_Pin 
 8001068:	f248 7302 	movw	r3, #34562	; 0x8702
 800106c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	482e      	ldr	r0, [pc, #184]	; (800113c <MX_GPIO_Init+0x1c4>)
 8001082:	f001 fd13 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CC2520_NRST_GPIO_Pin|CC2520_CLK_GPIO_Pin|CC2520_MOSI_GPIO_Pin;
 8001086:	2370      	movs	r3, #112	; 0x70
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	4827      	ldr	r0, [pc, #156]	; (800113c <MX_GPIO_Init+0x1c4>)
 800109e:	f001 fd05 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2520_MISO_GPIO_Pin;
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CC2520_MISO_GPIO_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <MX_GPIO_Init+0x1c4>)
 80010b6:	f001 fcf9 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2520_POWEN_GPIO_Pin;
 80010ba:	2310      	movs	r3, #16
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CC2520_POWEN_GPIO_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <MX_GPIO_Init+0x1c0>)
 80010d2:	f001 fceb 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CC2520_GP1_GPIO_Pin;
 80010d6:	2301      	movs	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CC2520_GP1_GPIO_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_GPIO_Init+0x1c8>)
 80010ea:	f001 fcdf 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = RS485_CE3_Pin|D0_Pin|D1_Pin|D2_Pin 
 80010ee:	f24f 0302 	movw	r3, #61442	; 0xf002
 80010f2:	613b      	str	r3, [r7, #16]
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_GPIO_Init+0x1c8>)
 8001108:	f001 fcd0 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800110c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_GPIO_Init+0x1c8>)
 8001126:	f001 fcc1 	bl	8002aac <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	40011000 	.word	0x40011000
 800113c:	40010800 	.word	0x40010800
 8001140:	40010c00 	.word	0x40010c00

08001144 <delay_init>:
typedef uint32_t u32;
u8 fac_us;


void delay_init(u8 SYSCLK)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
    #if SYSTEM_SUPPORT_OS
        u32 reload;
    #endif

    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800114e:	2004      	movs	r0, #4
 8001150:	f001 fb88 	bl	8002864 <HAL_SYSTICK_CLKSourceConfig>
    //SysTick  HCLK
    fac_us=SYSCLK;              // OS,fac_us
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <delay_init+0x20>)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	7013      	strb	r3, [r2, #0]
        SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;// SYSTICK
        SysTick->LOAD=reload;                   // 1/OS_TICKS_PER_SEC
        SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; // SYSTICK
        #else
    #endif
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200007e8 	.word	0x200007e8

08001168 <delay_us1>:


void delay_us1(u32 nus)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told,tnow,tcnt=0;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    u32 reload=SysTick->LOAD;                   //LOAD
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <delay_us1+0x74>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	617b      	str	r3, [r7, #20]
    ticks=nus*fac_us;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <delay_us1+0x78>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	613b      	str	r3, [r7, #16]
    told=SysTick->VAL;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <delay_us1+0x74>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	61fb      	str	r3, [r7, #28]
    while(1)
    {
        tnow=SysTick->VAL;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <delay_us1+0x74>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	60fb      	str	r3, [r7, #12]
        if(tnow!=told)
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	429a      	cmp	r2, r3
 800119a:	d0f8      	beq.n	800118e <delay_us1+0x26>
        {
            if(tnow<told)tcnt+=told-tnow;       // SYSTICK.
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d206      	bcs.n	80011b2 <delay_us1+0x4a>
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	e007      	b.n	80011c2 <delay_us1+0x5a>
            else tcnt+=reload-tnow+told;
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1ad2      	subs	r2, r2, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	4413      	add	r3, r2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4413      	add	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
            told=tnow;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	61fb      	str	r3, [r7, #28]
            if(tcnt>=ticks)break;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d200      	bcs.n	80011d0 <delay_us1+0x68>
        tnow=SysTick->VAL;
 80011ce:	e7de      	b.n	800118e <delay_us1+0x26>
            if(tcnt>=ticks)break;
 80011d0:	bf00      	nop
        }
    }
}
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	e000e010 	.word	0xe000e010
 80011e0:	200007e8 	.word	0x200007e8

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f001 f9aa 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f89c 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f7ff fec2 	bl	8000f78 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011f4:	f000 fd3e 	bl	8001c74 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011f8:	f000 fdd6 	bl	8001da8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80011fc:	f000 fee0 	bl	8001fc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001200:	f000 ff08 	bl	8002014 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001204:	f000 fd82 	bl	8001d0c <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8001208:	f000 ffbc 	bl	8002184 <MX_USB_PCD_Init>
  MX_TIM5_Init();
 800120c:	f000 fe1a 	bl	8001e44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8001210:	4836      	ldr	r0, [pc, #216]	; (80012ec <main+0x108>)
 8001212:	f002 fbda 	bl	80039ca <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001216:	4836      	ldr	r0, [pc, #216]	; (80012f0 <main+0x10c>)
 8001218:	f002 fbd7 	bl	80039ca <HAL_TIM_Base_Start_IT>
  RR=0; GG=0; BB=0;
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <main+0x110>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <main+0x114>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	4b34      	ldr	r3, [pc, #208]	; (80012fc <main+0x118>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
  FLAG_RECEIVE_OK1=1;
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <main+0x11c>)
 8001230:	7813      	ldrb	r3, [r2, #0]
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	7013      	strb	r3, [r2, #0]
  fre_set=0;
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <main+0x120>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3,(uint8_t *)cRxBuffer,13); //
 800123e:	220d      	movs	r2, #13
 8001240:	4931      	ldr	r1, [pc, #196]	; (8001308 <main+0x124>)
 8001242:	4832      	ldr	r0, [pc, #200]	; (800130c <main+0x128>)
 8001244:	f002 ffa5 	bl	8004192 <HAL_UART_Receive_IT>
 // delay_init(72);

  reset_ws2812();
 8001248:	f000 ffdc 	bl	8002204 <reset_ws2812>
  reset_ws2812_1();
 800124c:	f000 ffea 	bl	8002224 <reset_ws2812_1>
  RGB_close1();
 8001250:	f001 f92c 	bl	80024ac <RGB_close1>
	while(HAL_UART_Transmit_IT(&huart3, (uint8_t *)TX_BUFF_WENXIN, sizeof(TX_BUFF_WENXIN))!=HAL_OK)
	{
		;
	}
	*/
  lcd_init();
 8001254:	f7ff fdc8 	bl	8000de8 <lcd_init>
  TFT_Disp128160(gImage_Peaks_logo);
 8001258:	482d      	ldr	r0, [pc, #180]	; (8001310 <main+0x12c>)
 800125a:	f7ff fe3b 	bl	8000ed4 <TFT_Disp128160>
	  HAL_GPIO_WritePin(RS485_CE3_GPIO_Port, RS485_CE3_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	482c      	ldr	r0, [pc, #176]	; (8001314 <main+0x130>)
 8001264:	f001 fda3 	bl	8002dae <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Stop_IT(&htim2);//关闭定时
	  HAL_TIM_Base_Stop_IT(&htim3);//关闭定时
	  HAL_TIM_Base_Stop_IT(&htim4);//关闭定时
	  HAL_TIM_Base_Stop_IT(&htim5);//关闭定时
	  */
	  HAL_Delay(1);//延时大概 1mS
 8001268:	2001      	movs	r0, #1
 800126a:	f001 f9cb 	bl	8002604 <HAL_Delay>
	  CC2520_GPIO_Config();
 800126e:	f7ff f81f 	bl	80002b0 <CC2520_GPIO_Config>
	  //--------------------------SPI初始化函�??????---------------------------
		CC2520_SPI_Init();
 8001272:	f7ff fac3 	bl	80007fc <CC2520_SPI_Init>
		CC2520_Init(0);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff f888 	bl	800038c <CC2520_Init>
		CC2520_Command(CMD_SXOSCOFF);
 800127c:	2046      	movs	r0, #70	; 0x46
 800127e:	f7ff f9f9 	bl	8000674 <CC2520_Command>
		//CC2520_IntoActMode_Init();
	 // CC2520_Init(0);
	  flag_CC2520_Search=0;
 8001282:	4a25      	ldr	r2, [pc, #148]	; (8001318 <main+0x134>)
 8001284:	7813      	ldrb	r3, [r2, #0]
 8001286:	f36f 0382 	bfc	r3, #2, #1
 800128a:	7013      	strb	r3, [r2, #0]
		{
			flag_CC2520_Search=0;
			CC2520_Search();
		}
		*/
		if((cc2520_rx_cycle>685))		//连续周期10s
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <main+0x138>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f240 22ad 	movw	r2, #685	; 0x2ad
 8001294:	4293      	cmp	r3, r2
 8001296:	d909      	bls.n	80012ac <main+0xc8>
		{
			cc2520_rx_cycle=0;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <main+0x138>)
 800129a:	2200      	movs	r2, #0
 800129c:	801a      	strh	r2, [r3, #0]
			//CC2520_Command(CMD_SXOSCON);	//zigbee晶振�??�??
			//HAL_Delay(1);
			temp_send();
 800129e:	f7ff fba3 	bl	80009e8 <temp_send>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80012a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <main+0x13c>)
 80012a8:	f001 fd99 	bl	8002dde <HAL_GPIO_TogglePin>
			CC2520_Init(fre_set);
			CC2520_IntoActMode_Init();
			CC2520_SetRxMode();		//设置为接收模�??????
		}
		*/
      if(FLAG_RECEIVE_OK)
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <main+0x140>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0e8      	beq.n	800128c <main+0xa8>
      {
    	  FLAG_RECEIVE_OK=0;
 80012ba:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <main+0x140>)
 80012bc:	7813      	ldrb	r3, [r2, #0]
 80012be:	f36f 13c7 	bfc	r3, #7, #1
 80012c2:	7013      	strb	r3, [r2, #0]
	      HAL_GPIO_WritePin(GPIOB, RS485_CE3_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2102      	movs	r1, #2
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <main+0x130>)
 80012ca:	f001 fd70 	bl	8002dae <HAL_GPIO_WritePin>
	      HAL_Delay(2);//延时大概 1mS
 80012ce:	2002      	movs	r0, #2
 80012d0:	f001 f998 	bl	8002604 <HAL_Delay>
    	  IOT_PROCESS();	//IOT处理进程
 80012d4:	f000 fa78 	bl	80017c8 <IOT_PROCESS>
				;
			}
			*/
    	//}

		  HAL_GPIO_WritePin(GPIOB, RS485_CE3_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <main+0x130>)
 80012de:	f001 fd66 	bl	8002dae <HAL_GPIO_WritePin>
		  HAL_Delay(1);//延时大概 1mS
 80012e2:	2001      	movs	r0, #1
 80012e4:	f001 f98e 	bl	8002604 <HAL_Delay>
		if((cc2520_rx_cycle>685))		//连续周期10s
 80012e8:	e7d0      	b.n	800128c <main+0xa8>
 80012ea:	bf00      	nop
 80012ec:	200007a8 	.word	0x200007a8
 80012f0:	200005dc 	.word	0x200005dc
 80012f4:	20000dce 	.word	0x20000dce
 80012f8:	20000dc8 	.word	0x20000dc8
 80012fc:	20000dd0 	.word	0x20000dd0
 8001300:	2000015c 	.word	0x2000015c
 8001304:	20000481 	.word	0x20000481
 8001308:	20000834 	.word	0x20000834
 800130c:	20000620 	.word	0x20000620
 8001310:	080049e4 	.word	0x080049e4
 8001314:	40010c00 	.word	0x40010c00
 8001318:	20000050 	.word	0x20000050
 800131c:	20000548 	.word	0x20000548
 8001320:	40010800 	.word	0x40010800
 8001324:	2000004c 	.word	0x2000004c

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b096      	sub	sp, #88	; 0x58
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fb2a 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135c:	2301      	movs	r3, #1
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136a:	2301      	movs	r3, #1
 800136c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001376:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001378:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800137c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fe24 	bl	8002fd0 <HAL_RCC_OscConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800138e:	f000 fbb3 	bl	8001af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001392:	230f      	movs	r3, #15
 8001394:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 f88e 	bl	80034d0 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ba:	f000 fb9d 	bl	8001af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013be:	2310      	movs	r3, #16
 80013c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fa1d 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013d4:	f000 fb90 	bl	8001af8 <Error_Handler>
  }
}
 80013d8:	bf00      	nop
 80013da:	3758      	adds	r7, #88	; 0x58
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim2.Instance)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4ba4      	ldr	r3, [pc, #656]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10e      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		FLAG_RECEIVE_OK = 1;	//断帧机制   20ms没接收到数据，判断为1 �????????????
 80013f4:	4aa3      	ldr	r2, [pc, #652]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80013f6:	7813      	ldrb	r3, [r2, #0]
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	7013      	strb	r3, [r2, #0]

		Rx_LEN=Rx_count_UART3;
 80013fe:	4ba2      	ldr	r3, [pc, #648]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001404:	701a      	strb	r2, [r3, #0]
		Rx_count_UART3=0;
 8001406:	4ba0      	ldr	r3, [pc, #640]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);//关闭定时
 800140c:	489c      	ldr	r0, [pc, #624]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800140e:	f002 faff 	bl	8003a10 <HAL_TIM_Base_Stop_IT>
	}
	if (htim->Instance == htim3.Instance)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b9e      	ldr	r3, [pc, #632]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	f040 816c 	bne.w	80016f8 <HAL_TIM_PeriodElapsedCallback+0x318>
	{
		cc2520_rx_cycle++;
 8001420:	4b9c      	ldr	r3, [pc, #624]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b9a      	ldr	r3, [pc, #616]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800142a:	801a      	strh	r2, [r3, #0]
		time_cc2520_no_rx++;
 800142c:	4b9a      	ldr	r3, [pc, #616]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a99      	ldr	r2, [pc, #612]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001434:	6013      	str	r3, [r2, #0]
		time_delay++;
 8001436:	4b99      	ldr	r3, [pc, #612]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a97      	ldr	r2, [pc, #604]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800143e:	6013      	str	r3, [r2, #0]
		time3_20ms++;
 8001440:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b95      	ldr	r3, [pc, #596]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800144a:	801a      	strh	r2, [r3, #0]
		if(time3_20ms>25)
 800144c:	4b94      	ldr	r3, [pc, #592]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2b19      	cmp	r3, #25
 8001452:	d90e      	bls.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			time3_20ms=0;
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001456:	2200      	movs	r2, #0
 8001458:	801a      	strh	r2, [r3, #0]
			if(flag_cc2520_ok)
 800145a:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	488e      	ldr	r0, [pc, #568]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800146e:	f001 fcb6 	bl	8002dde <HAL_GPIO_TogglePin>
			}
		}

		SET_KEY3_0;
 8001472:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	4a8d      	ldr	r2, [pc, #564]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800147c:	60d3      	str	r3, [r2, #12]
		SET_KEY4_1;
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	4a8a      	ldr	r2, [pc, #552]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	60d3      	str	r3, [r2, #12]
		//asm("nop");asm("nop");
		  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)==0)	//SW1
 800148a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148e:	4887      	ldr	r0, [pc, #540]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001490:	f001 fc76 	bl	8002d80 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d112      	bne.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0xe0>
		  {
			  g_u8Time20ms_1++;
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b83      	ldr	r3, [pc, #524]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014a4:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_1>1)
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d922      	bls.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x114>
			  {
				  g_u8Time20ms_1=3;
 80014ae:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014b0:	2203      	movs	r2, #3
 80014b2:	701a      	strb	r2, [r3, #0]
				  key1_in_Flag=1;
 80014b4:	4a7f      	ldr	r2, [pc, #508]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014b6:	7813      	ldrb	r3, [r2, #0]
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	7013      	strb	r3, [r2, #0]
 80014be:	e019      	b.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x114>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_1=0;
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
			  if(key1_in_Flag)
 80014c6:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00f      	beq.n	80014f4 <HAL_TIM_PeriodElapsedCallback+0x114>
			  {
				  key1_in_Flag=0;
 80014d4:	4a77      	ldr	r2, [pc, #476]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80014d6:	7813      	ldrb	r3, [r2, #0]
 80014d8:	f36f 0300 	bfc	r3, #0, #1
 80014dc:	7013      	strb	r3, [r2, #0]
				  RR=255; GG=0; BB=0;
 80014de:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
				  send_string_data1();
 80014f0:	f000 ffa0 	bl	8002434 <send_string_data1>
				  //send_image(gImage_8);
			  }
		  }
		  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin)==0)	//SW3
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	486c      	ldr	r0, [pc, #432]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80014fa:	f001 fc41 	bl	8002d80 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d112      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x14a>
		  {
			  g_u8Time20ms_2++;
 8001504:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b6d      	ldr	r3, [pc, #436]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800150e:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_2>1)
 8001510:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d922      	bls.n	800155e <HAL_TIM_PeriodElapsedCallback+0x17e>
			  {
				  g_u8Time20ms_2=3;
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800151a:	2203      	movs	r2, #3
 800151c:	701a      	strb	r2, [r3, #0]
				  key2_in_Flag=1;
 800151e:	4a65      	ldr	r2, [pc, #404]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001520:	7813      	ldrb	r3, [r2, #0]
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	7013      	strb	r3, [r2, #0]
 8001528:	e019      	b.n	800155e <HAL_TIM_PeriodElapsedCallback+0x17e>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_2=0;
 800152a:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
			  if(key2_in_Flag)
 8001530:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00f      	beq.n	800155e <HAL_TIM_PeriodElapsedCallback+0x17e>
			  {
				  key2_in_Flag=0;
 800153e:	4a5d      	ldr	r2, [pc, #372]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001540:	7813      	ldrb	r3, [r2, #0]
 8001542:	f36f 0341 	bfc	r3, #1, #1
 8001546:	7013      	strb	r3, [r2, #0]
				  //send_image(gImage_9);
				  RR=255; GG=255; BB=0;
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001550:	22ff      	movs	r2, #255	; 0xff
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
				  send_string_data1();
 800155a:	f000 ff6b 	bl	8002434 <send_string_data1>
			  }
		  }

		SET_KEY3_1;
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	60d3      	str	r3, [r2, #12]
		SET_KEY4_0;
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001570:	f023 0308 	bic.w	r3, r3, #8
 8001574:	60d3      	str	r3, [r2, #12]
		//asm("nop");asm("nop");
		  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)==0)	//SW2
 8001576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157a:	484c      	ldr	r0, [pc, #304]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800157c:	f001 fc00 	bl	8002d80 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d112      	bne.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x1cc>
		  {
			  g_u8Time20ms_3++;
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001590:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_3>1)
 8001592:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d922      	bls.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x200>
			  {
				  g_u8Time20ms_3=3;
 800159a:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800159c:	2203      	movs	r2, #3
 800159e:	701a      	strb	r2, [r3, #0]
				  key3_in_Flag=1;
 80015a0:	4a44      	ldr	r2, [pc, #272]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015a2:	7813      	ldrb	r3, [r2, #0]
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	7013      	strb	r3, [r2, #0]
 80015aa:	e019      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x200>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_3=0;
 80015ac:	4b46      	ldr	r3, [pc, #280]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
			  if(key3_in_Flag)
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00f      	beq.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x200>
			  {
				  key3_in_Flag=0;
 80015c0:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80015c2:	7813      	ldrb	r3, [r2, #0]
 80015c4:	f36f 0382 	bfc	r3, #2, #1
 80015c8:	7013      	strb	r3, [r2, #0]
				 // send_image(gImage_8);
				  RR=255; GG=255; BB=255;
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	701a      	strb	r2, [r3, #0]
				  send_string_data1();
 80015dc:	f000 ff2a 	bl	8002434 <send_string_data1>
			  }
		  }
		  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin)==0)	//SW4
 80015e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e4:	4831      	ldr	r0, [pc, #196]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80015e6:	f001 fbcb 	bl	8002d80 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d112      	bne.n	8001616 <HAL_TIM_PeriodElapsedCallback+0x236>
		  {
			  g_u8Time20ms_4++;
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015fa:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_4>1)
 80015fc:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d922      	bls.n	800164a <HAL_TIM_PeriodElapsedCallback+0x26a>
			  {
				  g_u8Time20ms_4=3;
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001606:	2203      	movs	r2, #3
 8001608:	701a      	strb	r2, [r3, #0]
				  key4_in_Flag=1;
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800160c:	7813      	ldrb	r3, [r2, #0]
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	7013      	strb	r3, [r2, #0]
 8001614:	e019      	b.n	800164a <HAL_TIM_PeriodElapsedCallback+0x26a>
			  }
		  }
		  else
		  {
			  g_u8Time20ms_4=0;
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
			  if(key4_in_Flag)
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00f      	beq.n	800164a <HAL_TIM_PeriodElapsedCallback+0x26a>
			  {
				  key4_in_Flag=0;
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800162c:	7813      	ldrb	r3, [r2, #0]
 800162e:	f36f 03c3 	bfc	r3, #3, #1
 8001632:	7013      	strb	r3, [r2, #0]
				  //send_image(gImage_9);
				  RR=0; GG=0; BB=0;
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
				  send_string_data1();
 8001646:	f000 fef5 	bl	8002434 <send_string_data1>
			  }
		  }
		  if(HAL_GPIO_ReadPin(KEY5_GPIO_Port, KEY5_Pin)==0)
 800164a:	2120      	movs	r1, #32
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800164e:	f001 fb97 	bl	8002d80 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d13d      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x2f4>
		  {
			  g_u8Time20ms_5++;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001662:	701a      	strb	r2, [r3, #0]
			  if(g_u8Time20ms_5>1)
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d945      	bls.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x318>
			  {
				  g_u8Time20ms_5=3;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800166e:	2203      	movs	r2, #3
 8001670:	701a      	strb	r2, [r3, #0]
				  key5_in_Flag=1;
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001674:	7813      	ldrb	r3, [r2, #0]
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	e03c      	b.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x318>
 800167e:	bf00      	nop
 8001680:	20000a08 	.word	0x20000a08
 8001684:	2000004c 	.word	0x2000004c
 8001688:	20000763 	.word	0x20000763
 800168c:	2000061c 	.word	0x2000061c
 8001690:	200007a8 	.word	0x200007a8
 8001694:	20000548 	.word	0x20000548
 8001698:	20000154 	.word	0x20000154
 800169c:	20000378 	.word	0x20000378
 80016a0:	2000003c 	.word	0x2000003c
 80016a4:	20000050 	.word	0x20000050
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40011000 	.word	0x40011000
 80016b0:	20000b56 	.word	0x20000b56
 80016b4:	20000044 	.word	0x20000044
 80016b8:	20000dce 	.word	0x20000dce
 80016bc:	20000dc8 	.word	0x20000dc8
 80016c0:	20000dd0 	.word	0x20000dd0
 80016c4:	200008fd 	.word	0x200008fd
 80016c8:	20000b58 	.word	0x20000b58
 80016cc:	200007a4 	.word	0x200007a4
 80016d0:	20000984 	.word	0x20000984
			  }
		  }
		  else
		  {
			  g_u8Time20ms_5=0;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
			  if(key5_in_Flag)
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x318>
			  {
				  key5_in_Flag=0;
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80016ea:	7813      	ldrb	r3, [r2, #0]
 80016ec:	f36f 1345 	bfc	r3, #5, #1
 80016f0:	7013      	strb	r3, [r2, #0]
				  send_image(gImage_3);
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80016f4:	f000 feb2 	bl	800245c <send_image>
					}
					*/
			  }
		  }
	}
	if (htim->Instance == htim4.Instance)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d10d      	bne.n	8001720 <HAL_TIM_PeriodElapsedCallback+0x340>
	{
		////HAL_GPIO_TogglePin(LED_DO_GPIO_Port, LED_DO_Pin);
		////HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    	if(FLAG_RECEIVE_OK1)
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_TIM_PeriodElapsedCallback+0x340>
    	{
    		FLAG_RECEIVE_OK1=0;
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001714:	7813      	ldrb	r3, [r2, #0]
 8001716:	f36f 0382 	bfc	r3, #2, #1
 800171a:	7013      	strb	r3, [r2, #0]
    		send_string_data1();
 800171c:	f000 fe8a 	bl	8002434 <send_string_data1>
    		//send_string_data1();
    		//send_string_data1();
    		//send_string_data1();
    	}
	}
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000984 	.word	0x20000984
 800172c:	20000044 	.word	0x20000044
 8001730:	0800e9ec 	.word	0x0800e9ec
 8001734:	200005dc 	.word	0x200005dc
 8001738:	2000015c 	.word	0x2000015c

0800173c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(huart==&huart1)
  {

  }

  if(huart==&huart3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <HAL_UART_RxCpltCallback+0x78>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d12f      	bne.n	80017ac <HAL_UART_RxCpltCallback+0x70>
  {
		__HAL_TIM_SET_COUNTER(&htim2,0);
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_UART_RxCpltCallback+0x7c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
		Rxbuff3[Rx_count_UART3++] = cRxBuffer[0];
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_RxCpltCallback+0x80>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	b2d1      	uxtb	r1, r2
 800175c:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_UART_RxCpltCallback+0x80>)
 800175e:	7011      	strb	r1, [r2, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_UART_RxCpltCallback+0x84>)
 8001764:	7819      	ldrb	r1, [r3, #0]
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_UART_RxCpltCallback+0x88>)
 8001768:	5499      	strb	r1, [r3, r2]
		if((Rxbuff3[0]=='R'))
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_UART_RxCpltCallback+0x88>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b52      	cmp	r3, #82	; 0x52
 8001770:	d108      	bne.n	8001784 <HAL_UART_RxCpltCallback+0x48>
		{
			__HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f06f 0201 	mvn.w	r2, #1
 800177a:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 800177c:	480e      	ldr	r0, [pc, #56]	; (80017b8 <HAL_UART_RxCpltCallback+0x7c>)
 800177e:	f002 f924 	bl	80039ca <HAL_TIM_Base_Start_IT>
 8001782:	e00e      	b.n	80017a2 <HAL_UART_RxCpltCallback+0x66>
			//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		}
		else
		{
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_UART_RxCpltCallback+0x7c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0201 	mvn.w	r2, #1
 8001794:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim2);
 8001796:	4808      	ldr	r0, [pc, #32]	; (80017b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001798:	f002 f917 	bl	80039ca <HAL_TIM_Base_Start_IT>
			Rx_count_UART3=0;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_UART_RxCpltCallback+0x80>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
		if(Rx_count_UART3>=7)
		{
		  Rx_count_UART3=0;
		}
		*/
		HAL_UART_Receive_IT(&huart3,(uint8_t *)cRxBuffer,1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	4906      	ldr	r1, [pc, #24]	; (80017c0 <HAL_UART_RxCpltCallback+0x84>)
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <HAL_UART_RxCpltCallback+0x78>)
 80017a8:	f002 fcf3 	bl	8004192 <HAL_UART_Receive_IT>
  }




}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000620 	.word	0x20000620
 80017b8:	20000a08 	.word	0x20000a08
 80017bc:	20000763 	.word	0x20000763
 80017c0:	20000834 	.word	0x20000834
 80017c4:	20000a8c 	.word	0x20000a8c

080017c8 <IOT_PROCESS>:
/******************************************/
void IOT_PROCESS(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	//if((Rxbuff3[0]=='R'))
    if((Rxbuff3[0]=='R')&&(Rxbuff3[Rx_LEN-1]=='*'))
 80017cc:	4b95      	ldr	r3, [pc, #596]	; (8001a24 <IOT_PROCESS+0x25c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b52      	cmp	r3, #82	; 0x52
 80017d2:	f040 8175 	bne.w	8001ac0 <IOT_PROCESS+0x2f8>
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <IOT_PROCESS+0x260>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	4a91      	ldr	r2, [pc, #580]	; (8001a24 <IOT_PROCESS+0x25c>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	2b2a      	cmp	r3, #42	; 0x2a
 80017e2:	f040 816d 	bne.w	8001ac0 <IOT_PROCESS+0x2f8>
    {
       FLAG_RECEIVE_OK1=1;
 80017e6:	4a91      	ldr	r2, [pc, #580]	; (8001a2c <IOT_PROCESS+0x264>)
 80017e8:	7813      	ldrb	r3, [r2, #0]
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	7013      	strb	r3, [r2, #0]
       for(i=0;i<Rx_LEN-1;i++)
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <IOT_PROCESS+0x268>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	e028      	b.n	800184a <IOT_PROCESS+0x82>
       {
    	   if(Rxbuff3[i]=='R')
 80017f8:	4b8d      	ldr	r3, [pc, #564]	; (8001a30 <IOT_PROCESS+0x268>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001800:	5c9b      	ldrb	r3, [r3, r2]
 8001802:	2b52      	cmp	r3, #82	; 0x52
 8001804:	d104      	bne.n	8001810 <IOT_PROCESS+0x48>
    	   {
    		   R_BIT=i;
 8001806:	4b8a      	ldr	r3, [pc, #552]	; (8001a30 <IOT_PROCESS+0x268>)
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	4b8a      	ldr	r3, [pc, #552]	; (8001a34 <IOT_PROCESS+0x26c>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e016      	b.n	800183e <IOT_PROCESS+0x76>
    	   }
    	   else if(Rxbuff3[i]=='G')
 8001810:	4b87      	ldr	r3, [pc, #540]	; (8001a30 <IOT_PROCESS+0x268>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b83      	ldr	r3, [pc, #524]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	2b47      	cmp	r3, #71	; 0x47
 800181c:	d104      	bne.n	8001828 <IOT_PROCESS+0x60>
    	   {
    		   G_BIT=i;
 800181e:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <IOT_PROCESS+0x268>)
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <IOT_PROCESS+0x270>)
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e00a      	b.n	800183e <IOT_PROCESS+0x76>
    	   }
    	   else if(Rxbuff3[i]=='B')
 8001828:	4b81      	ldr	r3, [pc, #516]	; (8001a30 <IOT_PROCESS+0x268>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001830:	5c9b      	ldrb	r3, [r3, r2]
 8001832:	2b42      	cmp	r3, #66	; 0x42
 8001834:	d103      	bne.n	800183e <IOT_PROCESS+0x76>
    	   {
    		   B_BIT=i;
 8001836:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <IOT_PROCESS+0x268>)
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <IOT_PROCESS+0x274>)
 800183c:	701a      	strb	r2, [r3, #0]
       for(i=0;i<Rx_LEN-1;i++)
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <IOT_PROCESS+0x268>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b7a      	ldr	r3, [pc, #488]	; (8001a30 <IOT_PROCESS+0x268>)
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <IOT_PROCESS+0x268>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <IOT_PROCESS+0x260>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	429a      	cmp	r2, r3
 8001858:	dbce      	blt.n	80017f8 <IOT_PROCESS+0x30>
    	   }
       }
       delta_RG=G_BIT-R_BIT-1;
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <IOT_PROCESS+0x270>)
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <IOT_PROCESS+0x26c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <IOT_PROCESS+0x278>)
 800186c:	701a      	strb	r2, [r3, #0]
       delta_GB=B_BIT-G_BIT-1;
 800186e:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <IOT_PROCESS+0x274>)
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <IOT_PROCESS+0x270>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b71      	ldr	r3, [pc, #452]	; (8001a44 <IOT_PROCESS+0x27c>)
 8001880:	701a      	strb	r2, [r3, #0]
       delta_BX=Rx_LEN-B_BIT-1-1;
 8001882:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <IOT_PROCESS+0x260>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <IOT_PROCESS+0x274>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3b02      	subs	r3, #2
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <IOT_PROCESS+0x280>)
 8001894:	701a      	strb	r2, [r3, #0]
       switch (delta_RG)
 8001896:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <IOT_PROCESS+0x278>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d00d      	beq.n	80018ba <IOT_PROCESS+0xf2>
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d021      	beq.n	80018e6 <IOT_PROCESS+0x11e>
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d146      	bne.n	8001934 <IOT_PROCESS+0x16c>
       {
           case 0x01:
           {
        	   RR=Rxbuff3[G_BIT-1]-0X30;
 80018a6:	4b64      	ldr	r3, [pc, #400]	; (8001a38 <IOT_PROCESS+0x270>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	4a5d      	ldr	r2, [pc, #372]	; (8001a24 <IOT_PROCESS+0x25c>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	3b30      	subs	r3, #48	; 0x30
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <IOT_PROCESS+0x284>)
 80018b6:	701a      	strb	r2, [r3, #0]
           }break;
 80018b8:	e03c      	b.n	8001934 <IOT_PROCESS+0x16c>
           case 0x02:
           {
        	   RR=(Rxbuff3[G_BIT-1]-0X30)+(Rxbuff3[G_BIT-2]-0X30)*10;
 80018ba:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <IOT_PROCESS+0x270>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <IOT_PROCESS+0x25c>)
 80018c2:	5cd2      	ldrb	r2, [r2, r3]
 80018c4:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <IOT_PROCESS+0x270>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3b02      	subs	r3, #2
 80018ca:	4956      	ldr	r1, [pc, #344]	; (8001a24 <IOT_PROCESS+0x25c>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	4619      	mov	r1, r3
 80018d0:	0089      	lsls	r1, r1, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4413      	add	r3, r2
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b10      	subs	r3, #16
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <IOT_PROCESS+0x284>)
 80018e2:	701a      	strb	r2, [r3, #0]
           }break;
 80018e4:	e026      	b.n	8001934 <IOT_PROCESS+0x16c>
           case 0x03:
           {
        	   RR=(Rxbuff3[G_BIT-1]-0X30)+(Rxbuff3[G_BIT-2]-0X30)*10+(Rxbuff3[G_BIT-3]-0X30)*100;
 80018e6:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <IOT_PROCESS+0x270>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	4a4d      	ldr	r2, [pc, #308]	; (8001a24 <IOT_PROCESS+0x25c>)
 80018ee:	5cd2      	ldrb	r2, [r2, r3]
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <IOT_PROCESS+0x270>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	3b02      	subs	r3, #2
 80018f6:	494b      	ldr	r1, [pc, #300]	; (8001a24 <IOT_PROCESS+0x25c>)
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	4619      	mov	r1, r3
 80018fc:	0089      	lsls	r1, r1, #2
 80018fe:	440b      	add	r3, r1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <IOT_PROCESS+0x270>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b03      	subs	r3, #3
 800190e:	4945      	ldr	r1, [pc, #276]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	4619      	mov	r1, r3
 8001914:	0089      	lsls	r1, r1, #2
 8001916:	440b      	add	r3, r1
 8001918:	4619      	mov	r1, r3
 800191a:	0088      	lsls	r0, r1, #2
 800191c:	4619      	mov	r1, r3
 800191e:	4603      	mov	r3, r0
 8001920:	440b      	add	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3330      	adds	r3, #48	; 0x30
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <IOT_PROCESS+0x284>)
 8001930:	701a      	strb	r2, [r3, #0]
           }break;
 8001932:	bf00      	nop
       }
       switch (delta_GB)
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <IOT_PROCESS+0x27c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d00d      	beq.n	8001958 <IOT_PROCESS+0x190>
 800193c:	2b03      	cmp	r3, #3
 800193e:	d021      	beq.n	8001984 <IOT_PROCESS+0x1bc>
 8001940:	2b01      	cmp	r3, #1
 8001942:	d146      	bne.n	80019d2 <IOT_PROCESS+0x20a>
       {
           case 0x01:
           {
        	   GG=Rxbuff3[B_BIT-1]-0X30;
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <IOT_PROCESS+0x274>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <IOT_PROCESS+0x25c>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	3b30      	subs	r3, #48	; 0x30
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <IOT_PROCESS+0x288>)
 8001954:	701a      	strb	r2, [r3, #0]
           }break;
 8001956:	e03c      	b.n	80019d2 <IOT_PROCESS+0x20a>
           case 0x02:
           {
        	   GG=(Rxbuff3[B_BIT-1]-0X30)+(Rxbuff3[B_BIT-2]-0X30)*10;
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <IOT_PROCESS+0x274>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3b01      	subs	r3, #1
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001960:	5cd2      	ldrb	r2, [r2, r3]
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <IOT_PROCESS+0x274>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	3b02      	subs	r3, #2
 8001968:	492e      	ldr	r1, [pc, #184]	; (8001a24 <IOT_PROCESS+0x25c>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	4619      	mov	r1, r3
 800196e:	0089      	lsls	r1, r1, #2
 8001970:	440b      	add	r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4413      	add	r3, r2
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3b10      	subs	r3, #16
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <IOT_PROCESS+0x288>)
 8001980:	701a      	strb	r2, [r3, #0]
           }break;
 8001982:	e026      	b.n	80019d2 <IOT_PROCESS+0x20a>
           case 0x03:
           {
        	   GG=(Rxbuff3[B_BIT-1]-0X30)+(Rxbuff3[B_BIT-2]-0X30)*10+(Rxbuff3[B_BIT-3]-0X30)*100;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <IOT_PROCESS+0x274>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <IOT_PROCESS+0x25c>)
 800198c:	5cd2      	ldrb	r2, [r2, r3]
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <IOT_PROCESS+0x274>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3b02      	subs	r3, #2
 8001994:	4923      	ldr	r1, [pc, #140]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	4619      	mov	r1, r3
 800199a:	0089      	lsls	r1, r1, #2
 800199c:	440b      	add	r3, r1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <IOT_PROCESS+0x274>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	3b03      	subs	r3, #3
 80019ac:	491d      	ldr	r1, [pc, #116]	; (8001a24 <IOT_PROCESS+0x25c>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	4619      	mov	r1, r3
 80019b2:	0089      	lsls	r1, r1, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	4619      	mov	r1, r3
 80019b8:	0088      	lsls	r0, r1, #2
 80019ba:	4619      	mov	r1, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	440b      	add	r3, r1
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3330      	adds	r3, #48	; 0x30
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <IOT_PROCESS+0x288>)
 80019ce:	701a      	strb	r2, [r3, #0]
           }break;
 80019d0:	bf00      	nop
       }
       switch (delta_BX)
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <IOT_PROCESS+0x280>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d00d      	beq.n	80019f6 <IOT_PROCESS+0x22e>
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d03c      	beq.n	8001a58 <IOT_PROCESS+0x290>
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d161      	bne.n	8001aa6 <IOT_PROCESS+0x2de>
       {
           case 0x01:
           {
        	   BB=Rxbuff3[Rx_LEN-1-1]-0X30;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <IOT_PROCESS+0x260>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3b02      	subs	r3, #2
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <IOT_PROCESS+0x25c>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	3b30      	subs	r3, #48	; 0x30
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <IOT_PROCESS+0x28c>)
 80019f2:	701a      	strb	r2, [r3, #0]
           }break;
 80019f4:	e057      	b.n	8001aa6 <IOT_PROCESS+0x2de>
           case 0x02:
           {
        	   BB=(Rxbuff3[Rx_LEN-1-1]-0X30)+(Rxbuff3[Rx_LEN-1-2]-0X30)*10;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <IOT_PROCESS+0x260>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	3b02      	subs	r3, #2
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <IOT_PROCESS+0x25c>)
 80019fe:	5cd2      	ldrb	r2, [r2, r3]
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <IOT_PROCESS+0x260>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	4907      	ldr	r1, [pc, #28]	; (8001a24 <IOT_PROCESS+0x25c>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	0089      	lsls	r1, r1, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3b10      	subs	r3, #16
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <IOT_PROCESS+0x28c>)
 8001a1e:	701a      	strb	r2, [r3, #0]
           }break;
 8001a20:	e041      	b.n	8001aa6 <IOT_PROCESS+0x2de>
 8001a22:	bf00      	nop
 8001a24:	20000a8c 	.word	0x20000a8c
 8001a28:	2000061c 	.word	0x2000061c
 8001a2c:	2000015c 	.word	0x2000015c
 8001a30:	200007e9 	.word	0x200007e9
 8001a34:	2000074c 	.word	0x2000074c
 8001a38:	2000074d 	.word	0x2000074d
 8001a3c:	20000a49 	.word	0x20000a49
 8001a40:	200005d8 	.word	0x200005d8
 8001a44:	200008fc 	.word	0x200008fc
 8001a48:	20000830 	.word	0x20000830
 8001a4c:	20000dce 	.word	0x20000dce
 8001a50:	20000dc8 	.word	0x20000dc8
 8001a54:	20000dd0 	.word	0x20000dd0
           case 0x03:
           {
        	   BB=(Rxbuff3[Rx_LEN-1-1]-0X30)+(Rxbuff3[Rx_LEN-1-2]-0X30)*10+(Rxbuff3[Rx_LEN-1-3]-0X30)*100;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <IOT_PROCESS+0x310>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3b02      	subs	r3, #2
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <IOT_PROCESS+0x314>)
 8001a60:	5cd2      	ldrb	r2, [r2, r3]
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <IOT_PROCESS+0x310>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	3b03      	subs	r3, #3
 8001a68:	491c      	ldr	r1, [pc, #112]	; (8001adc <IOT_PROCESS+0x314>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	0089      	lsls	r1, r1, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <IOT_PROCESS+0x310>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <IOT_PROCESS+0x314>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	4619      	mov	r1, r3
 8001a86:	0089      	lsls	r1, r1, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	0088      	lsls	r0, r1, #2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	440b      	add	r3, r1
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3330      	adds	r3, #48	; 0x30
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <IOT_PROCESS+0x318>)
 8001aa2:	701a      	strb	r2, [r3, #0]
           }break;
 8001aa4:	bf00      	nop
       }

       TX_BUFF_WENXIN[0]=RR;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <IOT_PROCESS+0x31c>)
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <IOT_PROCESS+0x320>)
 8001aac:	701a      	strb	r2, [r3, #0]
       TX_BUFF_WENXIN[1]=GG;
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <IOT_PROCESS+0x324>)
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <IOT_PROCESS+0x320>)
 8001ab4:	705a      	strb	r2, [r3, #1]
       TX_BUFF_WENXIN[2]=BB;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <IOT_PROCESS+0x318>)
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <IOT_PROCESS+0x320>)
 8001abc:	709a      	strb	r2, [r3, #2]
 8001abe:	e007      	b.n	8001ad0 <IOT_PROCESS+0x308>

    }
	else
	{
		Rx_count_UART3=0;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <IOT_PROCESS+0x328>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
		FLAG_RECEIVE_OK1=0;
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <IOT_PROCESS+0x32c>)
 8001ac8:	7813      	ldrb	r3, [r2, #0]
 8001aca:	f36f 0382 	bfc	r3, #2, #1
 8001ace:	7013      	strb	r3, [r2, #0]
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	2000061c 	.word	0x2000061c
 8001adc:	20000a8c 	.word	0x20000a8c
 8001ae0:	20000dd0 	.word	0x20000dd0
 8001ae4:	20000dce 	.word	0x20000dce
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	20000dc8 	.word	0x20000dc8
 8001af0:	20000763 	.word	0x20000763
 8001af4:	2000015c 	.word	0x2000015c

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_MspInit+0x60>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_MspInit+0x60>)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <MemManage_Handler+0x4>

08001b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <BusFault_Handler+0x4>

08001b86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <UsageFault_Handler+0x4>

08001b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 fd0a 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f001 ff4f 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000a08 	.word	0x20000a08

08001bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM3_IRQHandler+0x10>)
 8001bd6:	f001 ff45 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200007a8 	.word	0x200007a8

08001be4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM4_IRQHandler+0x10>)
 8001bea:	f001 ff3b 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200005dc 	.word	0x200005dc

08001bf8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <USART3_IRQHandler+0x10>)
 8001bfe:	f002 fb1d 	bl	800423c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000620 	.word	0x20000620

08001c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <SystemInit+0x5c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <SystemInit+0x5c>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <SystemInit+0x5c>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4911      	ldr	r1, [pc, #68]	; (8001c68 <SystemInit+0x5c>)
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <SystemInit+0x60>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <SystemInit+0x5c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <SystemInit+0x5c>)
 8001c2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <SystemInit+0x5c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <SystemInit+0x5c>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <SystemInit+0x5c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <SystemInit+0x5c>)
 8001c4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SystemInit+0x5c>)
 8001c52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SystemInit+0x64>)
 8001c5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c5e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f8ff0000 	.word	0xf8ff0000
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001c9a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001ca8:	22c7      	movs	r2, #199	; 0xc7
 8001caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb8:	4813      	ldr	r0, [pc, #76]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cba:	f001 fe5b 	bl	8003974 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cc4:	f7ff ff18 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cd6:	f001 ffcd 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ce0:	f7ff ff0a 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cf2:	f002 f9ab 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cfc:	f7ff fefc 	bl	8001af8 <Error_Handler>
  }

}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000a08 	.word	0x20000a08

08001d0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	463b      	mov	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <MX_TIM3_Init+0x98>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d30:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001d34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d3e:	22c7      	movs	r2, #199	; 0xc7
 8001d40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d4e:	4814      	ldr	r0, [pc, #80]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d50:	f001 fe10 	bl	8003974 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d5a:	f7ff fecd 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d6c:	f001 ff82 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d76:	f7ff febf 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <MX_TIM3_Init+0x94>)
 8001d88:	f002 f960 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d92:	f7ff feb1 	bl	8001af8 <Error_Handler>
  }

}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200007a8 	.word	0x200007a8
 8001da4:	40000400 	.word	0x40000400

08001da8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <MX_TIM4_Init+0x98>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001dcc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001dd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001dda:	22c7      	movs	r2, #199	; 0xc7
 8001ddc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001dec:	f001 fdc2 	bl	8003974 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001df6:	f7ff fe7f 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001e08:	f001 ff34 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e12:	f7ff fe71 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <MX_TIM4_Init+0x94>)
 8001e24:	f002 f912 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e2e:	f7ff fe63 	bl	8001af8 <Error_Handler>
  }

}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200005dc 	.word	0x200005dc
 8001e40:	40000800 	.word	0x40000800

08001e44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <MX_TIM5_Init+0x98>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7200-1;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e68:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e76:	22c7      	movs	r2, #199	; 0xc7
 8001e78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001e88:	f001 fd74 	bl	8003974 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001e92:	f7ff fe31 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001ea4:	f001 fee6 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001eae:	f7ff fe23 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <MX_TIM5_Init+0x94>)
 8001ec0:	f002 f8c4 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001eca:	f7ff fe15 	bl	8001af8 <Error_Handler>
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000764 	.word	0x20000764
 8001edc:	40000c00 	.word	0x40000c00

08001ee0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d114      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	201c      	movs	r0, #28
 8001f10:	f000 fc71 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f14:	201c      	movs	r0, #28
 8001f16:	f000 fc8a 	bl	800282e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f1a:	e044      	b.n	8001fa6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d114      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	201d      	movs	r0, #29
 8001f44:	f000 fc57 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f48:	201d      	movs	r0, #29
 8001f4a:	f000 fc70 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8001f4e:	e02a      	b.n	8001fa6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_Base_MspInit+0xd8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d114      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	201e      	movs	r0, #30
 8001f78:	f000 fc3d 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f7c:	201e      	movs	r0, #30
 8001f7e:	f000 fc56 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8001f82:	e010      	b.n	8001fa6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_TIM_Base_MspInit+0xdc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00

08001fc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fcc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001ff8:	f002 f87e 	bl	80040f8 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f7ff fd79 	bl	8001af8 <Error_Handler>
  }

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000a4c 	.word	0x20000a4c
 8002010:	40004400 	.word	0x40004400

08002014 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <MX_USART3_UART_Init+0x50>)
 800201c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 8002020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002024:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_USART3_UART_Init+0x4c>)
 800204c:	f002 f854 	bl	80040f8 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002056:	f7ff fd4f 	bl	8001af8 <Error_Handler>
  }

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000620 	.word	0x20000620
 8002064:	40004800 	.word	0x40004800

08002068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_UART_MspInit+0x108>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d130      	bne.n	80020ea <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_UART_MspInit+0x10c>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_UART_MspInit+0x10c>)
 800208e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002092:	61d3      	str	r3, [r2, #28]
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_UART_MspInit+0x10c>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_UART_MspInit+0x10c>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a33      	ldr	r2, [pc, #204]	; (8002174 <HAL_UART_MspInit+0x10c>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_UART_MspInit+0x10c>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4619      	mov	r1, r3
 80020ca:	482b      	ldr	r0, [pc, #172]	; (8002178 <HAL_UART_MspInit+0x110>)
 80020cc:	f000 fcee 	bl	8002aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020d0:	2308      	movs	r3, #8
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4825      	ldr	r0, [pc, #148]	; (8002178 <HAL_UART_MspInit+0x110>)
 80020e4:	f000 fce2 	bl	8002aac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020e8:	e03e      	b.n	8002168 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_UART_MspInit+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d139      	bne.n	8002168 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_UART_MspInit+0x10c>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_UART_MspInit+0x10c>)
 80020fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fe:	61d3      	str	r3, [r2, #28]
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_UART_MspInit+0x10c>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_UART_MspInit+0x10c>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_UART_MspInit+0x10c>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_UART_MspInit+0x10c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002132:	f107 0318 	add.w	r3, r7, #24
 8002136:	4619      	mov	r1, r3
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <HAL_UART_MspInit+0x118>)
 800213a:	f000 fcb7 	bl	8002aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800213e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	4619      	mov	r1, r3
 8002152:	480b      	ldr	r0, [pc, #44]	; (8002180 <HAL_UART_MspInit+0x118>)
 8002154:	f000 fcaa 	bl	8002aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	2027      	movs	r0, #39	; 0x27
 800215e:	f000 fb4a 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002162:	2027      	movs	r0, #39	; 0x27
 8002164:	f000 fb63 	bl	800282e <HAL_NVIC_EnableIRQ>
}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40004400 	.word	0x40004400
 8002174:	40021000 	.word	0x40021000
 8002178:	40010800 	.word	0x40010800
 800217c:	40004800 	.word	0x40004800
 8002180:	40010c00 	.word	0x40010c00

08002184 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <MX_USB_PCD_Init+0x40>)
 800218c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 8002190:	2208      	movs	r2, #8
 8002192:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 8002196:	2202      	movs	r2, #2
 8002198:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_USB_PCD_Init+0x3c>)
 80021ae:	f000 fe2e 	bl	8002e0e <HAL_PCD_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80021b8:	f7ff fc9e 	bl	8001af8 <Error_Handler>
  }

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000b5c 	.word	0x20000b5c
 80021c4:	40005c00 	.word	0x40005c00

080021c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_PCD_MspInit+0x34>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10b      	bne.n	80021f2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_PCD_MspInit+0x38>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_PCD_MspInit+0x38>)
 80021e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_PCD_MspInit+0x38>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	40005c00 	.word	0x40005c00
 8002200:	40021000 	.word	0x40021000

08002204 <reset_ws2812>:
}
//=============================================
//reset_ws2812
//=============================================
void reset_ws2812()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	CLR_WS2812DATA_ME;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <reset_ws2812+0x1c>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <reset_ws2812+0x1c>)
 800220e:	f023 0304 	bic.w	r3, r3, #4
 8002212:	60d3      	str	r3, [r2, #12]
	delay_us1(300);
 8002214:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002218:	f7fe ffa6 	bl	8001168 <delay_us1>
	//SET_WS2812DATA_ME;
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40011000 	.word	0x40011000

08002224 <reset_ws2812_1>:
void reset_ws2812_1()
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	CLR_WS2812DATA;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <reset_ws2812_1+0x1c>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <reset_ws2812_1+0x1c>)
 800222e:	f023 0302 	bic.w	r3, r3, #2
 8002232:	60d3      	str	r3, [r2, #12]
	delay_us1(300);
 8002234:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002238:	f7fe ff96 	bl	8001168 <delay_us1>
	//SET_WS2812DATA_ME;
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40011000 	.word	0x40011000

08002244 <WS2812_BYTE_1>:
        SET_WS2812DATA_ME;
}
*/
/***********************************************************************/
void WS2812_BYTE_1(uint8_t x)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
	uint8_t y;
	for(y=0;y<8;y++)
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e0bb      	b.n	80023cc <WS2812_BYTE_1+0x188>
	{
		if(x&0x80)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da70      	bge.n	800233e <WS2812_BYTE_1+0xfa>
		{
            SET_WS2812DATA;
 800225c:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a5f      	ldr	r2, [pc, #380]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002286:	bf00      	nop
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
            CLR_WS2812DATA;
 80022cc:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a43      	ldr	r2, [pc, #268]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	e040      	b.n	80023c0 <WS2812_BYTE_1+0x17c>
		}
		else
		{
            SET_WS2812DATA;
 800233e:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	bf00      	nop
            CLR_WS2812DATA;
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <WS2812_BYTE_1+0x19c>)
 8002356:	f023 0302 	bic.w	r3, r3, #2
 800235a:	60d3      	str	r3, [r2, #12]
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	bf00      	nop
 8002382:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop

            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
            asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
		}
		x<<=1;
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	71fb      	strb	r3, [r7, #7]
	for(y=0;y<8;y++)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b07      	cmp	r3, #7
 80023d0:	f67f af40 	bls.w	8002254 <WS2812_BYTE_1+0x10>
	}
    //delay50us();
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40011000 	.word	0x40011000

080023e4 <send_single_data1>:
}
//============================================
//发送RGB数据
//============================================
void send_single_data1()  //数据格式G7-G0-R7-R0-B7-B0
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
   LED_DAT=GG;
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <send_single_data1+0x40>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <send_single_data1+0x44>)
 80023ee:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE_1(LED_DAT);
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <send_single_data1+0x44>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff25 	bl	8002244 <WS2812_BYTE_1>
   LED_DAT=RR;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <send_single_data1+0x48>)
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <send_single_data1+0x44>)
 8002400:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE_1(LED_DAT);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <send_single_data1+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff1c 	bl	8002244 <WS2812_BYTE_1>
   LED_DAT=BB;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <send_single_data1+0x4c>)
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <send_single_data1+0x44>)
 8002412:	701a      	strb	r2, [r3, #0]
   WS2812_BYTE_1(LED_DAT);
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <send_single_data1+0x44>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff13 	bl	8002244 <WS2812_BYTE_1>
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000dc8 	.word	0x20000dc8
 8002428:	20000dca 	.word	0x20000dca
 800242c:	20000dce 	.word	0x20000dce
 8002430:	20000dd0 	.word	0x20000dd0

08002434 <send_string_data1>:
   WS2812_BYTE_1(RA);
   //LED_DAT=BB;
   WS2812_BYTE_1(BA);
}
void  send_string_data1()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i=0;i<72;i++)
 800243a:	2300      	movs	r3, #0
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	e004      	b.n	800244a <send_string_data1+0x16>
    {
        send_single_data1();
 8002440:	f7ff ffd0 	bl	80023e4 <send_single_data1>
    for(i=0;i<72;i++)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	3301      	adds	r3, #1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b47      	cmp	r3, #71	; 0x47
 800244e:	d9f7      	bls.n	8002440 <send_string_data1+0xc>
    }
    reset_ws2812_1();
 8002450:	f7ff fee8 	bl	8002224 <reset_ws2812_1>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <send_image>:
void  send_image(const uchar *data)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i=0;i<72;i++)
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e017      	b.n	800249a <send_image+0x3e>
    {
    	   //LED_DAT=GG;
    	   WS2812_BYTE_1(*data++);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fee6 	bl	8002244 <WS2812_BYTE_1>
    	  // LED_DAT=RR;
    	   WS2812_BYTE_1(*data++);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fedf 	bl	8002244 <WS2812_BYTE_1>
    	   //LED_DAT=BB;
    	   WS2812_BYTE_1(*data++);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fed8 	bl	8002244 <WS2812_BYTE_1>
    for(i=0;i<72;i++)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	3301      	adds	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b47      	cmp	r3, #71	; 0x47
 800249e:	d9e4      	bls.n	800246a <send_image+0xe>
    }
    reset_ws2812_1();
 80024a0:	f7ff fec0 	bl	8002224 <reset_ws2812_1>
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <RGB_close1>:
    for(t=speed1;t>0;t--)  HAL_Delay(100);

}

void RGB_close1() //RGB闪烁
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
    uint16_t t;
    RR=0; GG=0; BB=0;
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <RGB_close1+0x3c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <RGB_close1+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <RGB_close1+0x44>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    send_string_data1();
 80024c4:	f7ff ffb6 	bl	8002434 <send_string_data1>
    for(t=speed1;t>0;t--)HAL_Delay(100);
 80024c8:	2301      	movs	r3, #1
 80024ca:	80fb      	strh	r3, [r7, #6]
 80024cc:	e005      	b.n	80024da <RGB_close1+0x2e>
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	f000 f898 	bl	8002604 <HAL_Delay>
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	80fb      	strh	r3, [r7, #6]
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f6      	bne.n	80024ce <RGB_close1+0x22>

}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000dce 	.word	0x20000dce
 80024ec:	20000dc8 	.word	0x20000dc8
 80024f0:	20000dd0 	.word	0x20000dd0

080024f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024f6:	e003      	b.n	8002500 <LoopCopyDataInit>

080024f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024fe:	3104      	adds	r1, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002500:	480a      	ldr	r0, [pc, #40]	; (800252c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002504:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002508:	d3f6      	bcc.n	80024f8 <CopyDataInit>
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800250c:	e002      	b.n	8002514 <LoopFillZerobss>

0800250e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002510:	f842 3b04 	str.w	r3, [r2], #4

08002514 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002516:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002518:	d3f9      	bcc.n	800250e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800251a:	f7ff fb77 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f002 fa13 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002522:	f7fe fe5f 	bl	80011e4 <main>
  bx lr
 8002526:	4770      	bx	lr
  ldr r3, =_sidata
 8002528:	0800eae4 	.word	0x0800eae4
  ldr r0, =_sdata
 800252c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002530:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8002534:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8002538:	20000dd8 	.word	0x20000dd8

0800253c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC1_2_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_Init+0x28>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_Init+0x28>)
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 f945 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002556:	2000      	movs	r0, #0
 8002558:	f000 f808 	bl	800256c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255c:	f7ff fad2 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f95d 	bl	800284a <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 f925 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000014 	.word	0x20000014
 80025c4:	2000001c 	.word	0x2000001c
 80025c8:	20000018 	.word	0x20000018

080025cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_IncTick+0x1c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x20>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a03      	ldr	r2, [pc, #12]	; (80025ec <HAL_IncTick+0x20>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	2000001c 	.word	0x2000001c
 80025ec:	20000dd4 	.word	0x20000dd4

080025f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_GetTick+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000dd4 	.word	0x20000dd4

08002604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff fff0 	bl	80025f0 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d005      	beq.n	800262a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_Delay+0x40>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262a:	bf00      	nop
 800262c:	f7ff ffe0 	bl	80025f0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	429a      	cmp	r2, r3
 800263a:	d8f7      	bhi.n	800262c <HAL_Delay+0x28>
  {
  }
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000001c 	.word	0x2000001c

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4906      	ldr	r1, [pc, #24]	; (80026e0 <__NVIC_EnableIRQ+0x34>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff90 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff2d 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff42 	bl	8002690 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff90 	bl	8002738 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5f 	bl	80026e4 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff35 	bl	80026ac <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d106      	bne.n	8002880 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800287e:	e005      	b.n	800288c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002886:	f023 0304 	bic.w	r3, r3, #4
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d005      	beq.n	80028be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e0d6      	b.n	8002a6c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 020e 	bic.w	r2, r2, #14
 80028cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_DMA_Abort_IT+0x1dc>)
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d958      	bls.n	800299c <HAL_DMA_Abort_IT+0x100>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a63      	ldr	r2, [pc, #396]	; (8002a7c <HAL_DMA_Abort_IT+0x1e0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04f      	beq.n	8002994 <HAL_DMA_Abort_IT+0xf8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a61      	ldr	r2, [pc, #388]	; (8002a80 <HAL_DMA_Abort_IT+0x1e4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d048      	beq.n	8002990 <HAL_DMA_Abort_IT+0xf4>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_DMA_Abort_IT+0x1e8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d040      	beq.n	800298a <HAL_DMA_Abort_IT+0xee>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5e      	ldr	r2, [pc, #376]	; (8002a88 <HAL_DMA_Abort_IT+0x1ec>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d038      	beq.n	8002984 <HAL_DMA_Abort_IT+0xe8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5d      	ldr	r2, [pc, #372]	; (8002a8c <HAL_DMA_Abort_IT+0x1f0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d030      	beq.n	800297e <HAL_DMA_Abort_IT+0xe2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5b      	ldr	r2, [pc, #364]	; (8002a90 <HAL_DMA_Abort_IT+0x1f4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d028      	beq.n	8002978 <HAL_DMA_Abort_IT+0xdc>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a53      	ldr	r2, [pc, #332]	; (8002a78 <HAL_DMA_Abort_IT+0x1dc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d020      	beq.n	8002972 <HAL_DMA_Abort_IT+0xd6>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_DMA_Abort_IT+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_DMA_Abort_IT+0xd2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_DMA_Abort_IT+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d012      	beq.n	800296a <HAL_DMA_Abort_IT+0xce>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_DMA_Abort_IT+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00a      	beq.n	8002964 <HAL_DMA_Abort_IT+0xc8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_DMA_Abort_IT+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d102      	bne.n	800295e <HAL_DMA_Abort_IT+0xc2>
 8002958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295c:	e01b      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 800295e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002962:	e018      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	e015      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 800296a:	2310      	movs	r3, #16
 800296c:	e013      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 800296e:	2301      	movs	r3, #1
 8002970:	e011      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 8002972:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002976:	e00e      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 8002978:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800297c:	e00b      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 800297e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002982:	e008      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 8002984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002988:	e005      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 800298a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800298e:	e002      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 8002990:	2310      	movs	r3, #16
 8002992:	e000      	b.n	8002996 <HAL_DMA_Abort_IT+0xfa>
 8002994:	2301      	movs	r3, #1
 8002996:	4a43      	ldr	r2, [pc, #268]	; (8002aa4 <HAL_DMA_Abort_IT+0x208>)
 8002998:	6053      	str	r3, [r2, #4]
 800299a:	e057      	b.n	8002a4c <HAL_DMA_Abort_IT+0x1b0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a36      	ldr	r2, [pc, #216]	; (8002a7c <HAL_DMA_Abort_IT+0x1e0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d04f      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x1aa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a35      	ldr	r2, [pc, #212]	; (8002a80 <HAL_DMA_Abort_IT+0x1e4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d048      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x1a6>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_DMA_Abort_IT+0x1e8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d040      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x1a0>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_DMA_Abort_IT+0x1ec>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d038      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x19a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_DMA_Abort_IT+0x1f0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d030      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x194>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_DMA_Abort_IT+0x1f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d028      	beq.n	8002a2a <HAL_DMA_Abort_IT+0x18e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <HAL_DMA_Abort_IT+0x1dc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d020      	beq.n	8002a24 <HAL_DMA_Abort_IT+0x188>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_DMA_Abort_IT+0x1f8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d019      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x184>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_DMA_Abort_IT+0x1fc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d012      	beq.n	8002a1c <HAL_DMA_Abort_IT+0x180>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <HAL_DMA_Abort_IT+0x200>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00a      	beq.n	8002a16 <HAL_DMA_Abort_IT+0x17a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <HAL_DMA_Abort_IT+0x204>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d102      	bne.n	8002a10 <HAL_DMA_Abort_IT+0x174>
 8002a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0e:	e01b      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a14:	e018      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1a:	e015      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	e013      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e011      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a28:	e00e      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a2e:	e00b      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a34:	e008      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3a:	e005      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a40:	e002      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a42:	2310      	movs	r3, #16
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_Abort_IT+0x1ac>
 8002a46:	2301      	movs	r3, #1
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_DMA_Abort_IT+0x20c>)
 8002a4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
    } 
  }
  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40020080 	.word	0x40020080
 8002a7c:	40020008 	.word	0x40020008
 8002a80:	4002001c 	.word	0x4002001c
 8002a84:	40020030 	.word	0x40020030
 8002a88:	40020044 	.word	0x40020044
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	4002006c 	.word	0x4002006c
 8002a94:	40020408 	.word	0x40020408
 8002a98:	4002041c 	.word	0x4002041c
 8002a9c:	40020430 	.word	0x40020430
 8002aa0:	40020444 	.word	0x40020444
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b08b      	sub	sp, #44	; 0x2c
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	e133      	b.n	8002d28 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	f040 8122 	bne.w	8002d22 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b12      	cmp	r3, #18
 8002ae4:	d034      	beq.n	8002b50 <HAL_GPIO_Init+0xa4>
 8002ae6:	2b12      	cmp	r3, #18
 8002ae8:	d80d      	bhi.n	8002b06 <HAL_GPIO_Init+0x5a>
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d02b      	beq.n	8002b46 <HAL_GPIO_Init+0x9a>
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d804      	bhi.n	8002afc <HAL_GPIO_Init+0x50>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d031      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d01c      	beq.n	8002b34 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afa:	e048      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d043      	beq.n	8002b88 <HAL_GPIO_Init+0xdc>
 8002b00:	2b11      	cmp	r3, #17
 8002b02:	d01b      	beq.n	8002b3c <HAL_GPIO_Init+0x90>
          break;
 8002b04:	e043      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b06:	4a8f      	ldr	r2, [pc, #572]	; (8002d44 <HAL_GPIO_Init+0x298>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d026      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
 8002b0c:	4a8d      	ldr	r2, [pc, #564]	; (8002d44 <HAL_GPIO_Init+0x298>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d806      	bhi.n	8002b20 <HAL_GPIO_Init+0x74>
 8002b12:	4a8d      	ldr	r2, [pc, #564]	; (8002d48 <HAL_GPIO_Init+0x29c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d020      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
 8002b18:	4a8c      	ldr	r2, [pc, #560]	; (8002d4c <HAL_GPIO_Init+0x2a0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
          break;
 8002b1e:	e036      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b20:	4a8b      	ldr	r2, [pc, #556]	; (8002d50 <HAL_GPIO_Init+0x2a4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
 8002b26:	4a8b      	ldr	r2, [pc, #556]	; (8002d54 <HAL_GPIO_Init+0x2a8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d016      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
 8002b2c:	4a8a      	ldr	r2, [pc, #552]	; (8002d58 <HAL_GPIO_Init+0x2ac>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0xae>
          break;
 8002b32:	e02c      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e028      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	3304      	adds	r3, #4
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e023      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	623b      	str	r3, [r7, #32]
          break;
 8002b4e:	e01e      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	330c      	adds	r3, #12
 8002b56:	623b      	str	r3, [r7, #32]
          break;
 8002b58:	e019      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b62:	2304      	movs	r3, #4
 8002b64:	623b      	str	r3, [r7, #32]
          break;
 8002b66:	e012      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b70:	2308      	movs	r3, #8
 8002b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	611a      	str	r2, [r3, #16]
          break;
 8002b7a:	e008      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	615a      	str	r2, [r3, #20]
          break;
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2bff      	cmp	r3, #255	; 0xff
 8002b92:	d801      	bhi.n	8002b98 <HAL_GPIO_Init+0xec>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	e001      	b.n	8002b9c <HAL_GPIO_Init+0xf0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2bff      	cmp	r3, #255	; 0xff
 8002ba2:	d802      	bhi.n	8002baa <HAL_GPIO_Init+0xfe>
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x104>
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	3b08      	subs	r3, #8
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	6a39      	ldr	r1, [r7, #32]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a2 	beq.w	8002d22 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bde:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <HAL_GPIO_Init+0x2b0>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	4a5e      	ldr	r2, [pc, #376]	; (8002d5c <HAL_GPIO_Init+0x2b0>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6193      	str	r3, [r2, #24]
 8002bea:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <HAL_GPIO_Init+0x2b0>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bf6:	4a5a      	ldr	r2, [pc, #360]	; (8002d60 <HAL_GPIO_Init+0x2b4>)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a51      	ldr	r2, [pc, #324]	; (8002d64 <HAL_GPIO_Init+0x2b8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x1b6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a50      	ldr	r2, [pc, #320]	; (8002d68 <HAL_GPIO_Init+0x2bc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x1b2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4f      	ldr	r2, [pc, #316]	; (8002d6c <HAL_GPIO_Init+0x2c0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x1ae>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <HAL_GPIO_Init+0x2c4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x1aa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4d      	ldr	r2, [pc, #308]	; (8002d74 <HAL_GPIO_Init+0x2c8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x1a6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4c      	ldr	r2, [pc, #304]	; (8002d78 <HAL_GPIO_Init+0x2cc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x1a2>
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	e00a      	b.n	8002c64 <HAL_GPIO_Init+0x1b8>
 8002c4e:	2306      	movs	r3, #6
 8002c50:	e008      	b.n	8002c64 <HAL_GPIO_Init+0x1b8>
 8002c52:	2304      	movs	r3, #4
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x1b8>
 8002c56:	2303      	movs	r3, #3
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x1b8>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x1b8>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x1b8>
 8002c62:	2300      	movs	r3, #0
 8002c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c66:	f002 0203 	and.w	r2, r2, #3
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c74:	493a      	ldr	r1, [pc, #232]	; (8002d60 <HAL_GPIO_Init+0x2b4>)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	493a      	ldr	r1, [pc, #232]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
 8002c9a:	e006      	b.n	8002caa <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c9c:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4930      	ldr	r1, [pc, #192]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
 8002cc2:	e006      	b.n	8002cd2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	492b      	ldr	r1, [pc, #172]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	4926      	ldr	r1, [pc, #152]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
 8002cea:	e006      	b.n	8002cfa <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	4921      	ldr	r1, [pc, #132]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	491c      	ldr	r1, [pc, #112]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60cb      	str	r3, [r1, #12]
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	4917      	ldr	r1, [pc, #92]	; (8002d7c <HAL_GPIO_Init+0x2d0>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f47f aec4 	bne.w	8002ac0 <HAL_GPIO_Init+0x14>
  }
}
 8002d38:	bf00      	nop
 8002d3a:	372c      	adds	r7, #44	; 0x2c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	10210000 	.word	0x10210000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	10120000 	.word	0x10120000
 8002d50:	10310000 	.word	0x10310000
 8002d54:	10320000 	.word	0x10320000
 8002d58:	10220000 	.word	0x10220000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40010000 	.word	0x40010000
 8002d64:	40010800 	.word	0x40010800
 8002d68:	40010c00 	.word	0x40010c00
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40011400 	.word	0x40011400
 8002d74:	40011800 	.word	0x40011800
 8002d78:	40011c00 	.word	0x40011c00
 8002d7c:	40010400 	.word	0x40010400

08002d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	807b      	strh	r3, [r7, #2]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dbe:	787b      	ldrb	r3, [r7, #1]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc4:	887a      	ldrh	r2, [r7, #2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	041a      	lsls	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	611a      	str	r2, [r3, #16]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e10:	b08b      	sub	sp, #44	; 0x2c
 8002e12:	af06      	add	r7, sp, #24
 8002e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0d3      	b.n	8002fc8 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff f9c7 	bl	80021c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 fd27 	bl	800489a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	687e      	ldr	r6, [r7, #4]
 8002e54:	466d      	mov	r5, sp
 8002e56:	f106 0410 	add.w	r4, r6, #16
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	602b      	str	r3, [r5, #0]
 8002e62:	1d33      	adds	r3, r6, #4
 8002e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	f001 fcf0 	bl	800484c <USB_CoreInit>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0a4      	b.n	8002fc8 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fd24 	bl	80048d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e035      	b.n	8002efc <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	015b      	lsls	r3, r3, #5
 8002e96:	4413      	add	r3, r2
 8002e98:	3329      	adds	r3, #41	; 0x29
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	015b      	lsls	r3, r3, #5
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3328      	adds	r3, #40	; 0x28
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	b291      	uxth	r1, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	015b      	lsls	r3, r3, #5
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3336      	adds	r3, #54	; 0x36
 8002eba:	460a      	mov	r2, r1
 8002ebc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	015b      	lsls	r3, r3, #5
 8002ec4:	4413      	add	r3, r2
 8002ec6:	332b      	adds	r3, #43	; 0x2b
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3338      	adds	r3, #56	; 0x38
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	015b      	lsls	r3, r3, #5
 8002ee0:	4413      	add	r3, r2
 8002ee2:	333c      	adds	r3, #60	; 0x3c
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	3302      	adds	r3, #2
 8002eee:	015b      	lsls	r3, r3, #5
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3c4      	bcc.n	8002e90 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	e031      	b.n	8002f70 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	015b      	lsls	r3, r3, #5
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	015b      	lsls	r3, r3, #5
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	015b      	lsls	r3, r3, #5
 8002f32:	4413      	add	r3, r2
 8002f34:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	330a      	adds	r3, #10
 8002f62:	015b      	lsls	r3, r3, #5
 8002f64:	4413      	add	r3, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d3c8      	bcc.n	8002f0c <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	687e      	ldr	r6, [r7, #4]
 8002f82:	466d      	mov	r5, sp
 8002f84:	f106 0410 	add.w	r4, r6, #16
 8002f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	1d33      	adds	r3, r6, #4
 8002f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f94:	6838      	ldr	r0, [r7, #0]
 8002f96:	f001 fca8 	bl	80048ea <USB_DevInit>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e00d      	b.n	8002fc8 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 fcb6 	bl	8004932 <USB_DevDisconnect>

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e26c      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8087 	beq.w	80030fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff0:	4b92      	ldr	r3, [pc, #584]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d00c      	beq.n	8003016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ffc:	4b8f      	ldr	r3, [pc, #572]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d112      	bne.n	800302e <HAL_RCC_OscConfig+0x5e>
 8003008:	4b8c      	ldr	r3, [pc, #560]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d10b      	bne.n	800302e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	4b89      	ldr	r3, [pc, #548]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d06c      	beq.n	80030fc <HAL_RCC_OscConfig+0x12c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d168      	bne.n	80030fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e246      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x76>
 8003038:	4b80      	ldr	r3, [pc, #512]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a7f      	ldr	r2, [pc, #508]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e02e      	b.n	80030a4 <HAL_RCC_OscConfig+0xd4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x98>
 800304e:	4b7b      	ldr	r3, [pc, #492]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7a      	ldr	r2, [pc, #488]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b78      	ldr	r3, [pc, #480]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a77      	ldr	r2, [pc, #476]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xd4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0xbc>
 8003072:	4b72      	ldr	r3, [pc, #456]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a71      	ldr	r2, [pc, #452]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b6f      	ldr	r3, [pc, #444]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6e      	ldr	r2, [pc, #440]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xd4>
 800308c:	4b6b      	ldr	r3, [pc, #428]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a67      	ldr	r2, [pc, #412]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7ff faa0 	bl	80025f0 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7ff fa9c 	bl	80025f0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1fa      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xe4>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fa8c 	bl	80025f0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fa88 	bl	80025f0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1e6      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x10c>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310a:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003116:	4b49      	ldr	r3, [pc, #292]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x18c>
 8003122:	4b46      	ldr	r3, [pc, #280]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b43      	ldr	r3, [pc, #268]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x176>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1ba      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4939      	ldr	r1, [pc, #228]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_RCC_OscConfig+0x270>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7ff fa41 	bl	80025f0 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff fa3d 	bl	80025f0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e19b      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b2a      	ldr	r3, [pc, #168]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4927      	ldr	r1, [pc, #156]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_RCC_OscConfig+0x270>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fa20 	bl	80025f0 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7ff fa1c 	bl	80025f0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e17a      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03a      	beq.n	8003254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d019      	beq.n	800321a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_RCC_OscConfig+0x274>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7ff fa00 	bl	80025f0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff f9fc 	bl	80025f0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e15a      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <HAL_RCC_OscConfig+0x26c>)
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003212:	2001      	movs	r0, #1
 8003214:	f000 fada 	bl	80037cc <RCC_Delay>
 8003218:	e01c      	b.n	8003254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_RCC_OscConfig+0x274>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7ff f9e6 	bl	80025f0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003226:	e00f      	b.n	8003248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7ff f9e2 	bl	80025f0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d908      	bls.n	8003248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e140      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	42420000 	.word	0x42420000
 8003244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	4b9e      	ldr	r3, [pc, #632]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e9      	bne.n	8003228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a6 	beq.w	80033ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003266:	4b97      	ldr	r3, [pc, #604]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b94      	ldr	r3, [pc, #592]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	4a93      	ldr	r2, [pc, #588]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	61d3      	str	r3, [r2, #28]
 800327e:	4b91      	ldr	r3, [pc, #580]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b8e      	ldr	r3, [pc, #568]	; (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b8b      	ldr	r3, [pc, #556]	; (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a8a      	ldr	r2, [pc, #552]	; (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7ff f9a3 	bl	80025f0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7ff f99f 	bl	80025f0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b64      	cmp	r3, #100	; 0x64
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0fd      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x4f8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x312>
 80032d4:	4b7b      	ldr	r3, [pc, #492]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6213      	str	r3, [r2, #32]
 80032e0:	e02d      	b.n	800333e <HAL_RCC_OscConfig+0x36e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x334>
 80032ea:	4b76      	ldr	r3, [pc, #472]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a75      	ldr	r2, [pc, #468]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	6213      	str	r3, [r2, #32]
 80032f6:	4b73      	ldr	r3, [pc, #460]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a72      	ldr	r2, [pc, #456]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	e01c      	b.n	800333e <HAL_RCC_OscConfig+0x36e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b05      	cmp	r3, #5
 800330a:	d10c      	bne.n	8003326 <HAL_RCC_OscConfig+0x356>
 800330c:	4b6d      	ldr	r3, [pc, #436]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4a6c      	ldr	r2, [pc, #432]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6213      	str	r3, [r2, #32]
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a69      	ldr	r2, [pc, #420]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	e00b      	b.n	800333e <HAL_RCC_OscConfig+0x36e>
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a66      	ldr	r2, [pc, #408]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	4b64      	ldr	r3, [pc, #400]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a63      	ldr	r2, [pc, #396]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d015      	beq.n	8003372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7ff f953 	bl	80025f0 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7ff f94f 	bl	80025f0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0ab      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ee      	beq.n	800334e <HAL_RCC_OscConfig+0x37e>
 8003370:	e014      	b.n	800339c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7ff f93d 	bl	80025f0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7ff f939 	bl	80025f0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e095      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003390:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ee      	bne.n	800337a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4b48      	ldr	r3, [pc, #288]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a47      	ldr	r2, [pc, #284]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8081 	beq.w	80034ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b8:	4b42      	ldr	r3, [pc, #264]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d061      	beq.n	8003488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d146      	bne.n	800345a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_OscConfig+0x4fc>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7ff f90d 	bl	80025f0 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033da:	f7ff f909 	bl	80025f0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e067      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d108      	bne.n	8003414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003402:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	492d      	ldr	r1, [pc, #180]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003414:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a19      	ldr	r1, [r3, #32]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	430b      	orrs	r3, r1
 8003426:	4927      	ldr	r1, [pc, #156]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_RCC_OscConfig+0x4fc>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7ff f8dd 	bl	80025f0 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343a:	f7ff f8d9 	bl	80025f0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e037      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x46a>
 8003458:	e02f      	b.n	80034ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_RCC_OscConfig+0x4fc>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7ff f8c6 	bl	80025f0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7ff f8c2 	bl	80025f0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e020      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x498>
 8003486:	e018      	b.n	80034ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e013      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_OscConfig+0x4f4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
 80034cc:	42420060 	.word	0x42420060

080034d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d0      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4965      	ldr	r1, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800354e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d040      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d115      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e073      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06b      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4936      	ldr	r1, [pc, #216]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7ff f816 	bl	80025f0 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7ff f812 	bl	80025f0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e053      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d210      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4922      	ldr	r1, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4601      	mov	r1, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	fa21 f303 	lsr.w	r3, r1, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1cc>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe ff74 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40022000 	.word	0x40022000
 8003694:	40021000 	.word	0x40021000
 8003698:	0800eac4 	.word	0x0800eac4
 800369c:	20000014 	.word	0x20000014
 80036a0:	20000018 	.word	0x20000018

080036a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b490      	push	{r4, r7}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036ac:	1d3c      	adds	r4, r7, #4
 80036ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x40>
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x46>
 80036e2:	e02d      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e6:	623b      	str	r3, [r7, #32]
      break;
 80036e8:	e02d      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	0c9b      	lsrs	r3, r3, #18
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036f6:	4413      	add	r3, r2
 80036f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_RCC_GetSysClockFreq+0xb8>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c5b      	lsrs	r3, r3, #17
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003716:	4413      	add	r3, r2
 8003718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800371c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003722:	fb02 f203 	mul.w	r2, r2, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	e004      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	623b      	str	r3, [r7, #32]
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003742:	623b      	str	r3, [r7, #32]
      break;
 8003744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003746:	6a3b      	ldr	r3, [r7, #32]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bc90      	pop	{r4, r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	080049b8 	.word	0x080049b8
 8003758:	080049c8 	.word	0x080049c8
 800375c:	40021000 	.word	0x40021000
 8003760:	007a1200 	.word	0x007a1200
 8003764:	003d0900 	.word	0x003d0900

08003768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800376c:	4b02      	ldr	r3, [pc, #8]	; (8003778 <HAL_RCC_GetHCLKFreq+0x10>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	20000014 	.word	0x20000014

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003780:	f7ff fff2 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003784:	4601      	mov	r1, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	0800ead4 	.word	0x0800ead4

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a8:	f7ff ffde 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037ac:	4601      	mov	r1, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0adb      	lsrs	r3, r3, #11
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4a03      	ldr	r2, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	0800ead4 	.word	0x0800ead4

080037cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <RCC_Delay+0x34>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <RCC_Delay+0x38>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0a5b      	lsrs	r3, r3, #9
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037e8:	bf00      	nop
  }
  while (Delay --);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	60fa      	str	r2, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f9      	bne.n	80037e8 <RCC_Delay+0x1c>
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000014 	.word	0x20000014
 8003804:	10624dd3 	.word	0x10624dd3

08003808 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d07d      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003828:	4b4f      	ldr	r3, [pc, #316]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4a4b      	ldr	r2, [pc, #300]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	61d3      	str	r3, [r2, #28]
 8003840:	4b49      	ldr	r3, [pc, #292]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d118      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003868:	f7fe fec2 	bl	80025f0 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	e008      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fe febe 	bl	80025f0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e06d      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02e      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d027      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ac:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038c2:	4a29      	ldr	r2, [pc, #164]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d014      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fe fe8d 	bl	80025f0 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fe fe89 	bl	80025f0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e036      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ee      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4917      	ldr	r1, [pc, #92]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	4313      	orrs	r3, r2
 800390c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	490b      	ldr	r1, [pc, #44]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4904      	ldr	r1, [pc, #16]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	42420440 	.word	0x42420440

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e01d      	b.n	80039c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe faa0 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fa3a 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10f      	bne.n	8003a58 <HAL_TIM_Base_Stop_IT+0x48>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	f240 4344 	movw	r3, #1092	; 0x444
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_Base_Stop_IT+0x48>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0202 	mvn.w	r2, #2
 8003a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9a4 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f997 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f9a6 	bl	8003e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0204 	mvn.w	r2, #4
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f97a 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f96d 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f97c 	bl	8003e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f950 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f943 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f952 	bl	8003e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0210 	mvn.w	r2, #16
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2208      	movs	r2, #8
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f926 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f919 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f928 	bl	8003e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0201 	mvn.w	r2, #1
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd fbfc 	bl	80013e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d10e      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fa69 	bl	80040e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8ec 	bl	8003e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d10e      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0220 	mvn.w	r2, #32
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa34 	bl	80040d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIM_ConfigClockSource+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0a6      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x166>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d067      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0x120>
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d80b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x6c>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d073      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x140>
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d802      	bhi.n	8003cd6 <HAL_TIM_ConfigClockSource+0x62>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d06f      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cd4:	e078      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d06c      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x140>
 8003cda:	2b30      	cmp	r3, #48	; 0x30
 8003cdc:	d06a      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cde:	e073      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ce0:	2b70      	cmp	r3, #112	; 0x70
 8003ce2:	d00d      	beq.n	8003d00 <HAL_TIM_ConfigClockSource+0x8c>
 8003ce4:	2b70      	cmp	r3, #112	; 0x70
 8003ce6:	d804      	bhi.n	8003cf2 <HAL_TIM_ConfigClockSource+0x7e>
 8003ce8:	2b50      	cmp	r3, #80	; 0x50
 8003cea:	d033      	beq.n	8003d54 <HAL_TIM_ConfigClockSource+0xe0>
 8003cec:	2b60      	cmp	r3, #96	; 0x60
 8003cee:	d041      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cf0:	e06a      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d066      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x152>
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfc:	d017      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003cfe:	e063      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f000 f97d 	bl	800400e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e04c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f000 f966 	bl	800400e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d50:	609a      	str	r2, [r3, #8]
      break;
 8003d52:	e039      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	461a      	mov	r2, r3
 8003d62:	f000 f8dd 	bl	8003f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2150      	movs	r1, #80	; 0x50
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f934 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003d72:	e029      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f000 f8fb 	bl	8003f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2160      	movs	r1, #96	; 0x60
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f924 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003d92:	e019      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f000 f8bd 	bl	8003f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f914 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003db2:	e009      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 f90b 	bl	8003fda <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <TIM_Base_SetConfig+0xe0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <TIM_Base_SetConfig+0xe4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00f      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a2f      	ldr	r2, [pc, #188]	; (8003f14 <TIM_Base_SetConfig+0xe8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <TIM_Base_SetConfig+0xec>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <TIM_Base_SetConfig+0xf0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <TIM_Base_SetConfig+0xe0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <TIM_Base_SetConfig+0x82>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <TIM_Base_SetConfig+0xe4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00f      	beq.n	8003eae <TIM_Base_SetConfig+0x82>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e94:	d00b      	beq.n	8003eae <TIM_Base_SetConfig+0x82>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <TIM_Base_SetConfig+0xe8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <TIM_Base_SetConfig+0x82>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <TIM_Base_SetConfig+0xec>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_Base_SetConfig+0x82>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <TIM_Base_SetConfig+0xf0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d108      	bne.n	8003ec0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <TIM_Base_SetConfig+0xe0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_Base_SetConfig+0xc8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <TIM_Base_SetConfig+0xe4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d103      	bne.n	8003efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	615a      	str	r2, [r3, #20]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00

08003f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0201 	bic.w	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 030a 	bic.w	r3, r3, #10
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 0210 	bic.w	r2, r3, #16
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	031b      	lsls	r3, r3, #12
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f043 0307 	orr.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	609a      	str	r2, [r3, #8]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	021a      	lsls	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	431a      	orrs	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	609a      	str	r2, [r3, #8]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e032      	b.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e03f      	b.n	800418a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd ffa2 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800413a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 faab 	bl	8004698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d140      	bne.n	800422e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Receive_IT+0x26>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e039      	b.n	8004230 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Receive_IT+0x38>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e032      	b.n	8004230 <HAL_UART_Receive_IT+0x9e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2222      	movs	r2, #34	; 0x22
 80041ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_UART_IRQHandler+0x52>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f984 	bl	8004594 <UART_Receive_IT>
      return;
 800428c:	e0cc      	b.n	8004428 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80ab 	beq.w	80043ec <HAL_UART_IRQHandler+0x1b0>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_UART_IRQHandler+0x70>
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a0 	beq.w	80043ec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_UART_IRQHandler+0x90>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	f043 0201 	orr.w	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_UART_IRQHandler+0xb0>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	f043 0202 	orr.w	r2, r3, #2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_UART_IRQHandler+0xd0>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_UART_IRQHandler+0xf0>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	f043 0208 	orr.w	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d078      	beq.n	8004426 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_UART_IRQHandler+0x112>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f923 	bl	8004594 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_UART_IRQHandler+0x13a>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d031      	beq.n	80043da <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f86e 	bl	8004458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d023      	beq.n	80043d2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004398:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d013      	beq.n	80043ca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a6:	4a22      	ldr	r2, [pc, #136]	; (8004430 <HAL_UART_IRQHandler+0x1f4>)
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fa74 	bl	800289c <HAL_DMA_Abort_IT>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c4:	4610      	mov	r0, r2
 80043c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	e00e      	b.n	80043e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f83b 	bl	8004446 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e00a      	b.n	80043e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f837 	bl	8004446 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e006      	b.n	80043e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f833 	bl	8004446 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043e6:	e01e      	b.n	8004426 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	bf00      	nop
    return;
 80043ea:	e01c      	b.n	8004426 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_UART_IRQHandler+0x1cc>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f85a 	bl	80044ba <UART_Transmit_IT>
    return;
 8004406:	e00f      	b.n	8004428 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_UART_IRQHandler+0x1ec>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8a1 	bl	8004564 <UART_EndTransmit_IT>
    return;
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004426:	bf00      	nop
  }
}
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	08004493 	.word	0x08004493

08004434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800446e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff ffca 	bl	8004446 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b21      	cmp	r3, #33	; 0x21
 80044cc:	d144      	bne.n	8004558 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	d11a      	bne.n	800450e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	621a      	str	r2, [r3, #32]
 8004500:	e00e      	b.n	8004520 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]
 800450c:	e008      	b.n	8004520 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	1c59      	adds	r1, r3, #1
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6211      	str	r1, [r2, #32]
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29b      	uxth	r3, r3
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4619      	mov	r1, r3
 800452e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004542:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004552:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff55 	bl	8004434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b22      	cmp	r3, #34	; 0x22
 80045a6:	d171      	bne.n	800468c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d123      	bne.n	80045fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10e      	bne.n	80045de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
 80045dc:	e029      	b.n	8004632 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	629a      	str	r2, [r3, #40]	; 0x28
 80045f8:	e01b      	b.n	8004632 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6858      	ldr	r0, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6291      	str	r1, [r2, #40]	; 0x28
 8004612:	b2c2      	uxtb	r2, r0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e00c      	b.n	8004632 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	1c58      	adds	r0, r3, #1
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	6288      	str	r0, [r1, #40]	; 0x28
 800462a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4619      	mov	r1, r3
 8004640:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004642:	2b00      	cmp	r3, #0
 8004644:	d120      	bne.n	8004688 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0220 	bic.w	r2, r2, #32
 8004654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd f85c 	bl	800173c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e002      	b.n	800468e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046d2:	f023 030c 	bic.w	r3, r3, #12
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	430b      	orrs	r3, r1
 80046de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a52      	ldr	r2, [pc, #328]	; (8004844 <UART_SetConfig+0x1ac>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d14e      	bne.n	800479e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004700:	f7ff f850 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 8004704:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a4a      	ldr	r2, [pc, #296]	; (8004848 <UART_SetConfig+0x1b0>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	0119      	lsls	r1, r3, #4
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009a      	lsls	r2, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fbb2 f2f3 	udiv	r2, r2, r3
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <UART_SetConfig+0x1b0>)
 800473e:	fba3 0302 	umull	r0, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2064      	movs	r0, #100	; 0x64
 8004746:	fb00 f303 	mul.w	r3, r0, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a3d      	ldr	r2, [pc, #244]	; (8004848 <UART_SetConfig+0x1b0>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475c:	4419      	add	r1, r3
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fbb2 f2f3 	udiv	r2, r2, r3
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <UART_SetConfig+0x1b0>)
 8004776:	fba3 0302 	umull	r0, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	2064      	movs	r0, #100	; 0x64
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	3332      	adds	r3, #50	; 0x32
 8004788:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <UART_SetConfig+0x1b0>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	f003 020f 	and.w	r2, r3, #15
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	440a      	add	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800479c:	e04d      	b.n	800483a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800479e:	f7fe ffed 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 80047a2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009a      	lsls	r2, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	4a23      	ldr	r2, [pc, #140]	; (8004848 <UART_SetConfig+0x1b0>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	0119      	lsls	r1, r3, #4
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009a      	lsls	r2, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047da:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <UART_SetConfig+0x1b0>)
 80047dc:	fba3 0302 	umull	r0, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2064      	movs	r0, #100	; 0x64
 80047e4:	fb00 f303 	mul.w	r3, r0, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	4a16      	ldr	r2, [pc, #88]	; (8004848 <UART_SetConfig+0x1b0>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fa:	4419      	add	r1, r3
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009a      	lsls	r2, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <UART_SetConfig+0x1b0>)
 8004814:	fba3 0302 	umull	r0, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2064      	movs	r0, #100	; 0x64
 800481c:	fb00 f303 	mul.w	r3, r0, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <UART_SetConfig+0x1b0>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 020f 	and.w	r2, r3, #15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	440a      	add	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40013800 	.word	0x40013800
 8004848:	51eb851f 	.word	0x51eb851f

0800484c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800484c:	b084      	sub	sp, #16
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	f107 0014 	add.w	r0, r7, #20
 800485a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	b004      	add	sp, #16
 800486a:	4770      	bx	lr

0800486c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004874:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004878:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004880:	b29a      	uxth	r2, r3
 8004882:	89fb      	ldrh	r3, [r7, #14]
 8004884:	4313      	orrs	r3, r2
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048a2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048a6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	b21b      	sxth	r3, r3
 80048ba:	4013      	ands	r3, r2
 80048bc:	b21b      	sxth	r3, r3
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048ea:	b084      	sub	sp, #16
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	f107 0014 	add.w	r0, r7, #20
 80048f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ffa5 	bl	800486c <USB_EnableGlobalInt>

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800492e:	b004      	add	sp, #16
 8004930:	4770      	bx	lr

08004932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
	...

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	2500      	movs	r5, #0
 800494c:	4e0c      	ldr	r6, [pc, #48]	; (8004980 <__libc_init_array+0x38>)
 800494e:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 8004950:	1ba4      	subs	r4, r4, r6
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	42a5      	cmp	r5, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	f000 f822 	bl	80049a0 <_init>
 800495c:	2500      	movs	r5, #0
 800495e:	4e0a      	ldr	r6, [pc, #40]	; (8004988 <__libc_init_array+0x40>)
 8004960:	4c0a      	ldr	r4, [pc, #40]	; (800498c <__libc_init_array+0x44>)
 8004962:	1ba4      	subs	r4, r4, r6
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	42a5      	cmp	r5, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004970:	4798      	blx	r3
 8004972:	3501      	adds	r5, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800497a:	4798      	blx	r3
 800497c:	3501      	adds	r5, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	0800eadc 	.word	0x0800eadc
 8004984:	0800eadc 	.word	0x0800eadc
 8004988:	0800eadc 	.word	0x0800eadc
 800498c:	0800eae0 	.word	0x0800eae0

08004990 <memset>:
 8004990:	4603      	mov	r3, r0
 8004992:	4402      	add	r2, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr
